<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>兼容性脚本</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains the compatibility scripts" />
  <meta name="rh-index-keywords" content="Compatibility Scripts" />
  <meta name="search-keywords" content="compatibility scripts" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>兼容性脚本</h1>
  <p>对于那些来自<span class="notranslate">GameMaker</span>以前版本的用户来说，一开始使用<span class="notranslate">GameMaker Studio 2</span>可能会有点困惑，因为在处理项目资产、编辑和编码的方式上有很多变化。这些变化意味着
   <a class="glossterm" data-glossterm="IDE" href="#">IDE</a>和<a href="../GameMaker_Language/GameMaker_Language_Index.htm"><span class="notranslate">GameMaker语言</span>（<span class="notranslate">GML</span></a>）都不支持下面列出的项目。然而，这并不意味着你
    不能将用以前的版本制作的游戏导入<span class="notranslate">GameMaker Studio 2</span>，因为你可以。<span class="notranslate">GameMaker Studio 2</span>会自动将所有的传统功能转换为<strong>兼容性脚本</strong>，这些脚本包含的功能可以将传统的方法转换成更新的方法。
    脚本中包含将传统方法转换为更新方法的函数。</p>
  <p>发生的情况是，<span class="notranslate">GameMaker Studio 2</span>将解析你的项目，找出你所使用的所有过时的函数和变量，然后使用这些函数名称创建一系列的脚本。这些脚本将包含新的等价的
   <a href="../<span class=" notranslate"="">GameMaker_Language/<span class="notranslate">GML</span>_Overview/<span class="notranslate">Runtime</span>_Functions.htm"><span class="notranslate">运行时</span></a>函数或一个简短的<a href="../GameMaker_Language/GML_Overview/Script_Functions.htm">脚本函数</a>，执行与过时的函数相同的操作。</p>
  <p>当你第一次导入<span class="notranslate">GameMaker Studio 2</span>项目时，你会看到一个类似这样的兼容性报告。</p>
  <p><img alt="Compatibility Report" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Compatibility_Overview.png">报告的主体显示了哪些对象和脚本受到了影响以及影响的位置，而在最后
    你可以找到一个为你的项目创建的脚本的列表。你可以点击鼠标中键<img alt="MMB Icon" class="icon" src="../assets/Images/Icons/Icon_MMB.png"> ，或者在报告中列出的任何一个脚本上按下<img alt="F1 Icon" class="icon" height="20" src="../assets/Images/Icons/Icon_f1.png" width="55"> ，来打开它，看看做了什么。</p>
  <p>请注意，如果你看到任何创建的脚本在其名称前有一个双下杠（例如： <span class="inline">__global_object_depths</span> ），那么这些脚本是由IDE创建的，以帮助实现兼容性，而不是由过时的功能转换而来的脚本
    脚本，所以这些脚本<strong>不应该</strong>被篡改，因为它们是其他兼容脚本工作的必要条件。</p>
  <p>当你完成了对兼容性报告的修改，你可以关闭工作区，但如果你需要修改报告中的任何内容，你可以通过进入资产浏览器的 "<a href="../The_Asset_Editors/Notes.htm">注释</a>"部分再次找到它。
   <a href="../Introduction/The_Asset_Browser.htm">资产浏览器</a>的注释部分。</p>
  <p>请注意，你可以继续使用这些兼容脚本，就像你在<span class="notranslate">GameMaker</span>的传统版本中使用这些功能一样，但是，由于它们的工作方式，会对性能产生相关的影响。我们建议你
    更新项目，直接使用新的方法，如果可以的话，删除兼容脚本，因为这将提高性能，也让你了解<span class="notranslate">GameMaker Studio 2</span>和<span class="notranslate">GameMaker语言</span>与传统产品相比的工作方式。</p>
  <p>还要注意的是，有一些功能已经被引入<span class="notranslate">GameMaker语言</span>，以确保与旧项目的兼容性，这些功能将出现在这些兼容性脚本中。但是这些函数绝对不应该在你自己的项目中使用。
    你可以从手册的以下部分找到这些函数的列表。</p>
  <ul class="colour">
    <li><a href="Compatibility_Functions.htm">兼容性功能</a></li>
  </ul>
  <p>你也可以从下面的页面中找到所有已被淘汰的功能的完整列表，这些功能都有相应的兼容性脚本为其创建。</p>
  <ul class="colour">
    <li><a href="Obsolete_Functions.htm">过时的功能</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Additional_Information.htm">其他信息</a></div>
        <div style="float:right">下一个。<a href="Obsolete_Functions.htm">过时的功能</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Compatibility Functions
-->
  <!-- TAGS
compatibility_functions
-->
</body>
</html>