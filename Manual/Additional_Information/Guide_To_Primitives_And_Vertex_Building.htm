<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>基元和顶点构建指南</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how to set up and use primitives and vertex buffers" />
  <meta name="rh-index-keywords" content="Guide To Primitives And Vertex Building" />
  <meta name="search-keywords" content="primitive building,primitives,vertex,vertex buffers,vertex formats" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>基元和顶点构建指南</h1>
  <p>本指南简要介绍了如何使用自定义<strong>顶点格式</strong>和顶点<strong>缓冲器</strong>构建和使用<a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">基元</a>。 </p>
  <p>一般来说，当你开始使用3D、特效、复杂的绘图过程或<span class="notranslate">着色器</span>时，你不需要太担心正在使用的顶点格式，因为<span class="notranslate">GameMaker Studio 2</span>会自动为你设置和传递<a class="glossterm" data-glossterm="顶点" href="#">顶点</a>数据。然而，有时有必要创建你自己的顶点数据并将其格式化，特别是当你需要提高速度，或希望传递额外的信息。例如，标准的
    顶点格式包括一个x、y、z的三维位置、颜色（含alpha）和UV纹理坐标，如果你自己创建它，看起来会是这样的。</p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_textcoord();
    <br> my_format = vertex_format_end();</p>
  <p>然而，如果你只使用（例如）<span class="notranslate">着色器</span>来操作顶点的位置，那么就不需要传递颜色或纹理数据。在这种情况下，你可以这样创建你自己的格式。</p>
  <p class="code">vertex_format_begin（）;<br> vertex_format_add_position_3d（）。
    <br> my_format = vertex_format_end();</p>
  <p>在定义顶点格式时，总共有五个不同的顶点属性可以使用。</p>
  <ul class="colour">
    <li>颜色</li>
    <li>正常</li>
    <li>职务</li>
    <li>三维位置</li>
    <li>纹理坐标</li>
  </ul>
  <p>一般来说，你必须<em>始终</em>提供位置或三维位置作为格式的一部分，但其他的都是可选的。</p>
  <p>应该注意的是，一旦你创建了顶点格式，在构建<strong>基元</strong>时就<i>必须遵守</i>你定义顶点属性的顺序。因此，如果你将一个顶点格式定义为位置、颜色
    和纹理坐标，那么您就<b> <i>必须</i></b>以相同的顺序向基元添加这些属性，否则就会出现错误。还请注意，与其它任何动态资源一样，顶点格式需要内存，因此，在不需要时应使用函数删除
    因此应在不需要时使用函数 <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_delete.htm"><tt>vertex_format_delete()</tt></a>.</p>
  <p>您构建的任何基元都保存在一个<b>顶点缓冲区</b>里。这必须事先创建，然后由用于构建基元的函数来引用。顶点缓冲区可根据需要多次重复使用，以创建不同的
    基元，也可将其 &quot;冻结&quot;，以便在游戏或关卡期间维持一个特定的基元类型（这是最 快的方法，所以如果您知道您构建的基元不会改变，那么您应始终使用此选项）。</p>
  <p>下面的代码中显示了一个构建单个三角形基元的例子。</p>
  <p class="code">// CREATE EVENT<br> v_buff = vertex_create_buffer();<br> vertex_begin(v_buff, global.my_format);<br> vertex_position(v_buff, 10, 10);<br> vertex_colour(v_buff, c_white, 1);<br> vertex_texcoord(v_buff, 0, 0);<br> vertex_position(v_buff, 110, 10);<br> vertex_colour(v_buff, c_white, 1);<br> vertex_texcoord(v_buff, 1, 0);<br> vertex_position(v_buff, 110, 110);<br> vertex_colour(v_buff, c_white, 1);<br> vertex_texcoord(v_buff, 1, 1);<br> vertex_end(v_buff);
    <br>
    <br> // DRAW EVENT<br> var tex = sprite_get_texture(spr_Background, 0);<br> <span class="notranslate">shader</span>_set(shd_shimmer);
    <br> vertex_submit(v_buff, pr_trianglelist, tex);<br> <span class="notranslate">shader</span>_reset();
  </p>
  <p>在这里，我们首先在实例的创建事件中创建了我们的顶点缓冲区，然后我们开始定义构成我们的三角形基元的不同顶点，为每一个我们想要使用的点提供位置、颜色和纹理UV坐标。
    我们想使用的三个点的位置、颜色和纹理UV坐标。然后我们结束顶点定义，我们知道包含这些顶点数据的顶点缓冲区被存储在变量 &quot;v_buff &quot;中。  </p>
  <p class="note"><strong>注意</strong>：如果缓冲区的内容将被不断地更新，缓冲区将被创建，给予顶点数据，然后再次被销毁--在它被绘制之后--所有这些都在同一个步骤中。</p>
  <p>然后我们在Draw Event中使用<span class="notranslate">着色器</span>来绘制顶点缓冲区的内容。这是一个非常简单的例子，基本上是<span class="notranslate">GameMaker Studio 2</span>的内部工作方式，即：当你画一个精灵时，<span class="notranslate">GameMaker</span>创建一个有四个顶点的顶点缓冲区
    创建两个三角形（组成一个正方形，也叫 &quot;四边形&quot;），并将这两个三角形与精灵图像贴图。当我们绘制这个精灵时，我们提交顶点缓冲区，其内容被绘制到屏幕上。</p>
  <p>你会注意到当我们提交顶点缓冲区进行绘制时，我们提供了一个基元类型。您使用的基元类型可以是一个点、一个直线列表或条带、或一个三角形列表或条带，但您<i>不</i>允许使用三角形风扇，因为大多数移动
    硬件将不接受这种基元类型。不要忘了为将要用于绘制的基元类型正确格式化你的顶点缓冲区。例如，作为三角形列表绘制一个两个三角形基元需要 6 个点。
    但作为一个三角形条带，它只需要 4 个点。使用哪种类型由您决定，并取决于您想要绘制的东西和想要实现的效果。</p>
  <p>当以这种方式使用你自己的顶点缓冲区时，最后要注意的一点是它如何影响发送到GPU的顶点批次。当你创建一个顶点缓冲区时，你正在创建最底层的图形数据，所以当你绘制时，所有的
    是<span class="notranslate">GameMaker Studio 2</span>将你的缓冲区直接发送到显卡上。正因为如此，如果你想要更好的批处理，你必须自己解决，把你想批处理的东西存储在同一个缓冲区内。</p>
  <p>正如我们上面提到的，顶点格式是由以下5种属性类型共同建立的（通过适当的<tt>vertex_format_add_*</tt>函数添加）。</p>
  <ul class="colour">
    <li>颜色</li>
    <li>正常</li>
    <li>职务</li>
    <li>三维位置</li>
    <li>纹理坐标</li>
  </ul>
  <p>在GLSL ES<span class="notranslate">着色器</span>中，这些种类是通过以下4个属性来识别的。</p>
  <ul class="colour">
    <li>颜色</li>
    <li>正常</li>
    <li>职务</li>
    <li>纹理坐标</li>
  </ul>
  <p>现在，这可能看起来很奇怪，因为我们在顶点格式中可以指定的属性种类似乎比在顶点<span class="notranslate">着色器</span>中要多。然而，在<span class="notranslate">着色器</span>中，<i>Position</i>和<i>3D Position</i>被视为<em>相同的 </em>属性，只是
   <i>Position</i>被认为只有 &quot;x &quot;和 &quot;y &quot;坐标，而3D Position有 &quot;x<i>&quot;、&quot;y &quot;</i>和 &quot;z &quot;坐标。那么，你如何将你的顶点格式中的内容映射到你的<span class="notranslate">着色器</span>中的属性定义上<span class="notranslate">？</span>让我们
    首先看一下默认<span class="notranslate">着色器</span>中的一组典型属性。</p>
  <p> </p>
  <p class="code">属性 vec3 in_Position; // (x,y,z)<br> //属性 vec3 in_Normal; // (x,y,z) 在此<span class="notranslate">着色器</span>中未使用。<br> 属性 vec4 in_Colour; // (r,g,b,a)<br> 属性 vec2 in_TextureCoord; // (u,v)</p>
  <p>这里有一大块代码，它设置了一个与该着色器兼容的顶点格式<span class="notranslate">。</span></p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_textcoord();
    <br> my_format = vertex_format_end();</p>
  <p>现在，<span class="notranslate">着色器</span>属性是如何与顶点格式种类相匹配的？这只是基于命名惯例。</p>
  <ul class="colour">
    <li>&quot;in_Position &quot;映射到vertex_<tt>format_add_position / _3d(</tt>)</li>
    <li><tt>&quot;in_Colour &quot;映射到vertex_<tt>format_add_colour(</tt>)。</tt>
    </li>
    <li><tt><tt>&quot;in_TextureCoord &quot;映射到vertex_<tt>format_add_textcoord（</tt>）。</tt>
      </tt>
    </li>
  </ul>
  <p><tt><tt><tt></tt></tt>
    </tt>现在，当你有多个同类属性时，事情就变得棘手了，但事情仍然是基于相同的命名惯例。我们<b>现在</b>来看看提供额外的<b>颜色和</b> <b>纹理坐标</b>，因为在<span class="notranslate">着色器或</span>顶点格式中只能有一个位置和一个法线属性，但可以<em>有</em>多个颜色或纹理属性。</p>
  <p>当给你的<span class="notranslate">着色器</span>添加额外的颜色属性时，需要在<span class="notranslate">着色器</span>属性的末尾添加一个数字，以表明该属性映射到顶点格式中的哪个特定条目。下面是一个例子 - 首先是顶点格式。</p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_textcoord();
    <br> my_format = vertex_format_end();</p>
  <p>而现在，相关的<span class="notranslate">着色器</span>属性。</p>
  <p class="code">属性 vec3 in_Position; // (x,y,z)<br> 属性 vec4 in_Colour0; // (r,g,b,a)<br> 属性 vec4 in_Colour1; // (r,g,b,a)<br> 属性 vec2 in_TextureCoord; // (u,v)</p>
  <p>在这种情况下，<tt>in_Colour0</tt>映射到第一个<tt>vertex_format_add_colour()</tt>，<tt>in_Colour1</tt>映射到第二个。</p>
  <p>纹理坐标的处理方式与颜色略有不同。基本上，任何不被称为in_<tt>Position、in</tt>_<tt>Normal或</tt>in_<tt>Colour[0 ...]</tt>属性的东西都被视为纹理坐标。它们的顺序是
    在<span class="notranslate">着色器</span>的属性列表中，它们被定义的顺序是指它们映射到顶点格式中的哪个属性。请看下面的<span class="notranslate">GML</span>例子。</p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_textcoord();
    <br> vertex_format_add_textcoord()。
    <br> vertex_format_add_textcoord();
    <br> my_format = vertex_format_end();</p>
  <p>而<span class="notranslate">着色器</span>的代码将看起来像这样。</p>
  <p class="code">属性 vec3 in_Position; // (x,y,z)<br> 属性 vec4 in_Colour; // (r,g,b,a)<br> 属性 vec2 in_myTexcoord; // (u,v)<br> 属性 vec2 in_TextureCoord; // (u,v)<br> 属性 vec2 in_Something; // (u,v)</p>
  <p>在这个例子中，<tt>in_myTexcoord</tt>、<tt>in_TextureCoord</tt>和<tt>in_Something</tt>映射到顶点格式中定义的三个连续的纹理坐标属性。</p>
  <p>你可以从以下页面找到创建顶点格式、顶点缓冲器和基元所需的所有函数的完整列表。</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">基元和顶点格式</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Additional_Information.htm">其他信息</a></div>
        <div style="float:right">下一步。<a href="Guide_To_Using_Blendmodes.htm">Blendmodes使用指南</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Primitive Building
Vertex Formats
Vertex Buffers
-->
  <!-- TAGS
using_primitives_vertex_buffers
-->
</body>
</html>