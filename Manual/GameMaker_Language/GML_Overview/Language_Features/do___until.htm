<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>做/直到</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the do / until functions" />
  <meta name="rh-index-keywords" content="do,until" />
  <meta name="search-keywords" content="do,until" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>做/直到</h1>
  <p>一个<tt>do</tt>函数是对一个或多个<span class="glossextra">语句</span>进行多次迭代的另一种方式，它实际上是一个 &quot;do...<tt>until &quot;</tt>语句，因为
    因为你要告诉<span class="notranslate">GameMaker Studio 2</span>做一些事情，直到一个特定的<a class="glossterm" data-glossterm="表情" href="#">表达式</a>返回<tt>真值</tt>，所以两者缺一不可。它有这种形式。</p>
  <p class="code">do<br> {
    <br> &lt;statement&gt;;
    <br> &lt;statement&gt;。
    <br> ...
    <br> }
    <br> 直到（&lt;表达式&gt;）。</p>
  <p>语句（可以是大括号<tt>{}</tt>内的多个语句的代码块）被执行，直到发现表达式为<tt>真</tt>，并且初始语句<strong>总是被至少执行一次</strong>。下面你
    可以找到一个使用<tt>do...until</tt>的典型例子。</p>
  <p class="code">do<br> {
    <br> x = random(room_width);<br> y = random(room_height);<br> }
    <br> 直到（place_free(x, y)）。</p>
  <p>上面的代码试图将当前对象放置在一个自由的位置，并将至少设置一次x/y变量，然后根据需要<span class="glossextra">进行</span>多次<a class="glossterm" data-glossterm="迭代" href="#">迭代</a>
    直到<tt>place_free()</tt>表达式返回<tt>true</tt>。</p>
  <p><strong>什么时候应该使用 <span class="inline">do</span> / <span class="inline">until</span> 循环？当</strong>你想重复一个或多个语句，但实际上不知道它要重复多少次，并且希望
    以确保这些语句在循环结束前至少被运行<em>一次</em>。</p>
  <p>你也可以使用 <a href="break.htm"><span class="inline">break</span></a>和 <a href="continue.htm"><span class="inline">continue</span></a>语句在你的 <span class="inline">do</span> 循环中。使用 <span class="inline">break</span> 将
    立即退出循环，并在循环结束后转入事件或函数中的任何代码，如</p>
  <p class="code">var _id = noone;<br> do
    <br> {<br> _id = list[| 0];<br> if instance_exists(_id)<br> {<br> _break;<br> }<br> ds_list_delete(list, 0);<br> }<br> until (ds_list_empty(list));<br> target = _id;</p>
  <p>在上面的代码中，我们创建了一个局部变量，并将其设置为持有关键字<a href="../Instance_Keywords.htm">noone</a>。然后我们执行一个 <span class="inline">do / until</span> 循环，检查一个DS列表的第一个位置，看它是否持有一个有效的
    实例ID，如果它是，我们就 <span class="inline">break</span> 循环，否则就删除列表位置的值。循环结束后（无论是由 <span class="inline">break</span> ，还是因为列表为空），本地变量的值被分配给实例ID。
    变量的值会被分配到实例变量 <span class="inline">target</span> 。</p>
  <p>在 <span class="inline">do / until</span> 循环中使用continue的一个例子是。</p>
  <p class="code">做<br> {
    <br> var _x = random(room_width);<br> var _y = random(room_height);<br> if (instance_position(_x, y, obj_Enemy)<br> {
    <br> 继续。
    <br> }
    <br> instance_create_layer(_x, _y, &quot;Instances&quot;, obj_Enemy);<br> }
    <br> 直到（instance_count(obj_Enemy) &gt;= 10）。</p>
  <p>这段代码将生成一个随机的房间位置，然后检查该位置是否存在一个对象的实例 <span class="inline">obj_Enemy</span> 。如果存在，则使用 <span class="inline">continue</span> 终止当前的循环迭代，并开始新的迭代。
    开始新的迭代，如果没有，则在随机位置创建一个对象 <span class="inline">obj_Enemy</span> 的实例。只有当房间里有10个或更多的对象实例时，该循环才会终止。</p>
  <p>最后一点：要小心你的 "<tt>做</tt>"的循环，因为你可以很容易地让它们永远循环下去，在这种情况下，你的游戏将挂起，不再对任何用户的输入作出反应，他们将不得不强制关闭它。</p>
  <p>更多关于循环关键词的例子，请参见以下章节 <a href="repeat.htm"><tt>重复</tt></a>, <a href="while.htm"><tt>while</tt></a>，以及 <a href="for.htm"><tt>为</tt></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="../Language_Features.htm">语言特点</a></div>
        <div style="float:right">下一页:<a href="for.htm">为</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
do
until
-->
  <!-- TAGS
do
until
-->
</body>
</html>