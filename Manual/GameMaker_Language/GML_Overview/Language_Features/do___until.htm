<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>do / until</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="页面概述do / until功能" />
  <meta name="rh-index-keywords" content="do,until" />
  <meta name="search-keywords" content="do,until" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>do / until</h1><p>一种 <tt>do</tt>功能是遍历一个或多个的另一种方式<a class="glossterm" data-glossterm="陈述" href="#">声明</a><span class="glossextra">的</span>多重次，是真正的“<tt>do... until</tt> ”一词，因为您要告诉<span class="notranslate">GameMaker Studio 2</span>做某事直到特定<a class="glossterm" data-glossterm="表达" href="#">表达式</a>返回，否则您将一无所有 <tt>true</tt>。它具有以下形式：</p><p class="code">do<br/> {
    <br/> &lt;statement&gt;;
    <br/> &lt;statement&gt;;
    <br/> ...
    <br/> }
    <br/> until (&lt;expression&gt;);</p><p>语句（可以是大括号内的多个语句的代码块 <tt>{}</tt>）一直执行到发现表达式为 <tt>true</tt>，并且初始语句<strong>始终至少执行一次</strong>。您可以在下面找到典型使用方式的示例 <tt>do... until</tt>：</p><p class="code">do<br/>     {
    <br/>     x = random(room_width);<br/>     y = random(room_height);<br/>     }
    <br/> until (place_free(x, y));</p><p>上面的代码尝试将当前对象放置在自由位置，并将x / y变量至少设置一次，然后根据需要<a class="glossterm" data-glossterm="迭代" href="#">执行尽可能多的迭代</a><span class="glossextra">s，直到 </span><tt>place_free()</tt>表达式返回 <tt>true</tt>。</p><p><strong>什么时候应该使用 <span class="inline">do</span>/ <span class="inline">until</span>环形？</strong>任何时候要重复一个或多个语句，但实际上不知道它必须重复多少次，并且想要确保语句<em>在循环结束之前至少运行一次时</em>，应该使用它。</p><p>您也可以使用<a href="break.htm"><span class="inline">break</span></a>和<a href="continue.htm"><span class="inline">continue</span></a>您内的陈述 <span class="inline">do</span>循环。使用 <span class="inline">break</span>将立即退出循环并在循环应完成后继续执行事件或函数中的任何代码，例如：</p><p class="code">var _id = noone;<br/> do
    <br/>     {<br/>     _id = list[| 0];<br/>     if instance_exists(_id)<br/>         {<br/>         _break;<br/>         }<br/>     ds_list_delete(list, 0);<br/>     }<br/> until (ds_list_empty(list));<br/> target = _id;</p><p>在上面的代码中，我们创建一个局部变量并将其设置为包含关键字<a href="../Instance_Keywords.htm">noone</a>。然后，我们执行 <span class="inline">do / until</span>循环检查DS列表的第一个位置，以查看它是否持有有效的实例ID，如果存在，则我们 <span class="inline">break</span>循环，否则将删除列表位置的值。循环终止后（通过 <span class="inline">break</span>或因为列表为空），然后将局部变量值分配给实例变量 <span class="inline">target</span>。</p><p>在 <span class="inline">do / until</span>循环将是：</p><p class="code">do<br/>     {
    <br/>     var _x = random(room_width);<br/>     var _y = random(room_height);<br/>     if (instance_position(_x, y, obj_Enemy)<br/>         {
    <br/>         continue;
    <br/>         }
    <br/>     instance_create_layer(_x, _y, &quot;Instances&quot;, obj_Enemy);<br/>     }
    <br/> until (instance_count(obj_Enemy) &gt;= 10);</p><p>此代码将生成一个随机的房间位置，然后检查对象的实例是否 <span class="inline">obj_Enemy</span>存在于那个位置。如果是这样，则使用终止当前循环迭代 <span class="inline">continue</span>然后开始新的迭代，如果没有，则该对象的实例 <span class="inline">obj_Enemy</span>在随机位置创建。仅当房间中有10个或更多对象实例时，循环才会终止。</p><p>最后一点：小心您的 <tt>do</tt>循环，因为您可以轻松地使它们永远循环，在这种情况下，您的游戏将挂起，不再对任何用户输入做出反应，因此必须强制关闭它。</p><p>有关循环关键字的更多示例，请参见 <a href="repeat.htm"><tt>repeat</tt></a>，<a href="while.htm"><tt>while</tt></a> ， 和 <a href="for.htm"><tt>for</tt></a>。 </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">返回：<a href="../Language_Features.htm">语言功能</a></div><div style="float:right">下一个：<a href="for.htm">for</a></div></div></div><h5> <span data-keyref="Copyright Notice">©版权所有<span class="notranslate">YoYo Games Ltd.</span> 2021保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
do
until
-->
  <!-- TAGS
do
until
-->
</body>
</html>