<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>常数</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="解释不同GML常量的页面" />
  <meta name="rh-index-keywords" content="常数,巨集,enum,pointer_invalid,pointer_null,undefined,NaN,infinity,true,false,pi" />
  <meta name="search-keywords" content="常数,巨集,枚举,巨集,enum" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>常数</h1><p>常量是一种变量类型，它在游戏开始时设置一次，然后从不更改。实际上，常量值<em>在声明后就无法更改</em>。这使得它们非常适合持有在整个游戏中用于识别特殊数据的值。</p><p>在<span class="notranslate">GameMaker Language</span> ，有两种类型的用户定义常量：<strong>宏</strong>和<strong>枚举</strong>，下面将对这两种类型进行说明。<a href="../Data_Types.htm">还要注意，无论数据类型是什么</a>，例如字符串或数字3，任何始终相同的值都将被归为常量。</p><p class="note"><strong>注意</strong>： <span class="notranslate">GameMaker Language</span>还具有许多内置的常量值，用于识别特定的事物。 <a href="../../GML_Reference/GML_Reference.htm"><span class="notranslate">GML</span>参考”</a>部分中针对需要它们<span class="notranslate">runtime</span>函数的相应页面上概述了这些内容。</p><p></p><h2>巨集</h2><p>宏虽然不完全是变量，但它们的用法与它们相似，即：它们是命名值，您可以在整个代码中使用它们来替换<a class="glossterm" data-glossterm="硬编码" href="#">硬编码的</a>值。基本上，宏是一个命名变量，可保存任何<a href="../Data_Types.htm">数据类型</a>的恒定单个值。<a href="../Script_Functions.htm">您可以使用脚本编辑器</a>定义自己的宏，然后在代码和<span class="notranslate">DnD</span>™中使用它们，就像它们是常规变量一样，唯一的区别是它们<i>不能在游戏中更改</i>。</p><p>宏的语法结构如下：</p><p class="code">#macro <i>&lt;variable&gt;</i> <i>&lt;value&gt;</i></p><p>例如，说您定义了以下宏“<span class="inline">total_weapons</span> ”（请注意前面的“<span class="inline">#</span> “而且没有冒号”<span class="inline">;</span> “ 在最后）：</p><p class="code">#macro total_weapons 10</p><p>然后，您可以像这样在代码中调用此代码：</p><p class="code">if ++pos == total_weapons<br/>     {
    <br/>     pos = 0;<br/>     }
  </p><p>请注意，您将无法更改常量值，因此类似这样的代码将导致游戏崩溃：</p><p class="code">total_weapons = 11;</p><p>您可以在代码或脚本中的任何位置定义宏，并且该宏将在一开始就被<i>预编译</i>并包含在游戏中，但是我们建议您创建专用的脚本资产并在其中定义所有宏。那里。以后组织和调试将更加容易！</p><p>如果您需要在运行时更改宏的值，则应将其设置为<a href="Global_Variables.htm">全局变量</a>，因为在游戏过程中可以从代码中更改它们，除非您将宏设置为<span><a href="../Runtime_Functions.htm"><span class="notranslate">runtime</span></a></span><a href="../Runtime_Functions.htm">function</a> 。通过将宏设置为函数，意味着每次使用宏时都会调用此函数。例如：</p><p class="code">#macro col make_colour_hsv(irandom(255), 255, 255)</p><p>然后，您可以将此宏称为类似以下内容的代码：</p><p class="code">image_blend = col;</p><p>每次使用宏时，使用此代码将使图像混合不同的颜色。值得注意的是，您也可以使用 <span class="inline"><tt>\</tt></span>显示换行符的字符。例如：</p><p class="code">#macro hello show_debug_message(&quot;Hello&quot; + \<br/> string(player_name) + \<br/> &quot;, how are you today?&quot;);</p><p>这样做纯粹是为了美观，因为这样分割宏不会对使用后的最终宏的结果产生任何影响，而只是为具有较长代码行的宏提供对多行文本的支持。</p><p>宏的一个非常重要的功能是可以定义它们以用于特定的<a href="../../../Settings/Configurations.htm">配置</a>（config），这意味着您可以使用相同的宏名，但根据当前选择的配置为其赋予不同的值。例如，假设您有一个针对<span class="notranslate">Android</span> Ads的配置，另一个针对<span class="notranslate">iOS</span> Ads的配置，那么您可以定义一个宏来保存所需的应用ID值：</p><p class="code">#macro ad_id &quot;&quot;;<br/> #macro Android:ad_id &quot;com.yoyogames.googlegame&quot;<br/> #macro iOS:ad_id &quot;com.yoyogames.appstoregame&quot;</p><p>如您所见，首先给配置名称，然后给冒号 <span class="inline">:</span>然后是宏的名称和值。请注意，冒号之间不能有任何空格 <span class="inline">:</span>以及配置名称或宏名称，否则您将得到一个错误。</p><p></p><h2>枚举</h2><p>枚举是一个“枚举器”，它实质上允许您使用常量列表创建自己的有限数据类型，并且它们具有以下结构：</p><p class="code">enum <i>&lt;variable&gt; </i>{<br/>
    <i>&lt;constant&gt;</i> [= <i>&lt;value&gt;</i>],<br/>
    <i>&lt;constant&gt;</i> [= <i>&lt;value&gt;</i>],<br/> // etc...<br/> }
  </p><p>在下面的示例中，我们为彩虹的颜色创建一个枚举，并为其分配各种常量和默认值：</p><p class="code">enum rainbowcolours {<br/>     red,<br/>     orange,<br/>     yellow,<br/>     green,<br/>     blue,<br/>     indigo,<br/>     violet<br/>     }</p><p>枚举条目只能是<b>整数</b>或<b><a class="glossterm" data-glossterm="表达" href="#">表达式</a><span class="glossextra">s</span> ，而先前的枚举的结果为整数</b>，默认情况下从0向上编号，因此上面给出的示例将默认为 <tt>red = 0</tt>，<tt>orange = 1</tt> ，<tt>yellow = 2</tt> ， 等等...</p><p>您还可以在创建时将值分配给枚举变量：</p><p class="code">enum enum_test {<br/> val = 10;<br/> }
    <br/>
    <br/> enum rainbowcolours {<br/>     red = 5,<br/>     orange = 5 * 2,<br/>     yellow = 15,<br/>     green = 20,<br/>     blue = 25,<br/>     indigo = 30,<br/>     violet = 35 * enum_test.val<br/>     }</p><p>请注意，在上面的示例中，我们使用另一个枚举为“紫罗兰色”创建表达式。这仅在被引用<i>的枚举在表达式中使用它的枚举之前创建的情况下才有效</i>，但是它不适用于变量或函数，因为在项目为<a class="glossterm" data-glossterm="编译中" href="#">Compiling</a>时必须能够将枚举值评估为常量。还要注意，所有枚举值均求值为<b>整</b>数值，并且在创建自己的枚举值时应注意，枚举<i>只能使用整数值。</i>该值可以是浮点双精度数字可以表示的任何整数，包括负值。</p><p>若要稍后访问给定枚举类型内的值，可以使用该点 <tt>&quot;.&quot;</tt>方法，如下所示：</p><p class="code">variable = &lt;enum_name&gt;.&lt;<em>enum_variable</em>&gt;;</p><p>例如，让我们使用“<span class="inline">rainbowcolours</span>我们在上面的代码中创建的枚举：</p><p class="code">colour_value = rainbowcolours.green * rainbowcolours.red;</p><p>这 <span class="inline">colour_value</span>变量现在将保留值100（20 * 5）。</p><p>请注意，<em>创建任何枚举常量后，您无法</em>修改其值，与创建宏后无法修改它们的方式几乎相同。</p><p></p><h2>内置常数</h2><p>下表显示了项目中的某些函数和操作可以返回的内置常数的列表：</p><p></p><table><tbody><tr><th>持续的</th><th>描述</th></tr><tr><td><span class="notranslate"><span class="inline">pointer_null</span></span></td><td>此常数表示指针未指向任何有意义的内容（与<span> </span><tt>NULL</tt><span> </span>在C ++中为null，在C＃中为null）</td></tr><tr><td><span class="notranslate"><span class="inline">pointer_invalid</span></span></td><td>该常量仅表示该值不是有效的指针</td></tr><tr><td><span class="notranslate"><span class="inline">undefined</span></span></td><td><em>当函数必须返回某些内容</em>但没有适当或“正确”的值返回时，将返回此常量</td></tr><tr><td><span class="notranslate"><span class="inline">NaN</span></span></td><td><span>当编译器无法将运算结果评估为数字时可以返回的此常数-例如，0/0不能定义为实数，因此由以下形式表示 </span><tt>NaN</tt></td></tr><tr><td><span class="notranslate"><span class="inline">infinity </span></span></td><td><tt><span data-highlight-container="true"><span data-highlight="true"><font face="open_sansregular"><span style="font-size: 18px; font-weight: 400;">This constant </span></font></span></span></tt><span>指被认为是无穷大的数字，例如，将任何浮点值除以零时将得到的结果，例如：1.0 / 0。</span></td></tr><tr><td><span class="notranslate"><span class="inline">true</span></span></td><td>该常数表示值1，这是<span class="notranslate">GameMaker Studio</span>将其评估为布尔“ true”的值（请注意，等于或大于1的任何值都将评估为 <span class="inline">true</span>）。</td></tr><tr><td><span class="notranslate"><span class="inline">false</span></span></td><td>该常数表示值0，这是<span class="notranslate">GameMaker Studio</span>将其评估为布尔值“ false”的情况（请注意，任何小于或等于0的值都将评估为 <span class="inline">false</span>）。</td></tr><tr><td><span class="notranslate"><span class="inline">pi</span></span></td><td>该常数表示pi的值：3.141592653589793280等...尽管确切值将取决于各种因素，例如操作系统或目标平台。 </td></tr></tbody></table><p></p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">返回：<a href="../Variables_And_Variable_Scope.htm">变量和变量范围</a></div><div style="float:right">下一页：<a href="Local_Variables.htm">局部变量</a></div></div></div><h5><span data-keyref="Copyright Notice">©版权所有<span class="notranslate">YoYo Games Ltd.</span> 2021保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
constants
macros
enums
macro
enum
-->
  <!-- TAGS
constants
macro
enum
-->
</body>
</html>