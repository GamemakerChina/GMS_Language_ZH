<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>常数</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the different GML constants" />
  <meta name="rh-index-keywords" content="Constants,macro,enum,pointer_invalid,pointer_null,undefined,NaN,infinity,true,false,pi" />
  <meta name="search-keywords" content="constants,macros,enums,macro,enum" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>常数</h1>
  <p>常数是一种变量，在游戏开始时被设置一次，然后永远不会改变。事实上，常量值<em>在被声明后不能被改变</em>。这使它们成为保存整个游戏中用于识别特殊数据的数值的理想选择。
    识别特殊数据。</p>
  <p>在<span class="notranslate">GameMaker语言</span>中，有两种类型的用户定义的常量：<strong>宏</strong>和<strong>枚举</strong>，这两种类型的常量将在下面解释。还请注意，任何总是相同的值都被归类为常量，无论其数据类型如何。
   <a href="../Data_Types.htm">数据类型</a>，例如，一个字符串或数字3。</p>
  <p class="note"><strong>注意</strong>：<span class="notranslate">GameMaker语言</span>也有一些内置的常量值，用于识别特定的东西。这些常量值在<a href="../../GML_Reference/GML_Reference.htm"><span class="notranslate">GML</span></a>参考部分中需要它们的<span class="notranslate">运行时</span>函数的相应页面上有概述。</p>
  <p> </p>
  <h2>巨集</h2>
  <p>虽然不完全是变量，但宏在使用方式上与它们类似，即：它们是命名的值，你可以在整个代码中使用，以取代<a class="glossterm" data-glossterm="硬编码" href="#">硬编码</a>的值。基本上，一个宏
    是一个命名的变量，持有任何<a href="../Data_Types.htm">数据类型</a>的恒定单值。你可以使用<a href="../Script_Functions.htm">脚本编辑器</a>定义你自己的宏，然后在你的代码和<span class="notranslate">DnD</span>™中使用它们，就好像它们是
    是普通的变量，唯一的区别是它们<i>在游戏中不能被改变。</i></p>
  <p>宏的语法结构如下。</p>
  <p class="code">#macro<i>&lt;variable&gt; &lt;</i>value<i>&gt;</i></p>
  <p>例如，假设你定义了以下宏 &quot;<span class="inline">total_weapons</span>&quot; （注意前面的 &quot;<span class="inline">#</span>&quot; 和后面没有冒号 &quot;<span class="inline">;</span>&quot; ）。</p>
  <p class="code">#macro total_weapons 10</p>
  <p>然后你可以在你的代码中这样调用它。</p>
  <p class="code">if ++pos == total_weapons<br> {
    <br> pos = 0;<br> }
  </p>
  <p>注意，你将不能改变常量值，所以像这样的代码将导致游戏崩溃。</p>
  <p class="code">total_weapons = 11;</p>
  <p>你可以在你的代码或脚本中的任何地方定义一个宏，它将被<i>预先编译</i>并包含在你的游戏中，就像它一开始就在那里一样，但我们建议你创建一个专门的脚本资产，并在那里定义所有的宏。
    这将更容易组织和调试。</p>
  <p>如果你需要宏的值在运行时改变，那么你可能应该把它变成一个<a href="Global_Variables.htm">全局变量</a>，因为这些变量可以在游戏中从代码中改变，除非你把宏设置成一个<span> <a href="../Runtime_Functions.htm"><span class="notranslate">运行时</span> </a></span>   <a href="../Runtime_Functions.htm">函数</a>。将宏设置为函数，意味着每次使用宏时都会调用这个函数。比如说。</p>
  <p class="code">#macro col make_colour_hsv(irandom(255), 255, 255)</p>
  <p>然后你可以这样调用这个宏。</p>
  <p class="code">image_blend = col;</p>
  <p>使用这段代码将使图像在每次使用宏时混合出不同的颜色。值得注意的是，你也可以用 <span class="inline"><tt>\</tt></span> 字符将宏分成多行，以显示断行的位置。
    一个例子是这样的。</p>
  <p class="code">#macro hello show_debug_message(&quot;Hello&quot; + \<br> string(player_name) + \<br> &quot; ，你今天好吗？&quot;)。</p>
  <p>这纯粹是表面现象，因为这样拆分宏不会对最终宏的结果产生任何影响，只是为了在代码行较长的宏上提供对多行文本的支持。</p>
  <p>宏的一个非常重要的特点是，它们可以被定义为与特定的<a href="../../../Settings/Configurations.htm">配置</a>（configs）一起使用，这意味着你可以有相同的宏名称，但根据当前的配置给它不同的值
    选择不同的配置。例如，如果你有一个用于<span class="notranslate">安卓</span>广告的配置和另一个用于<span class="notranslate">iOS</span>广告的配置，那么你可以定义一个宏来保存所需的应用ID值。</p>
  <p class="code">#macro ad_id &quot;&quot;;<br> #macro Android:ad<span class="notranslate">_id &quot;</span>com.yoyogames.googlegame&quot;<br> #macro iOS:ad_id &quot;com.yoyogames.appstoregame&quot;</p>
  <p>正如你所看到的，你首先给出了配置名称，然后是冒号 <span class="inline">:</span> ，然后是宏名称和值。请注意，在冒号 <span class="inline">:</span> 和配置名或宏名之间不能有任何白字。
    之间不能有任何空格，否则你会得到一个错误。</p>
  <p> </p>
  <h2 id="enumhead">枚举</h2>
  <p>枚举是一种 &quot;枚举器&quot;，它本质上允许你用一个常量值的列表来创建你自己的有限的数据类型，它们有以下结构。</p>
  <p class="code"> <i>&lt;变量&gt;<br></i>枚举 
    {<br>
       <i> &lt;constant&gt; [= &lt;</i>value<i>&gt; ] 。</i><br>
       <i> &lt;constant&gt; [= &lt;</i>value<i>&gt;],</i><br> // 等...<br> }</p>
  <p>在下面的例子中，我们为彩虹的颜色创建了一个枚举，并给它分配了各种常数和默认值。</p>
  <p class="code">enum rainbowcolours<br> {<br> red,<br> orange,<br> yellow,<br> green,<br> blue,<br> indigo,<br> violet<br> }</p>
  <p>枚举条目只能是<b>整数</b>或<b>与之前的枚举一起评估为整数</b>的<b><span class="glossextra">表达式</span></b>，并且默认为从0向上编号。
    从0往上，所以我们上面的例子默认为<tt>红色=0</tt>，<tt>橙色=1</tt>，<tt>黄色=2</tt>，等等。</p>
  <p>你也可以在创建时给枚举变量赋值。</p>
  <p class="code">enum enum_test<br> {<br> val = 10;<br> }<br>
    <br> enum rainbowcolours<br> {<br> red = 5,<br> orange = 5 * 2,<br> yellow = 15,<br> green = 20,<br> blue = 25,<br> indigo = 30,<br> violet = 35 * enum_test.val<br> }</p>
  <p>注意在上面的例子中，我们使用另一个枚举来创建 &quot;紫罗兰 &quot;的表达式。这只有在被引用的枚举是在表达式中使用它的枚举<i>之前</i>创建的情况下才有效，但它对变量或
    函数不起作用，因为枚举值必须能够在项目<a class="glossterm" data-glossterm="汇编" href="#">编译</a>时被评估为一个常量。还要注意的是，所有的枚举值都被评估为<b>整数</b>值，当你创建
    你应该知道<i>只有整数值才允许</i>枚举工作。这个值可以是浮点双精度数字可以表示的任何整数，包括负值。</p>
  <p>为了以后访问给定枚举类型内的值，你可以使用点<tt>&quot;. &quot;方法，</tt>像这样。</p>
  <p class="code">变量=&lt;enum_name&gt;.&lt; enum_<em>variable&gt;。</em></p>
  <p>作为一个例子，让我们使用我们在上面的代码中创建的 &quot;<span class="inline">rainbowcolours</span>&quot; 枚举。</p>
  <p class="code">color_value = rainbowcolours.green * rainbowcolours.red。</p>
  <p> <span class="inline">colour_value</span> 变量现在将持有100（20*5）的数值。</p>
  <p>请注意，在任何枚举常量被创建后，你<em>不能 </em>修改它的值，就像你在创建后不能修改宏一样。</p>
  <p class="note"><strong>注意</strong>：枚举值是以int64的形式存储的，所以对其运行 <tt><a href="../../GML_Reference/Variable_Functions/is_real.htm">is_real()</a></tt>就会返回<tt>错误</tt>。</p>
  <p> </p>
  <h2>内置常量</h2>
  <p>下表显示了一个内置常数的列表，这些常数可以由你项目中的一些函数和操作返回。</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>恒定</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="inline">pointer_null</span></td>
        <td>这个常数表示指针没有指向任何有意义的东西（与C++中的<span> </span><tt>NULL</tt><span> </span>或C#中的null相同）。</td>
      </tr>
      <tr>
        <td><span class="inline">pointer_invalid</span></td>
        <td>这个常数仅仅意味着该值不是一个有效的指针</td>
      </tr>
      <tr>
        <td><span class="inline">undefined</span></td>
        <td>当一个函数需要返回<em>一些东西</em>，但没有合适的或 &quot;正确的 &quot;值来返回时，就会返回这个常数。</td>
      </tr>
      <tr>
        <td><span class="inline">NaN</span></td>
        <td><span>这个常数在编译器无法将运算结果评估为数字时可以返回--例如，0 / 0不能被定义为实数，因此被表示为 </span><tt>NaN</tt></td>
      </tr>
      <tr>
        <td><span class="inline">infinity</span></td>
        <td><tt><span data-highlight-container="true"><span data-highlight="true"><font face="open_sansregular"><span style="font-size: 18px; font-weight: 400;">这个常数 </span></font></span></span></tt><span>指的是一个被认为是无限的数字，比如你用任何浮点值除以0后得到的结果，例如：1.0/0。</span></td>
      </tr>
      <tr>
        <td><span class="inline">true</span></td>
        <td>这个常数代表值1，<span class="notranslate">GameMaker Studio</span>将其评估为布尔值 &quot;true&quot;（注意，任何等于或大于1的值将评估为 <span class="inline">true</span> ）。</td>
      </tr>
      <tr>
        <td><span class="inline">false</span></td>
        <td>这个常数代表值0，<span class="notranslate">GameMaker Studio</span>将其评估为布尔值 &quot;false&quot;（注意，任何小于或等于0的值将评估为 <span class="inline">false</span> ）。</td>
      </tr>
      <tr>
        <td><span class="inline">pi</span></td>
        <td>这个常数代表π的值：3.141592653589793280等......尽管确切的值将取决于各种因素，如操作系统或目标平台。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">回来。<a href="../Variables_And_Variable_Scope.htm">变量和变量范围</a></div>
        <div style="float:right">下一步。<a href="Local_Variables.htm">本地变量</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
constants
macros
enums
macro
enum
-->
  <!-- TAGS
constants
macro
enum
-->
</body>
</html>