<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>变量和变量范围</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining variables and their scoping in GML" />
  <meta name="rh-index-keywords" content="Variables And Variable Scope" />
  <meta name="search-keywords" content="variables,scope,local variables,instance variables,global variables" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>变量和变量范围</h1>
  <p>像任何编程语言一样 <b><span class="notranslate">GML</span></b>使用<i>变量</i>作为大多数编程操作的基本单位。变量用于在设备内存中存储信息，以便以后（或即时）使用，并给它们一个名称，以便在运行时和脚本函数中引用它们。
    在<span class="notranslate">运行时</span>和脚本功能中引用它们。一个变量在 <b><span class="notranslate">GML</span></b>中的一个变量可以存储许多不同的 <a href="Data_Types.htm"><strong>数据类型</strong></a>比如一个实数（如：100，2.456575，-56等......），一个字符串（如：&quot;Hello world!&quot;），一个整型
    例如：1，556，-7），或一个布尔值<tt>（真</tt>或<tt>假</tt>），以及其他东西。</p>
  <p class="code">var _num = 126.4545;<br> var _str = &quot;Hello World&quot;;<br> new_num = _num * 100;<br> global.my_string = _str + &quot; I said&quot;;</p>
  <p>你也可以使用变量来保存从函数返回的值，例如。</p>
  <p class="code">var _id = instance_nearest(x, y, obj_Tree);<br> root = sqrt(1000);<br> global.str = string_upper(&quot;Hello World&quot;) 。</p>
  <p>因此，变量是一种我们可以命名的东西，用来存储一个值，以便以后在一个或多个操作中使用。变量的一个很好的 &quot;现实世界 &quot;的例子是π𝜋......<b>这是 </b>一个大家都知道的变量，它保存着3.14159265（等等）的值。
    为什么我们的语言里有这个变量？嗯，对别人说 &quot;π &quot;比说 &quot;三点一四一五九二六五 &quot;要容易得多!像这样的命名使生活变得简单了许多，这也意味着如果该变量的值发生了变化
    变量的值发生变化时，我们不必到处改变数字，因为变量的名称仍然<i>是</i>一样的。</p>
  <p>中形成变量时 <b><span class="notranslate">GML</span></b>中，它必须有一个以字母或下划线符号&quot;_&quot;开头的名称，并且只能包含字母、数字和下划线符号&quot;_&quot;，最大长度为64个符号。因此，有效的变量
    是像<tt>fish</tt>、<tt>foo_bar</tt>、<tt>num1</tt>或<tt>_str</tt>这样的东西，而无效的变量则是<tt>6fish</tt>、<tt>foo bar</tt>或<tt>*num</tt>。</p>
  <p>现在，在许多编程语言中，你需要在使用变量之前创建一个 &quot;赋值&quot;。这基本上意味着你要告诉计算机你希望用于该变量的名称，并给它分配一个初始值。该变量被
    然后在内存中给出一个位置来存储该值或对其进行操作。分配变量的形式为：。</p>
  <p class="code">&lt;变量&gt;=&lt;表达式&gt;。</p>
  <p>一个表达式可以是一个简单的值，但也可以更复杂，因此，与其说是给变量赋值，还不如说是用 <span class="inline"><b>+=</b></span> ，给变量的当前值添加一个值，比如说。</p>
  <p class="code">a = 100; // 分配一个简单的值<br> b = 200;<br> c = 300;<br> a += b; // 用操作分配<br> a = b + c; // 用表达式分配</p>
  <p class="note"><b>注意</b>：<span class="notranslate">GameMaker语言</span>也会接受&quot;<span class="inline">:=</span>&quot;的任务，尽管这通常不是最常见的方式。</p>
  <p class="code">&lt;变量&gt; := &lt;表达式&gt;。</p>
  <p>同样，你可以使用 <span class="inline"><b>-=</b></span> 进行减法，使用 <span class="inline"><b>*=</b></span> 进行乘法，使用 <span class="inline"><b>/=</b></span> 进行除法，或者使用 <span class="inline"><b>|=</b></span> 进行位运算。
    <span class="inline"><b>&amp;=</b></span> , 或 <span class="inline"><b>^=</b></span> 。你也可以使用 <span class="inline"><b>++</b></span>, <span class="inline"><b>--</b></span> 从一个值中加或<i>减一</i>。更多信息见
   <a href="Expressions_And_Operators.htm">表达式和运算符</a>部分。</p>
  <p>请注意，你<i>不能</i>做以下事情（或任何变化）。</p>
  <p class="code">a = b = c = 4;</p>
  <p>而应该是这样做的。</p>
  <p class="code">a=4；<br> b=4；<br> c=4。</p>
  <p>上面显示的变量分配都是<strong>实例 </strong>变量，但是当你用<span class="notranslate">GameMaker Studio 2</span>编程时，实际上还有三个主要的变量类别，每个都有自己的<strong>范围 </strong>（可以认为是
    作为它的操作区域，或者说范围）。)不同种类的变量和它们的范围在下面几页中都有概述。</p>
  <ul class="colour">
    <li><a href="Variables/Local_Variables.htm">本地变量</a></li>
    <li><a href="Variables/Instance_Variables.htm">实例变量</a></li>
    <li><a href="Variables/Global_Variables.htm">全局变量</a></li>
    <li><a href="Variables/Constants.htm">常数</a></li>
  </ul>
  <p> <span class="notranslate">GameMaker语言</span>也有多个不同的内置变量，它们可以有上述任何范围（除了<i>局部</i>）。这些变量很特别，因为它们被默认为游戏世界中的对象和房间的一部分。
    世界。一些内置的全局变量被列在上述章节中，手册中关于精灵、房间、物体等的不同部分也概述了每种情况下可用的内置变量。这些内置实例变量的例子有
    变量的例子是。</p>
  <p class="code"><tt><a href="../GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_index.htm">精灵的指数（sprite_index</a></tt><br>
    <a href="../GML_Reference/Asset_Management/Paths/Path_Variables/path_index.htm"><tt>路径_刻度</tt></a><br>
    <a href="../GML_Reference/Asset_Management/Instances/Instance_Variables/speed.htm"><tt>速度</tt></a></p>
  <p>而内置全局变量的例子是：。</p>
  <p class="code"><a href="../GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_xport.htm"><tt>查看_出口</tt></a><br>
    <a href="../GML_Reference/OS_And_Compiler/GM_version.htm"><tt>GM_version</tt></a><br>
    <a href="../GML_Reference/Asset_Management/Rooms/room.htm"><tt>房间</tt></a></p>
  <p>大多数内置变量可以像其他变量一样被改变和设置，有些甚至可以是<a href="Arrays.htm">数组</a>，只是你不需要像创建普通变量那样设置它们，因为它们已经被初始化为一个
    默认值。</p>
  <p>最后，有一些专门用于设置、获取或以某种方式检查变量的函数，可从以下页面获得。</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">变量函数</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="GML_Overview.htm"><span class="notranslate">GML</span>概述</a></div>
        <div style="float:right">下一步。<a href="Arrays.htm">数组</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
variables
variables - built-in
variables - scope
declaring variables
scope
built-in variables
-->
  <!-- TAGS
variables
-->
</body>
</html>