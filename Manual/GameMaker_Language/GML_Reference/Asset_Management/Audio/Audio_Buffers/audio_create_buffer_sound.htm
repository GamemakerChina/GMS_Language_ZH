<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>音频_创建_缓冲区_声音</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function audio_create_buffer_sound" />
  <meta name="rh-index-keywords" content="audio_create_buffer_sound" />
  <meta name="search-keywords" content="audio_create_buffer_sound,audio_mono,audio_stereo,audio_3D" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>音频_创建_缓冲区_声音</h1>
  <p>用这个函数，你可以从一个缓冲区的内容创建一个新的声音。缓冲区之前已经被创建过了（关于如何创建，请看<a href="../../../Buffers/Buffers.htm">缓冲区函数</a>），并且有数据被添加或加载到其中。
    加载到它里面。然后，你把数据格式（目前只支持<tt>buffer_u8</tt>或<tt>buffer_s16</tt>）、采样率（可以是1000hz和48000hz之间）和缓冲区的偏移量传给这个函数，以获取数据。
    的偏移量。你还需要提供缓冲区内的样本数和声音所需的通道。这些通道是由以下常数之一定义的。</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>恒定</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="inline">audio_mono</span></td>
        <td>单声道（单通道）音频。</td>
      </tr>
      <tr>
        <td><span class="inline">audio_stereo</span></td>
        <td>立体声（双通道）音频。</td>
      </tr>
      <tr>
        <td><span class="inline">audio_3D</span></td>
        <td>3D（5.1）音频。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>注意，在你创建了一个声音后，当不再需要它时，你应该使用函数释放与之相关的指针索引 <a href="audio_free_buffer_sound.htm"><tt>audio_free_buffer_sound()</tt></a>.如果你没有这样做，并且
    然后重新分配变量或改变房间等......声音ID将丢失，你将有一个内存泄漏。还要注意的是，如果任何声音已经被创建，而声音还没有被释放出来，你就不能删除缓冲区。所以你要
    首先释放声音（或声音），<i>然后</i>删除缓冲区。还值得注意的是，在缓冲区内添加任何东西，或改变缓冲区的大小，在它被创建了一个声音后，会产生意想不到的结果，不建议这样做。
    - 一旦你开始从任何缓冲区创建声音，你就不应该再以任何其他方式操作它了。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">audio_create_buffer_sound(bufferId, bufferFormat, bufferRate, bufferOffset, bufferLength, bufferChannels) 。</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>bufferId</td>
        <td>要使用的缓冲区的ID。</td>
      </tr>
      <tr>
        <td>缓冲区格式</td>
        <td>缓冲区内数据的格式<tt>（buffer_u8</tt>或<tt>buffer_s16</tt>）。</td>
      </tr>
      <tr>
        <td>缓冲率</td>
        <td>缓冲区内数据的采样率。</td>
      </tr>
      <tr>
        <td>缓冲区的位置</td>
        <td>从缓冲区中读取样本数据的偏移量（单位：字节）。</td>
      </tr>
      <tr>
        <td>缓冲区长度</td>
        <td>缓冲区的长度（音频数据的字节数，不包括标题）。</td>
      </tr>
      <tr>
        <td>缓冲通道</td>
        <td>从下面列出的常数之一中使用的通道。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code">整数(声音ID)</p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var rate = 44100;<br> var hertz = irandom_range(220, 880);<br> var samples = 44100;<br> var bufferId = buffer_create(rate, buffer_fast, 1);<br> var buffer_seek(bufferId, buffer_seek_start, 0);<br> var num_to_write = rate / hertz;<br> var length
    = buffer_get_size(bufferId) ;<br> var val_to_write = 1;<br> for (var i = 0; i &lt; (samples / num_to_write) + 1; i++;)<br> {
    <br> for (var j = 0; j &lt; num_to_write; j++;)<br> {
    <br> buffer_write(bufferId, buffer_u8, val_to_write * 255);<br> }
    <br> val_to_write = (1 - val_to_write);<br> }
    <br> soundId = audio_create_buffer_sound(bufferId, buffer_u8, rate, 0, length, audio_stereo) 。</p>
  <p>上面创建了一个缓冲区，然后程序性地用数据填满它。这些数据然后被用来创建一个新的声音，它被存储在变量 &quot;soundId &quot;中。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="../Audio.htm">音频缓冲器</a></div>
        <div style="float:right">下一页:<a href="audio_free_buffer_sound.htm">audio_free_buffer_sound</a></div>
        <div style="float:right"> </div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
audio_create_buffer_sound
audio_mono
audio_stereo
audio_3D
-->
  <!-- TAGS
audio_create_buffer_sound
-->
</body>
</html>