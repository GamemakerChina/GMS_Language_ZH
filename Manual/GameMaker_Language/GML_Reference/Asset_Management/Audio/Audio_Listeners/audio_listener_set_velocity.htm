<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>音频听众设置速度</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function audio_listener_set_velocity" />
  <meta name="rh-index-keywords" content="audio_listener_set_velocity" />
  <meta name="search-keywords" content="audio_listener_set_velocity" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>音频听众设置速度</h1>
  <p>这个函数可以用来给给定的听众提供<em>多普勒 </em>效应，并根据从给定的相对x、y和z位置解析的矢量来模拟音频运动。默认监听器的索引是0，但你可以使用函数
    <a href="audio_get_listener_info.htm"><tt>audio_get_listener_info()</tt></a>来获得目标平台的不同指数。</p>
  <p>如果给定的监听器永远不会移动，或者运动不是一个恒定的运动，你通常不需要设置这些值，但是，例如，如果你正在制作一个滚动游戏，玩家有一个恒定的从下到上的运动，并且
    敌人有一个从上到下的恒定运动，你可以将监听器<i>和</i>发射器的速度（对于发射器你可以用 <a href="../Audio_Emitters/audio_emitter_velocity.htm"><tt>audio_emitter_velocity()</tt></a>)到适当的矢量
    来模拟正确的多普勒效应，因为它们从玩家的实例上移动过去。</p>
  <p>下面的图片显示了如何为上面给出的游戏实例进行设置。</p>
  <p><img alt="Audio Listener Set Velocity Example" class="center" src="../../../../../assets/Images/Scripting_Reference/GML/Reference/Audio/Audio_Listener_Velocity.png" /></p>
  <h4>语法。</h4>
  <p class="code">audio_listener_set_velocity(index, x, y, z)。</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>指数</td>
        <td>获取数据的听众（默认为0）。</td>
      </tr>
      <tr>
        <td>x</td>
        <td>听众的X速度（默认为0）。</td>
      </tr>
      <tr>
        <td>y</td>
        <td>听众的y速度（默认为0）。</td>
      </tr>
      <tr>
        <td>z</td>
        <td>听众的Z轴速度（默认为0）。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code">不适用</p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var num = audio_get_listener_count();<br> for(var i = 0; i &lt; num; ++i;)<br> {
    <br> var info = audio_get_listener_info(i);<br> var data = audio_listener_get_data(info[? &quot;index&quot;]);<br> if data[? &quot;vx&quot;] != 0<br> {
    <br> audio_listener_set_velocity(info[? &quot;index&quot;], 0, 0, 0);<br> }
    <br> ds_map_destroy(info)。
    <br> ds_map_destroy(data)。
    <br> }
  </p>
  <p>上面的代码检查可用的听众数量，然后在它们之间循环，如果它们的X速度不是0，就将它们的速度值设置为0, 0, 0。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Audio_Listeners.htm">音频收听者</a></div>
        <div style="float:right">下一页:<a href="audio_listener_set_orientation.htm">音频听众设置方向</a></div>
        <div style="float:right"> </div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
audio_listener_set_velocity
-->
  <!-- TAGS
audio_listener_set_velocity
-->
</body>
</html>