<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>序列</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different functions and variables associated with Sequences" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Sequences" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>序列</h1>
  <p>序列通常是在IDE中使用<a href="../../../../The_Asset_Editors/Sequences.htm">序列编辑器</a>创建的，但也可以使用代码创建和编辑。然而，在查看可用的功能之前，重要的是
    了解<span class="notranslate">GameMaker</span>中定义序列的方式以及将要使用的不同术语。</p>
  <p>首先，在最高层，你有一个<b>序列元素</b>。这是你放置在房间的一个层上的东西，可以通过房间编辑器或在代码中使用适当的<a href="../Rooms/Sequence_Layers/Sequence_Layers.htm">层函数</a>。
    除了一个元素ID值外，层元素没有其他真正的属性，但这个ID是使用上述的层函数来改变序列播放或访问序列数据所必需的。</p>
  <p>接下来你有<b>序列对象</b>和<b>序列实例</b>，就像你有一般对象和实例一样。序列<i>对象</i>是你在<b>资产浏览器</b>中创建的基本资源，或者使用函数 <a href="sequence_create.htm"><tt>sequence_create()</tt></a>,
    而序列<i>实例</i>是该序列对象的 &quot;副本&quot;，它作为一个元素被放置在一个房间的一个图层中。把序列对象看作是蓝图，把序列实例看作是由这些蓝图创建的。序列
    对象和实例都是<a href="../../../GML_Overview/Structs.htm">结构</a>，与普通对象不同，一个序列对象的结构可以在<span class="notranslate">运行时</span>被编辑，当你把它们创建为元素时，这将影响到该序列的所有其他实例。
    对序列对象所做的任何编辑都<b>不会</b>因为使用<tt>room_restart()</tt>或<tt>game_restart(</tt>)函数重新启动游戏或房间而被重置）。序列实例结构包含一些参数来控制播放
    和事情（这将在下面详细解释），以及<b>序列数据结构</b>。</p>
  <p>最后，如上所述，你有<b>序列数据</b>，这是另一个结构。这个结构包含了关于序列的<i>所有</i>数据。它包含的轨道、这些轨道的属性、播放速度等等。该结构内容的具体
    该结构内容的具体细节如下，但基本上包括<b>资产轨道</b>结构和<b>参数轨道</b>结构，这些结构在序列播放时使用<b><span class="notranslate">关键帧</span></b>数据来实际执行操作。</p>
  <p>序列元素是用房间<a href="../Rooms/Sequence_Layers/Sequence_Layers.htm">层函数</a>处理的，但对于序列对象、实例和数据，我们有以下函数。</p>
  <p> </p>
  <ul class="colour">
    <li><a href="sequence_exists.htm">序列_存在</a></li>
    <li><a href="sequence_create.htm">序列_创建</a></li>
    <li><a href="sequence_destroy.htm">序列_销毁</a></li>
    <li><a href="sequence_get.htm">序列_获取</a></li>
    <li><a href="sequence_track_new.htm">序列_轨道_新</a></li>
    <li><a href="sequence_keyframe_new.htm">序列_<span class="notranslate">关键帧</span>_新</a></li>
    <li><a href="sequence_keyframedata_new.htm">序列_<span class="notranslate">关键帧</span>数据_新</a></li>
    <li><a href="sequence_get_objects.htm">序列_获取对象</a></li>
    <li><a href="sequence_instance_override_object.htm">序列_实例_覆盖_对象</a></li>
  </ul>
  <p> </p>
  <p>还有一个与实例相关的<strong>内置变量</strong>，可以用来确定实例是否在一个序列中被使用过。</p>
  <p> </p>
  <ul class="colour">
    <li><a href="in_sequence.htm">in_sequence</a></li>
  </ul>
  <p class="note"><strong>重要的是!</strong>如果你的序列中有任何实例，这些实例不应该改变其<span class="inline"><span style="font-size:14px;">image_xscale</span> /<span class="inline"><span style="font-size:14px;">image_yscale</span> /
    <span class="inline"><span style="font-size:14px;">图像_角度</span></span>/<span class="inline"><span style="font-size:14px;">x</span> /<span class="inline"><span style="font-size:14px;">y</span> 变量，因为当序列开始播放后，它们会被覆盖。
      开始播放后的每一步更新时，它们将被覆盖。</p>
  <p> </p>
  <p>在使用这些函数创建或编辑序列之前，我们建议你阅读下面对结构属性的详细描述。关于如何创建一个新的序列的一般概述是：。</p>
  <ul class="colour">
    <li>使用函数创建新的序列对象 <a href="sequence_create.htm"><tt>seqeunce_create()</tt></a>创建新的序列对象，并将序列对象的索引存储在一个变量中。这个索引使你能够访问序列对象的结构。</li>
  </ul>
  <p class="code">myseq = sequence_create()。</p>
  <ul class="colour">
    <li>设置序列对象的顶级值，如长度、播放模式、播放速度等。比如说</li>
  </ul>
  <p class="code">myseq.length = 120;<br> myseq.loopmode = seqplay_pingpong</p>
  <ul class="colour">
    <li>在向序列对象添加轨道之前，你需要创建它们，所以你现在要创建一个<i>资产</i>轨道数组，该数组已经用函数定义了 <a href="sequence_track_new.htm"><tt>sequence_track_new()</tt></a>.请注意，在代码中
      在代码中，资产轨道和参数轨道之间其实没有什么区别--它们都是简单的轨道，它们的行为方式取决于你创建的轨道类型，以及它们是否被分配为顶级轨道的子轨道。
      因此，你可以为一个资产创建一个轨道，然后为不同的参数分配子轨道，这些子轨道将作为该资产的<i>参数</i>轨道。下面的例子创建了一个单一的图形资产轨道，它将被添加到序列中。
      稍后将被添加到序列中。</li>
  </ul>
  <p class="code">var mytracks = array_create(1);<br> mytracks[0] = sequence_track_new（seqtracktype_graphic）。</p>
  <ul class="colour">
    <li>每个资产轨道都需要有一些数据来告诉序列它的外观，或者它的位置，等等......这是以下列形式添加的 <i><span class="notranslate">关键帧</span></i>.在资产轨道的顶层，你可以为各种事物设置<span class="notranslate">关键帧</span>（列在下面的轨道结构部分）。
      部分），但请注意，由于这些是资产轨迹的<span class="notranslate">关键帧</span>，它们不会被插值，而只是在达到指定帧时改变它们所指的值。每个<span class="notranslate">关键帧</span>都是一个结构，被添加到一个数组中。
      然后将这个数组分配给资产轨道。要创建<span class="notranslate">关键帧</span>结构，我们将调用函数 <a href="sequence_keyframe_new.htm"><tt>sequence_<span class="notranslate">keyframe</span>_new()</tt></a>并将所需数据填充到<span class="notranslate">关键帧</span>中，我们将使用
      该函数 <a href="sequence_keyframedata_new.htm"><tt>sequence_<span class="notranslate">keyframedata</span>_new()</tt></a>:</li>
  </ul>
  <p class="code"><br> var graphickeys = array_create(1);<br> graphickeys[0] = sequence_<span class="notranslate">keyframe</span>_new(seqtracktype_graphic);<br> // Set the graphics
    <br> graphickeys[0].frame = 0;<br> graphickeys[0].length = 1;<br> graphickeys[0].stretch = true;<br> graphickeys[0].disabled = false;<br> // 创建通道数据，这些数据将进入这个<span class="notranslate">关键帧</span>。
    进入这个<span class="notranslate">关键帧</span>（同样是一个数组，因为每个键可以有多个通道的<span class="notranslate">关键帧</span>数据）<br> var graphickeydata = array_create(1);<br> graphickeydata[0] = sequence_<span class="notranslate">keyframedata</span>_new(seqtracktype_graphic);<br> graphickeydata[0].spriteIndex
    = spr_Platform;<br> graphickeydata[0].channel = 0;<br> // 将<span class="notranslate">关键帧</span>数据通道添加到图形轨道<span class="notranslate">关键帧</span><br> graphickeys[0].channel = graphickeydata;<br> // 将定义的<span class="notranslate">关键帧</span>添加到轨道<br> mytracks[0].name = &quot;TestGraphicTrack&quot;;<br> mytracks[0].keyframes<span class="notranslate">= graphickeys</span>;</p>
  <ul class="colour">
    <li>我们现在需要创建一个参数轨道，并将其作为子轨道分配给我们刚刚创建的图形轨道。这将以类似于上文所示的方式完成，只是现在我们需要给轨道起一个显示其用途的名字，在本例中为
      &quot;位置&quot;，因为我们将使用这个轨道来在序列动画帧的过程中移动图形轨道。</li>
  </ul>
  <p class="code">//为图形的位置创建一个新的参数轨道结构<br> var paramtracks = array_create(1);<br> paramtracks[0] = sequence_track_new(seqtracktype_real);<br> paramtracks[0] .name = &quot;position&quot;;<br> paramtracks[0] .interpolation
    = true;<br> // 创建<span class="notranslate">关键帧</span>结构以保存参数通道数据，并为<span class="notranslate">关键帧</span>设置帧位置<br> var paramkeys = array_create(2);<br> paramkeys[0] = sequence_<span class="notranslate">keyframe</span>_new(seqtracktype_real);<br> paramkeys[0] .frame =
    0;<br> paramkeys[1] = sequence_<span class="notranslate">keyframe</span>_new(seqtracktype_real);<br> paramkeys[1].frame = 120;<br> // 创建<span class="notranslate">关键帧</span>数据结构<br> var paramkeydata1 = array_create(2);<br> paramkeydata1[0] = sequence_<span class="notranslate">keyframedata</span>_new(seqtracktype_real);<br> paramkeydata1[0] 。channel = 0; //通道0的位置轨道是X位置<br> paramkeydata1[0].value = 0;<br> paramkeydata1[1] = sequence_<span class="notranslate">keyframedata</span>_new(seqtracktype_real);<br> paramkeydata1[1].channel = 1; //通道1的位置
    轨道是Y位置<br> paramkeydata1[1].value = 0;<br> var paramkeydata2 = array_create(2);<br> paramkeydata2[0] = sequence_<span class="notranslate">keyframedata</span>_new(seqtracktype_real);<br> paramkeydata2[0] 。channel = 0;<br> paramkeydata2[0].value = room_width;<br> paramkeydata2[1] = sequence_<span class="notranslate">keyframedata</span>_new(seqtracktype_real);<br> paramkeydata2[1] 。channel = 1;<br> paramkeydata2[1].value = room_height;<br> // 将<span class="notranslate">关键帧</span>数据结构分配给每个键的通道<br> paramkeys[0].channels = paramkeydata1;<br> paramkeys[1].channels = paramkeydata2;<br> // 将键分配给参数轨道<br> paramtracks[0].<span class="notranslate">Keyframes</span>= paramkeys;</p>
  <ul class="colour">
    <li>完成这些后，最后要做的是将参数轨道作为子轨道分配给我们在开始时创建的主要图形资产轨道，然后将这些轨道分配给序列，然后我们可以在房间里创建一个实例。</li>
  </ul>
  <p class="code">mytracks[0].tracks = paramtracks;<br> myseq.tracks = mytracks;<br> layer_sequence_create(&quot;Assets_1&quot;, 0, 0, myseq);</p>
  <p>上面的指令创建了一个非常简单的序列对象，在<i>序列的</i>（0，0）位置画出一个精灵，然后循环移动到右下角再返回。如前所述，有许多地方你需要
    访问不同的结构来提供或获取关于序列的数据，下面的章节列出了这些结构所包含的所有不同属性。</p>
  <ul class="colour">
    <li><a name="object"></a><a href="Sequence_Structs/The_Sequence_Object_Struct.htm"><label for="1">序列对象结构</label></a></li>
    <li><a name="instance"></a><a href="Sequence_Structs/The_Sequence_Instance_Struct.htm"><label for="2">序列实例结构</label></a></li>
    <li><a name="track"></a><a href="Sequence_Structs/The_Track_Struct.htm"><label for="3">轨道结构</label></a></li>
    <li><a name="keyframe"></a><a href="Sequence_Structs/The_Keyframe_Struct.htm"><label for="4"> <span class="notranslate">关键帧</span>结构</label></a></li>
    <li><a name="keyframe_data"></a><a href="Sequence_Structs/The_Keyframe_Data_Struct.htm"><label for="5"> <span class="notranslate">关键帧</span>数据结构</label></a></li>
  </ul>
  <p> </p>
  <p>最后，可以在序列中添加代码，这些代码可以作为一个<strong>时刻</strong>的<strong>事件</strong>或作为一个<strong>广播信息</strong>被触发。这在下一页有充分的解释。</p>
  <ul class="colour">
    <li><a href="Sequence_Events_Moments_Broadcast.htm">事件、时刻和广播信息</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="../Asset_Management.htm">资产管理</a></div>
        <div style="float:right">下一步。<a href="../Fonts/Fonts.htm">字体</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Sequences
-->
  <!-- TAGS
sequence_functions
-->
</body>
</html>