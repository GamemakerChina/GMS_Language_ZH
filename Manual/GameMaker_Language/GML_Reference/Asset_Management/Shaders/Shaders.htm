<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Shaders</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Shaders相关的不同功能和变量" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Shaders,_YY_GLSLES_,_YY_GLSL_,_YY_HLSL11_,_YY_PSSL_" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> <span class="notranslate">Shaders</span></h1><p> <span class="notranslate">Shaders</span>是一种非常强大的工具，可用于控制<a class="glossterm" data-glossterm="呈现" href="#">图形卡将事物渲染</a>到屏幕上的方式。由于这些微小的程序实际上是在图形卡上运行的，因此这意味着它们的处理速度非常快，从而释放了宝贵的CPU周期，可用于更多游戏逻辑。</p><p>要创建<span class="notranslate">shader</span>您将需要使用“ <a href="../../../../The_Asset_Editors/Shaders.htm"><span class="notranslate">Shader</span>器编辑器”</a><b>同时编写“顶点<span class="notranslate">Shader</span></b>和“<b>片段<span class="notranslate">Shader</span></b> （也称为“<b>像素<span class="notranslate">Shader</span></b> ），即使（例如）您仅希望更改实例的顶点位置，绘制，或者如果您只想更改像素的颜色值，则仍需要<b>两个</b>程序才能使整个<span class="notranslate">shader</span>正常工作。</p><p class="note"><b>注</b>： <span class="notranslate">Shaders</span><b>不允许</b>你改变任何变量，你传递到他们的价值，所以这些将被称为<b><span class="notranslate">shader</span></b>的所有引用它们的文档中<b>的常量</b>。</p><p> <span class="notranslate">shaders</span>本身进行编程的可用GLSL ES函数和变量的完整概述，请参阅<a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/es_cm_spec_2.0.pdf" target="_blank">OpenGL ES着色语言（GLSL ES）参考页</a>。以下链接也很有用，因为它包含一些OpenGL ES API的快速参考卡（请注意，仅显示的最后两张卡适用于<span class="notranslate">GameMaker Studio 2</span> ）： <a href="https://www.khronos.org/opengles/sdk/docs/reference_cards/OpenGL-ES-2_0-Reference-card.pdf">OpenGL ES参考卡</a>。</p><p>在项目中使用<span class="notranslate">shader</span>非常简单，只需几行代码即可从中获得最基本的使用：</p><p class="code">shader_set(myShader);<br/> draw_self();
    <br/> shader_reset();
  </p><p>如您所见，它们以相似的方式用于混合模式和曲面，您首先选择（设置） <span class="notranslate">shader</span> ，绘制要使用的着色器，然后再次重置绘制目标。如果希望通过<span class="notranslate">shader</span>而不是单个精灵或背景渲染全屏，则需要设置一个曲面以捕获当前视图，然后将其传递给<span class="notranslate">shader</span> （有关更多信息，请参见“<a href="../../Drawing/Surfaces/Surfaces.htm">曲面”）。</a> 。</p><p class="note"><b>注意</b>： <span class="notranslate">Shaders</span> ，与任何与绘图相关的内容一样，<b>只能在draw事件中使用</b>。还值得注意的是，如果您尝试在<span class="notranslate">shader</span>使用颜色值并且对象没有纹理，则结果将变成黑色。</p><p>如果<span class="notranslate">shader</span>具有输入值，则使用<i>统一</i>功能进行设置。首先，您需要<i>使用函数来获取制服手柄</i>（实际上是要设置的制服的ID值）<a href="shader_get_uniform.htm"><tt>shader_get_uniform()</tt></a>在使用<span class="notranslate">shader</span><b>实例的Create Event</b>中，然后将这些句柄存储在变量中，如下所示：</p><p class="code">colour_to_find = shader_get_uniform(sShaderDemo5, &quot;f_Colour1&quot;);<br/> colour_to_set = shader_get_uniform(sShaderDemo5, &quot;f_Colour2&quot;);</p><p>一旦有了统一的手柄，就可以<b>在Draw事件</b><span class="notranslate">shader</span>代码中设置它们，如下所示：</p><p class="code">shader_set(sShaderDemo5);<br/> shader_set_uniform_f(colour_to_find, 1,1,1 );<br/> shader_set_uniform_f(colour_to_set, 1,0,0 );<br/> draw_sprite(sprite_index,image_index,x+24, y);<br/> shader_reset();
  </p><p>最后要注意的一点是，尽管<span class="notranslate">shaders</span>已在所有平台上接受，但是它们仍然是特定于设备的，并且如果设备的硬件或软件无法使用<span class="notranslate">shaders</span>那么您将得到一个错误。因此，建议您在设置制服或使用<span class="notranslate">shader</span> <span class="notranslate">shader</span>是否已编译，如下所示：</p><p class="code">if (shader_is_compiled(myShader))<br/>     {
    <br/>     shader_set(myShader);
    <br/>     draw_self();
    <br/>     shader_reset();
    <br/>     }
    <br/> else show_debug_message(&quot;Shader failed&quot;);</p><p>作为额外的检查，您还可以调用该函数 <a href="shaders_are_supported.htm"><tt>shaders_are_supported()</tt></a>查看硬件是否甚至支持<span class="notranslate">shaders</span> 。通常，您会在游戏开始时进行这些检查，并将结果存储为<a
      href="../../../<span class="notranslate">GML _Overview / Variables / Global_Variables.htm“&gt;全局变量，</a>以供日后检查。</p><p>需要特别注意的是， <span class="notranslate">GameMaker Studio 2</span>还支持某些条件编译<b>宏</b>，可以在GLSL ES <span class="notranslate">shaders</span>使用它们，以便它们可以在特定的受支持平台上执行替代代码。下表中显示了宏以及将在其上生成的平台：</p><p></p><table><tbody><tr><th> <span class="notranslate">Shader</span>宏</th><th>价值</th><th>目标平台</th></tr><tr><td>_YY_GLSLES_</td><td> 1个</td><td>所有目标平台</td></tr><tr><td>_YY_GLSL_</td><td> 2</td><td> Mac和<span class="notranslate">Ubuntu</span> （ <span class="notranslate">Linux</span> ）</td></tr><tr><td> _YY_HLSL11_</td><td> 3</td><td> <span class="notranslate">Windows</span> ，UWP，XboxOne</td></tr><tr><td> _YY_PSSL_</td><td> 4</td><td> PS4</td></tr></tbody></table><p></p><p>当您<span class="notranslate">shader</span>在列出的任何平台上<span class="notranslate">GameMaker Studio 2</span>项目时，将生成上述宏<i>之一</i><span class="notranslate">shader</span>代码中使用该宏，如下所示：</p><p class="code">#ifdef _YY_HLSL11_<br/> // HLSL shader code here<br/> #else
    <br/> // GLSL shader code here<br/> #endif
  </p><p>如果您不<span class="notranslate">shaders</span> <span class="notranslate">GameMaker Studio 2</span>来创建和使用着色器的更完整的指南，请参阅手册的以下页面：</p><ul class="colour"><li> <a href="../../../../Additional_Information/Guide_To_Using_Shaders.htm"><span class="notranslate">Shaders</span>使用指南</a></li></ul><p></p><p>以下功能可用于绘制和设置<span class="notranslate">shaders</span> ：</p><p></p><ul class="colour"><li> <a href="shader_get_name.htm"><span class="notranslate">shader</span> _get_name</a></li><li> <a href="shader_get_uniform.htm"><span class="notranslate">shader</span> _get_uniform</a></li><li> <a href="shader_get_sampler_index.htm"><span class="notranslate">shader</span> _get_sampler_index</a></li><li> <a href="shader_set.htm"><span class="notranslate">shader</span></a></li><li> <a href="shader_set_uniform_f.htm"><span class="notranslate">shader</span> _set_uniform_f</a></li><li> <a href="shader_set_uniform_f_array.htm"><span class="notranslate">shader</span> _set_uniform_f_array</a></li><li> <a href="shader_set_uniform_i.htm"><span class="notranslate">shader</span> _set_uniform_i</a></li><li> <a href="shader_set_uniform_i_array.htm"><span class="notranslate">shader</span> _set_uniform_i_array</a></li><li> <a href="shader_set_uniform_matrix.htm"><span class="notranslate">shader</span> _set_uniform_matrix</a></li><li> <a href="shader_set_uniform_matrix_array.htm"><span class="notranslate">shader</span> _set_uniform_matrix_array</a></li><li> <a href="shader_reset.htm"><span class="notranslate">shader</span> _reset</a></li><li> <a href="shader_is_compiled.htm"><span class="notranslate">shader</span> _is_compiled</a></li><li> <a href="shaders_are_supported.htm"><span class="notranslate">shaders</span></a></li><li> <a href="shader_current.htm"><span class="notranslate">shader</span> _current</a></li></ul><p></p><p>我们还有一个特殊的功能，可以为所有<span class="notranslate">shaders</span>定义一个全局状态：</p><ul><li> <a href="shader_enable_corner_id.htm"><span class="notranslate">shader</span> _enable_corner_id</a></li></ul><p></p><p> <span class="notranslate">shaders</span>器中使用纹理采样器时，您将需要有关正在使用的纹理的信息，在这种情况下，可以使用以下功能： </p><p></p><ul class="colour"><li><a href="../Sprites/Sprite_Information/sprite_get_texture.htm">sprite_get_texture</a></li><li><a href="../Sprites/Sprite_Information/sprite_get_uvs.htm">sprite_get_uvs</a></li><li><a href="../Fonts/font_get_texture.htm">font_get_texture</a></li><li><a href="../Fonts/font_get_uvs.htm">font_get_uvs</a></li><li><a href="../../Drawing/Textures/texture_get_width.htm">texture_get_width</a></li><li><a href="../../Drawing/Textures/texture_get_height.htm">texture_get_height</a></li><li><a href="../../Drawing/Textures/texture_get_texel_width.htm">texture_get_texel_width</a></li><li><a href="../../Drawing/Textures/texture_get_texel_height.htm">texture_get_texel_height</a></li><li><a href="../../Drawing/Textures/texture_set_stage.htm">texture_set_stage</a></li><li><a href="../../Drawing/GPU_Control/gpu_set_texfilter_ext.htm">gpu_set_texfilter_ext</a></li><li><a href="../../Drawing/GPU_Control/gpu_set_texrepeat.htm">gpu_set_texrepeat</a></li></ul><p></p><p>尽管本手册将<b>不</b>涵盖任何Open GL <span class="notranslate">shader</span>功能和变量，但确实包含<span class="notranslate">GameMaker Studio 2</span>特有的功能列表。 <span class="notranslate">shaders</span>的Open GL规范的一部分，提供这些常数是为了简化您的项目中<span class="notranslate">shaders</span></p><ul class="colour"><li> <a href="Shader_Constants.htm"><span class="notranslate">Shader</span>常数</a></li></ul><p></p><p>最后， <span class="notranslate">GameMaker Studio 2</span>允许您定义自己的<b>顶点格式</b>，从中可以创建自己的自定义基元。这可以大大加快<span class="notranslate">shader</span>操作速度，也可以用于扩展其功能并产生令人惊讶的效果。您可以在以下各节中找到有关此信息：</p><ul class="colour"><li><a href="../../Drawing/Primitives/Primitives_And_Vertex_Formats.htm">基本体和顶点格式</a></li></ul><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">返回：<a href="../Asset_Management.htm">资产管理</a></div><div style="float:right">下一页：<a href="../Sequences/Sequences.htm">序列</a></div></div></div><h5><span data-keyref="Copyright Notice">©版权所有<span class="notranslate">YoYo Games Ltd.</span> 2021保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Shaders
_YY_GLSLES_
_YY_GLSL_
_YY_HLSL11_
_YY_PSSL_
-->
  <!-- TAGS
shader_functions
-->
</body>
</html>