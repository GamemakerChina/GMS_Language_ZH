<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>sprite_create_from_surface</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="解释函数sprite_create_from_surface的页面" />
  <meta name="rh-index-keywords" content="sprite_create_from_surface" />
  <meta name="search-keywords" content="sprite_create_from_surface" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>sprite_create_from_surface</h1><p>使用此功能，您可以从先前初始化的曲面创建精灵（使用以下命令创建曲面时会返回曲面索引ID值）<a href="../../../Drawing/Surfaces/surface_create.htm"><tt>surface_create()</tt></a> ）。然后在函数中输入的x和y坐标应相对于<i>曲面</i>的（0,0）位置（左上角），而不是相对于游戏窗口（如果有一个活动窗口，则相对于视图）。 width和height参数以像素为单位，定义要使用的表面部分的宽度和高度。</p><p>将“ removeback”参数设置为 <tt>true</tt><i>通过检查子画面左下方的</i>像素中的颜色，然后使用该颜色作为要去除的颜色，从子画面中删除颜色。</p><p>如果选择“删除”选项，则可能还希望<span class="notranslate">GameMaker Studio 2</span>通过将“ smooth”参数设置为来使子画面的边缘平滑。<tt>true</tt> 。所有这些操作是在除去背景后，在精灵的边缘周围创建一个半透明的边框。</p><p>最后，您还可以指定子画面<i>的x和y原点。</i>这是将子画面“固定”到使用它的实例的位置，并且始终相对于一个子画面子图像的0,0左上角进行计算。因此，例如，将这些值设置为（16,16）的32 x 32像素的精灵将以其原点为中心。</p><p>默认情况下，所有新的精灵都会自动计算其边界框（确切的bbox取决于该精灵的大小和透明度），但是您可能希望对其进行自定义，在这种情况下，您还应该使用函数 <a href="sprite_collision_mask.htm"><tt>sprite_collision_mask()</tt></a>。</p><p class="note"><b>注意：</b> <span class="notranslate">GameMaker Studio 2</span>创建子画面时，必须记住再次将其删除（使用 <a href="sprite_delete.htm"><tt>sprite_delete()</tt></a>），当不再需要时，否则存在内存泄漏的风险，这会减慢速度并最终导致游戏崩溃。</p><p></p><h4>句法：</h4><p class="code">sprite_create_from_surface(index, x, y, w, h, removeback, smooth, xorig, yorig);</p><table><tbody><tr><th>争论</th><th>描述</th></tr><tr><td><span class="notranslate">index</span></td><td>要创建的表面的索引。</td></tr><tr><td> <span class="notranslate">x</span></td><td>要复制的x位置。</td></tr><tr><td> <span class="notranslate">y</span></td><td>要复制的y位置。</td></tr><tr><td> <span class="notranslate">w</span></td><td>要复制区域的宽度（从x位置开始）。</td></tr><tr><td> <span class="notranslate">h</span></td><td>要复制区域的高度（从y位置开始）。</td></tr><tr><td> <span class="notranslate">removeback</span></td><td>指示是否使所有具有背景色（左下像素）的像素透明。</td></tr><tr><td> <span class="notranslate">smooth</span></td><td>指示是否平滑边缘。</td></tr><tr><td> <span class="notranslate">xorig</span></td><td>指示原点在精灵中的x位置。</td></tr><tr><td> <span class="notranslate">yorig</span></td><td>指示精灵中原点的y位置。</td></tr></tbody></table><p></p><h4>退货</h4><p class="code">Real (unique sprite ID value)</p><p></p><h4>例子：</h4><p class="code">var surf;<br/> surf = surface_create(32, 32);<br/> surface_set_target(surf);
    <br/> draw_clear_alpha(c_black, 0);<br/> draw_sprite(spr_Body, 0, 0, 0);<br/> draw_sprite(spr_Clothes, 0, 0, 0);<br/> draw_sprite(spr_Hair, 0, 0, 0);<br/> spr_custom = sprite_create_from_surface(surf, 0, 0, 32, 32, true, true, 16, 16);<br/> surface_reset_target();
    <br/> surface_free(surf);
  </p><p>上面的代码创建一个曲面并将其索引存储在局部变量“ surf”中。然后，它瞄准该表面，将其清除并在彼此顶部绘制几个精灵。最后，它在释放表面使用的内存之前，根据表面上绘制的合成图像创建一个新的精灵，并将其索引分配给“ spr_Custom”。 </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">背面：<a href="Sprite_Manipulation.htm">精灵操作</a></div><div style="float:right">下一个：<a href="sprite_add_from_surface.htm">sprite_add_from_surface</a></div></div></div><h5> <span data-keyref="Copyright Notice">©版权所有<span class="notranslate">YoYo Games Ltd.</span> 2021保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
sprite_create_from_surface
-->
  <!-- TAGS
sprite_create_from_surface
-->
</body>
</html>