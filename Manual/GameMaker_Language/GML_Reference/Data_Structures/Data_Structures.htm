<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>数据结构</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference section for Data Structures" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Data Structures" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>数据结构</h1>
  <p>在游戏中，你经常需要以精确和有序的方式存储信息。例如，你可能需要存储一个人携带的物品的清单，或者你可能想存储一个仍需访问的地方的网格。现在，你<i>可以</i>使用数组
    来实现，但如果你想做更复杂的操作，比如对数据进行排序或搜索某个特定的项目，你就需要编写大段的<span class="notranslate">GML</span>代码，这些代码执行起来很慢，难以调试，而且编写起来非常麻烦</p>
  <p>为了弥补这一点，<span class="notranslate">GameMaker Studio 2</span>有一些内置的<b>数据结构</b>，可以通过专业函数来访问。有六种不同类型的数据结构可用，每一种都有自己的好处，这取决于你要存储的信息类型和你希望以后如何操作它。
    信息，以及你希望以后如何操作它：堆栈、队列、列表、地图、优先队列和网格。</p>
  <p>从本质上讲，所有数据结构的工作方式都是一样的--你创建一个数据结构并将其<i>索引值</i>存储在一个变量中。然后在所有进一步的函数调用中使用该索引来引用该数据结构，这些函数可以对其执行操作
    的操作中使用这个索引。最后，一旦你完成了，你就再次销毁该数据结构，将其从内存中删除。你可以根据需要同时使用多个结构，而且所有结构都可以存储任何可用的<a href="../../GML_Overview/Data_Types.htm">数据类型</a>。</p>
  <p class="note"><b>注意： </b>与所有的动态资源一样，数据结构会占用内存，所以当不再需要时，应该<b>总是</b>销毁，以防止内存泄漏，这将减缓并最终使你的游戏崩溃。</p>
  <p class="note"><b>重要的是!</b>当你创建一个数据结构时，识别它的索引值是一个从0开始的整数。这意味着不同的数据结构可以有<b>相同的</b>索引值，所以如果有疑问，你应该在访问它们之前使用 <span style="font-size:1px;"><tt style="font-size: 14px">ds_exists</tt></span>    函数来访问它们。还要注意的是，索引是可以重复使用的，所以一个被破坏的数据结构的索引值可能会被之后新创建的数据结构所使用，我们建议你在破坏数据结构后将任何持有DS索引的变量设置为-1。
    数据结构后，我们建议您将任何持有DS索引的变量设置为-1。</p>
  <p>有关不同数据结构的信息可以在以下章节中找到。</p>
  <p> </p>
  <ul class="colour">
    <li><a href="DS_Grids/DS_Grids.htm">网格</a></li>
    <li><a href="DS_Lists/DS_Lists.htm">列表</a></li>
    <li><a href="DS_Maps/DS_Maps.htm">地图</a></li>
    <li><a href="DS_Priority_Queues/DS_Priority_Queues.htm">优先队列</a></li>
    <li><a href="DS_Queues/DS_Queues.htm">队列</a></li>
    <li><a href="DS_Stacks/DS_Stacks.htm">堆栈</a></li>
  </ul>
  <p> </p>
  <p>在你的游戏中使用数据结构之前，你还应该注意，在某些时候，由于四舍五入的错误，你可能会得到一个与你预期不同的结果。这可以通过改变DS的精度来解决，方法如下
    函数。</p>
  <p> </p>
  <ul class="colour">
    <li><a href="ds_set_precision.htm">ds_set_precision</a></li>
  </ul>
  <p> </p>
  <p>还有一个特殊的函数用于检查任何给定类型的数据结构是否存在。</p>
  <p> </p>
  <ul class="colour">
    <li><a href="ds_exists.htm">ds_exists</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="../GML_Reference.htm"><span class="notranslate">GML</span>参考</a></div>
        <div style="float:right">下一步。<a href="../Strings/Strings.htm">弦乐</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Data Structures
-->
  <!-- TAGS
data_structure_functions
-->
</body>
</html>