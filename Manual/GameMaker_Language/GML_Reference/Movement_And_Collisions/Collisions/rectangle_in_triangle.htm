<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>矩形_in_triangle</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that gives an overview of the funtion rectangle_in_triangle" />
  <meta name="rh-index-keywords" content="rectangle_in_triangle" />
  <meta name="search-keywords" content="rectangle_in_triangle" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>矩形_in_triangle</h1>
  <p>这个函数将检查你定义的一个矩形区域，看它是否没有发生碰撞，完全在目标边界内，或者如果它只是碰触到，一个定义的三角形区域。如果它们完全没有接触，该函数将
    返回0，如果源点完全在目的地范围内，它将返回1，如果它们只是重叠，它将返回2。下面的图片说明了这一点。</p>
  <p><img alt="Rectangle triangle collision example" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Movement_Collisions/rectangle_in_triangle.png" /></p>
  <h4>语法。</h4>
  <p class="code">rectangle_in_triangle(sx1, sy1, sx2, sy2, dx1, dy1, dx2, dy2, dx3, dy3)。</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>sx1</td>
        <td>源矩形左边的X坐标。</td>
      </tr>
      <tr>
        <td>sy1</td>
        <td>源矩形顶面的y坐标。</td>
      </tr>
      <tr>
        <td>sx2</td>
        <td>源矩形右侧的X坐标。</td>
      </tr>
      <tr>
        <td>sy2</td>
        <td>源矩形的底边的Y坐标。</td>
      </tr>
      <tr>
        <td>x1</td>
        <td>要检查的三角形的第一条边的x坐标。</td>
      </tr>
      <tr>
        <td>y1</td>
        <td>要检查的三角形的第一条边的y坐标。</td>
      </tr>
      <tr>
        <td>x2</td>
        <td>要检查的三角形第二边的x坐标。</td>
      </tr>
      <tr>
        <td>y2</td>
        <td>要检查的三角形第二边的y坐标。</td>
      </tr>
      <tr>
        <td>x3</td>
        <td>要检查的三角形第三边的x坐标。</td>
      </tr>
      <tr>
        <td>y3</td>
        <td>要检查的三角形第三边的y坐标。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code">真实的</p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var inst = instance_nearest(x, y, obj_Player);<br> if instance_exists(inst)<br> {
    <br> var x1 = x + lengthdir_x(100, image_angle - 45);<br> var y1 = y + lengthdir_y(100, image_angle - 45);<br> var x2 = x + lengthdir_x(100, image_angle + 45);<br> var y2 = y + lengthdir_y(100, image_angle + 45);<br> if rectangle_in_triangle(inst.bbox_left,
    inst.bbox_top, inst.bbox_right, inst.bbox_bottom, x, y, x1, y1, x2, y2) == 1<br> {
    <br> can_see = true;<br> }
    <br> }
  </p>
  <p>上面的代码使用<tt>rectangle_in_triangle</tt>函数作为一个 &quot;视锥 &quot;来检查 &quot;obj_player &quot;的实例。如果完整的边界框在给定的三角形区域内，它将设置一个变量为<tt>真</tt>。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Collisions.htm">碰撞</a></div>
        <div style="float:right">下一页:<a href="rectangle_in_circle.htm">矩形_在_圆</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
rectangle_in_triangle
-->
  <!-- TAGS
rectangle_in_triangle
-->
</body>
</html>