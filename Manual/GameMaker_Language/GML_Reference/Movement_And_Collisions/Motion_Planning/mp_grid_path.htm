<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>mp_grid_path</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="This page outlines the function mp_grid_path" />
  <meta name="rh-index-keywords" content="mp_grid_path" />
  <meta name="search-keywords" content="mp_grid_path" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>mp_grid_path</h1>
  <p>通过这个函数，你可以创建一个路径，使用你之前定义的<tt>mp_grid</tt>从起点导航到终点，避开任何已经被添加到grid中的障碍物。xstart和ystart参数
    表示房间坐标中路径的起点，而xgoal、ygoal参数表示目的地。你还可以选择只做水平/垂直运动，或者通过在allowdiag参数中指定true来允许完全的对角线运动。
    该函数返回true（成功找到路径）或false（失败），并设置所选路径。在下面的图片中，你可以看到这一切是如何运作的。</p>
  <p><img alt="MP Grid path example" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Movement_Collisions/mp_grid_path_image.png">正如你所看到的，&quot;管道 &quot;对象已经被添加到网格中，这意味着任何创建的
    路径都必须绕过它们。图中有两条路径，一条（绿色）是允许对角线的，另一条（红色）没有。两者之间的区别非常明显，绿色的路径看起来更加 &quot;优雅 &quot;和直接。
    和直接，但这完全取决于你要把它们用于哪种用途，你更喜欢哪一种。请注意，这个路径是独立于当前实例的--它是一个穿过网格的路径，而不是一个特定实例的路径，即使一个特定的实例
    可能有存储路径索引的变量。你可能还需要对这些路径进行调试，看看它们是如何产生的，并在游戏环境中进行交互，在这种情况下，你应该使用 <tt><a href="../../Drawing/Basic_Forms/draw_path.htm">draw_path()</a></tt>函数。</p>
  <p class="note"><b>注意</b>：该路径必须是以前创建的（无论是在代码中用 <span style="font-size:1px;"><a href="../../Asset_Management/Paths/Path_Manipulation/path_add.htm"><tt style="font-size: 14px">path_add()</tt></a></span>或作为一种资源）。)
    并将被这个函数生成的路径所取代。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">mp_grid_path(id, path, xstart, ystart, xgoal, ygoal, allowdiag)。</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>身份证</td>
        <td>将要使用的mp_grid的索引。</td>
      </tr>
      <tr>
        <td>路</td>
        <td>函数要使用的路径的索引</td>
      </tr>
      <tr>
        <td>x开始</td>
        <td>新路径的起始X坐标</td>
      </tr>
      <tr>
        <td>y 开始</td>
        <td>新路径的起始Y坐标</td>
      </tr>
      <tr>
        <td>xgoal</td>
        <td>完成新路径的X坐标</td>
      </tr>
      <tr>
        <td>宗旨</td>
        <td>完成新路径的y坐标</td>
      </tr>
      <tr>
        <td>允许检测</td>
        <td>表示是否允许对角线移动，而不是只允许水平或垂直移动。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code">布尔型</p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">global.grid = mp_grid_create(0, 0, room_width div 32, room_height div 32, 32, 32);<br> mp_grid_add_instances( global.grid, obj_wall, false);<br> with (obj_Enemy)<br> {
    <br> path = path_add();<br> if mp_grid_path(global.grid, path, x, y, obj_Player.x, obj_Player.y, 1)<br> {
    <br> path_start(path, 0, 3, 0);<br> }
    <br> }
  </p>
  <p>上面的代码创建了一个全局变量 &quot;global.grid&quot;，然后生成了一个mp_grid，并将其索引（id）分配给该变量，以便在所有进一步的mp_grid函数调用中使用。然后，它将 &quot;obj_Wall &quot;的所有实例添加到网格中，然后再
    获取所有 &quot;obj_Enemy &quot;的实例来创建一个路径，然后使用mp_grid_<tt>path来</tt>计算从他们的位置到 &quot;obj_Player &quot;的位置的路线。如果存在一条路线，那么这个物体就会沿着这条路开始自己的行动。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">回来了。<a href="Motion_Planning.htm">运动规划</a></div>
        <div style="float:right">下一页:<a href="mp_grid_add_cell.htm">mp_grid_add_cell</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
mp_grid_path
-->
  <!-- TAGS
mp_grid_path
-->
</body>
</html>