<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>物理学_夹具_绑定</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for physics_fixture_bind" />
  <meta name="rh-index-keywords" content="physics_fixture_bind" />
  <meta name="search-keywords" content="physics_fixture_bind" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>物理学_夹具_绑定</h1>
  <p>一旦我们定义了我们的灯具，它就必须被绑定到一个实例上。这意味着它的<i>属性</i>被转移到选定的实例上，而<b>不是实际的灯具本身</b>，所以一个灯具可以被绑定到多个实例上，如果所有的
    拥有相同的属性。你可以为目标指定一个对象索引，所有当时存在于房间里的实例都将收到该灯具的属性（但不包括后来创建的对象的任何新实例），或者你可以使用特殊的
    关键字<i>other</i>和<i>all</i>。你甚至可以指定一个父对象，所有与该父对象有关的子实例也将接受该灯具。一旦夹具被绑定到你需要的所有实例上，如果不再需要，它可以被删除。
    而具有该夹具属性的实例将不会受到影响并保持这些属性。</p>
  <p>夹具将被绑定到实例上，质心被定位在实例的原点上，而多边形夹具是根据点<i>相对</i>于原点的位置来绑定的。如果你要求你的夹具被绑定到
    绑定到原点之外的一个点，那么你应该使用 <a href="physics_fixture_bind_ext.htm"><tt>physics_fixture_bind_ext()</tt></a>.</p>
  <p><img alt="Physics fixture binding example" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Physics/physics_fixture_bind_image.png">这个函数也会为绑定的<i>灯具</i>返回一个唯一的 &quot;id &quot;值（不是灯具本身）。
    的唯一 &quot;id &quot;值<b>（不是夹具本身</b>），然后可以使用函数从实例中移除（&quot;解除绑定&quot;）物理属性。 <a href="physics_remove_fixture.htm"><tt>physics_remove_fixture()</tt></a>.这允许你从一个实例中添加
    从一个实例中添加和删除物理属性，而不需要破坏和重新创建对象。</p>
  <p class="note"><b>注意</b>：当不再需要时，应该删除固定装置，因为不这样做可能导致内存泄漏，这将减慢并最终使你的游戏崩溃。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">physics_fixture_bind(fixture, target)</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>固定设备</td>
        <td>要绑定的灯具</td>
      </tr>
      <tr>
        <td>目标</td>
        <td>接收夹具的目标实例（可以是一个实例ID，一个对象ID，<i>其他</i>，或<i>所有</i>）。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code">真实的</p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var fix, inst;<br> fix = physics_fixture_create();<br> physics_fixture_set_circle_shape(fix, 16);<br> physics_fixture_set_density(fix, 1.0);<br> inst = instance_create_layer(x, y, &quot;Instances&quot;, genericBodyObject);<br> my_fix = physics_fixture_bind(fix,
    inst);<br> physics_fixture_delete(fix)。
  </p>
  <p>上面的代码将创建一个灯具并将其索引分配给变量 &quot;fix&quot;。然后定义灯具的形状和密度，再将其绑定到创建的实例上，并将<b>绑定的</b>灯具的索引存储在
    变量 &quot;my_fix &quot;中的索引创建的实例。最后，该夹具被删除，以防止内存泄漏，因为它不再需要了。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Fixtures.htm">固定装置</a></div>
        <div style="float:right">下一页:<a href="physics_fixture_bind_ext.htm">物理学_灯具_绑定_文本</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
physics_fixture_bind
-->
  <!-- TAGS
physics_fixture_bind
-->
</body>
</html>