<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>physics_joint_gear_create</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="physics_joint_gear_create的参考页" />
  <meta name="rh-index-keywords" content="physics_joint_gear_create" />
  <meta name="search-keywords" content="physics_joint_gear_create" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>physics_joint_gear_create</h1><p>如果要创建复杂的机械装置，则可能需要使用齿轮。原则上，您可以<span class="notranslate">GameMaker Studio 2</span>创建齿轮，但这并不是很有效，可能对编写者来说很繁琐！幸运的是，有一种更简单的方法，那就是使用<i>齿轮接头</i>。要制作一个，您需要预先定义夹具并创建两个将要构成齿轮的基本关节-这些<b>关节必须</b>由一个<a href="physics_joint_revolute_create.htm">旋转关节</a>和一个<a href="physics_joint_prismatic_create.htm">棱柱形关节</a>或另一个<i>旋转关节组成</i>。下图显示了通常如何在游戏中创建装备：</p><p><img alt="Gear joint illustration" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Physics/gear_joint_image.png" />那么会发生什么呢？好了，将两个关节添加到齿轮中后，与一个关节的相互作用将对另一个关节产生影响，因此在上例中，如果旋转inst2，则inst3将上下移动，或者如果将inst3上下移动然后inst2将旋转。您还可以更改齿轮比，这意味着您需要多（或少）移动一个实例才能获得所需的效果。底部示例中的代码显示了如何创建如上图所示的内容。</p><p class="note"><b>注意</b>：如果需要删除齿轮接头中涉及的两个实例中的一个（或者只是删除它们的接头），则<b>必须</b><span style="font-size:1px;"><a href="physics_joint_delete.htm"><tt style="font-size: 14px">首先使用physics_joint_delete（）</tt></a></span>删除齿轮接头，否则会出现错误！</p><p></p><h4>句法：</h4><p class="code">physics_joint_gear_create(inst1, inst2, joint_1, joint_2, ratio)</p><table><tbody><tr><th>争论</th><th>描述</th></tr><tr><td><span class="notranslate">inst1</span></td><td>与关节连接的第一个实例</td></tr><tr><td><span class="notranslate">inst2</span></td><td>与关节连接的第二个实例</td></tr><tr><td><span class="notranslate">joint_1</span></td><td>先前定义的<b>旋转</b>关节</td></tr><tr><td><span class="notranslate">joint_2</span></td><td>先前定义的旋转<i>或</i>棱柱形关节</td></tr><tr><td><span class="notranslate">ratio</span></td><td>设置两个关节之间的速度比</td></tr></tbody></table><p></p><h4>返回值：</h4><p class="code">Integer (index of the joint)</p><p></p><h4>例子：</h4><p class="code">var t_fix, g_fix, inst1, inst2, inst3, r_joint, p_joint;<br/> g_fix = physics_fixture_create();<br/> physics_fixture_set_box_shape(g_fix, 40, 10);<br/> t_fix = physics_fixture_create();<br/> physics_fixture_set_circle_shape(t_fix, 10);<br/> physics_fixture_set_density(t_fix,
    0.5);<br/> inst1 = instance_create_layer(60, room_height - 30, &quot;Background&quot;, obj_Ground);<br/> inst2 = instance_create_layer(40, room_height - 300, &quot;Instances&quot;, obj_Cog);<br/> inst3 = instance_create_layer(150, room_height - 300,
    &quot;Instances&quot;, obj_Barrel);<br/> physics_fixture_bind(g_fix, inst1);<br/> physics_fixture_bind(t_fix, inst2);<br/> physics_fixture_bind(t_fix, inst3);<br/> r_joint = physics_create_revolute_joint(inst1, inst2, 40, room_height - 300, -80, 80,
    1, 10, 0.5, 1, 0);<br/> p_joint = physics_create_prismatic_joint(inst1, inst3, 150, room_height - 300, 0, 1, -10, 10, true, 0, 0, 0, 0);<br/> physics_create_gear_joint(inst2, inst3, r_joint, p_joint, 0.5);</p><p>上面的代码创建并定义了两个夹具，然后创建了三个实例，一个实例“ obj_Ground”，另外两个实例“ obj_Cog”和“ obj_Barrel”。然后将夹具绑定到这些实例，并创建两个关节。地面和齿轮之间的旋转接头，以及地面和枪管之间的棱柱形接头。最后，使用先前定义的旋转和棱柱形接头在嵌齿轮和桶形实例之间创建齿轮接头。 </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">背部：<a href="Joints.htm">关节</a></div><div style="float:right">下一个：<a href="physics_joint_rope_create.htm">physics_joint_rope_create</a></div></div></div><h5> <span data-keyref="Copyright Notice">©版权所有<span class="notranslate">YoYo Games Ltd.</span> 2021保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
physics_joint_gear_create
-->
  <!-- TAGS
physics_joint_gear_create
-->
</body>
</html>