<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>physics_particle_get_data_particle</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="physics_particle_get_data_particle的参考页" />
  <meta name="rh-index-keywords" content="physics_particle_get_data_particle,phy_particle_data_flag_typeflags,phy_particle_data_flag_position,phy_particle_data_flag_velocity,phy_particle_data_flag_colour,phy_particle_data_flag_category,phy_particle_data_flag_color" />
  <meta name="search-keywords" content="physics_particle_get_data_particle,phy_particle_data_flag_typeflags,phy_particle_data_flag_position,phy_particle_data_flag_velocity,phy_particle_data_flag_colour,phy_particle_data_flag_category,phy_particle_data_flag_color" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>physics_particle_get_data_particle</h1><p>此函数使用已检查的给定标志返回物理模拟中有关单个粒子的各种信息。粒子索引（其ID）是该函数返回的索引 <a href="physics_particle_create.htm"><tt>physics_particle_create()</tt></a>，并且使用的缓冲区必须事先使用函数创建 <a href="../../Buffers/buffer_create.htm"><tt>buffer_create()</tt></a>。它应该是“增长”类型，其大小大约是预期返回数据的大小。标志本身是使用下面给出的常量设置的，您可以使用按位<i>或</i>“ |”创建单个标志值以获得所需的信息。</p><p></p><table><tbody><tr><th>持续的</th><th>描述</th><th>数据类型</th></tr><tr><td><span class="notranslate">phy_particle_data_flag_typeflags</span></td><td>粒子的标志值。</td><td> <span class="notranslate">buffer_u32</span></td></tr><tr><td> <span class="notranslate">phy_particle_data_flag_position</span></td><td>粒子的x和y位置。</td><td> <span class="notranslate">2 x buffer_f32</span></td></tr><tr><td> <span class="notranslate">phy_particle_data_flag_velocity</span></td><td>水平和垂直速度。</td><td> <span class="notranslate">2 x buffer_f32</span></td></tr><tr><td> <span class="notranslate">phy_particle_data_flag_colour</span></td><td>颜色和Alpha值（十六进制）。</td><td> <span class="notranslate">buffer_f32</span></td></tr><tr><td> <span class="notranslate">phy_particle_data_flag_category</span></td><td>粒子类别（在创建粒子时定义）。</td><td> <span class="notranslate">buffer_u32</span></td></tr></tbody></table><p></p><h4>句法：</h4><p class="code">physics_particle_get_data_particle(ind, buffer, flags)</p><table><tbody><tr><th>争论</th><th>描述</th></tr><tr><td><span class="notranslate">ind</span></td><td>要从中获取数据的粒子的索引（ID）。</td></tr><tr><td> <span class="notranslate">buffer</span></td><td>用于存储数据的（先前创建的）缓冲区。</td></tr><tr><td> <span class="notranslate">flags</span></td><td>用于提取有关特定粒子类型的数据的标志。</td></tr></tbody></table><p></p><h4>返回值：</h4><p class="code">Buffer data</p><p></p><h4>例子：</h4><p class="code">var part = physics_particle_create(flags, x, y, x_vel, y_vel, c_white, 1, 1)<br/> var flags = phy_particle_data_flag_position | phy_particle_data_flag_velocity;<br/> var buffer = buffer_create(16, buffer_grow, 4);<br/> physics_particle_get_data_particle(part,
    buffer, flags);<br/> px = buffer_read(buffer, buffer_f32);<br/> py = buffer_read(buffer, buffer_f32);<br/> pvelx = buffer_read(buffer, buffer_f32);<br/> pvely = buffer_read(buffer, buffer_f32);<br/> buffer_delete(buffer);
  </p><p>上面的代码获取由变量“ part”索引的粒子的位置和速度，并将数据存储在多个变量中。 </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">背面：<a href="Soft_Body_Particles.htm">软体微粒</a></div><div style="float:right">下一个：<a href="physics_particle_group_get_data.htm">physics_particle_group_get_data</a></div></div></div><h5> <span data-keyref="Copyright Notice">©版权所有<span class="notranslate">YoYo Games Ltd.</span> 2021保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
physics_particle_get_data_particle
phy_particle_data_flag_typeflags
phy_particle_data_flag_position
phy_particle_data_flag_velocity
phy_particle_data_flag_colour
phy_particle_data_flag_category
-->
  <!-- TAGS
physics_particle_get_data_particle
-->
</body>
</html>