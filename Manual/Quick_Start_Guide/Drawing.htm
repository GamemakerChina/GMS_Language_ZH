<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>绘图</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Some basic code and DnD to show people how things are drawn." />
  <meta name="rh-index-keywords" content="Quick Start - Drawing" />
  <meta name="search-keywords" content="drawing,draw event,GUI layer" />
  <meta name="robots" content="NOODP" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>绘图</h1>
  <p>本节（以及接下来的 "<a href="Movement_And_Controls.htm">运动和控制</a>"一节）旨在为你提供<span class="notranslate">GML</span>或<span class="notranslate">DnD</span>™的实际例子，使你能够尽快开始制作你的第一个游戏项目。我们
    我们不会对事情进行太深入的解释，因为我们希望你能尽快开始制作东西，所以我们鼓励你在进行过程中探索任何链接，并使用手册中的 &quot;搜索 &quot;功能来寻找你不确定的其他信息。
    额外的信息，以了解你不确定的事情。</p>
  <p>在这一节中，我们将集中讨论简单地将信息绘制到屏幕上，包括文本和图像，并进一步解释不同的绘图<strong>事件，</strong>特别是主要的绘图事件
    和<strong>Draw GUI </strong>事件（注意，在一些例子中，你需要添加其他事件，但我们会在遇到这些事件时解释）。</p>
  <p><img alt="The Draw Events" class="center" src="../assets/Images/QS_Guide/QS_DrawEvents.png" /></p>
  <p>在做任何进一步的工作之前，你可能想从 "<a href="../Introduction/The_Start_Page.htm">开始 "页</a>上做一个新的项目（无论是<span class="notranslate">GML</span>还是<span class="notranslate">DnD</span>™），并添加（或创建）几个精灵以及一两个对象，因为我们会给你一些
    代码，你可以用这些代码进行测试。现在，即使是一个白色的正方形也可以作为我们对象的精灵。</p>
  <p>现在，正如在 "<a href="Objects_And_Instances.htm">对象和实例</a>"一节中提到的，如果你不给对象添加一个绘制事件，那么<span class="notranslate">GameMaker Studio 2</span>将默认绘制，也就是说，如果对象有一个精灵分配给它，这个
    就会被画出来，包括已经添加的任何变换。我们所说的变换是什么意思？嗯，每个对象都有一些内置的<span class="glossextra">变量</span>，这些变量将控制该对象的实例在默认绘制时如何绘制其精灵，你可以在游戏运行时改变这些变量，以改变精灵的绘制方式。</p>
  <p class="note"><strong>注意</strong>：你可以<a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/Sprite_Instance_Variables.htm">在这里</a>找到所有可用于转换实例精灵的内置变量的列表。
   <span class="notranslate">Drag and Drop</span>™用户有一些影响这些变量的专用操作，你可以<a href="../Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Drawing_Actions.htm">在这里</a>找到，你也可以使用实际的变量本身，以及
   <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Variable.htm">获取实例变量</a>和<a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Set_Instance_Variable.htm">设置实例变量</a>的操作。</p>
  <p>让我们看看一些例子。</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="#">改变Alpha（透明度）。</a></p>
  <div class="droptext" data-targetname="drop_down">
    <p class="dropspot"> <strong>阿尔法 </strong>值是控制正在绘制的东西的透明度，在<span class="notranslate">GameMaker Studio 2</span>中<span class="notranslate">，</span>你可以使用 <span class="inline">image_alpha</span> 这个内置变量来改变指定精灵的透明程度。为了
      看这是如何工作的，打开（或创建）一个对象，给它分配一个精灵，然后给这个对象一个<strong>创建事件</strong>。在创建事件中，只需添加以下<span class="notranslate">DnD</span>™或<span class="notranslate">GML</span>。</p>
    <p class="dropspot"><img alt="DnD Draw Example For Transparency" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_1.png" /></p>
    <p class="code">var _val = random(1);<br> image_alpha = _val;</p>
    <p class="dropspot">图像阿尔法的计算值从0到1，其中0是完全透明的，1是完全不透明的（默认情况下，它被设置为1）。所以在这个例子中，我们所做的就是把图像alpha设置为一个从0到1的随机十进制值。把这个对象的几个实例放在
      这个对象的几个实例放在一个房间里，然后点击IDE顶部的<strong>播放按钮 </strong> <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> 。</p>
    <p class="dropspot">你应该看到，对象的每个实例都以不同的透明度绘制其精灵，例如。</p>
    <p class="dropspot"><img alt="Example Of Sprites Drawn With Different Alpha Values" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_1.png" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="#">改变颜色的混合（着色）。</a></p>
  <div class="droptext" data-targetname="drop_down1">
    <p class="dropspot">当你的对象默认绘制一个精灵时，这个精灵实际上是被<strong>混合 </strong>（或<strong>着色</strong>）绘制的，这个颜色值被存储在 <span class="inline">image_blend</span> 这个内置变量中。
      默认情况下，这个颜色是白色，这基本上意味着当精灵在屏幕上显示时，不会有任何颜色被添加到精灵上。然而，你可以使用其他颜色来实现特殊效果，例如，使用红色来显示实例受到了
      一些伤害。</p>
    <p class="dropspot">在这个例子中，我们要在按住一个键的时候将不同的颜色与精灵混合在一起，因此你需要打开（或创建）一个对象，给它分配一个精灵，然后给这个对象一个键下<strong>&lt;空间&gt;事件。</strong></p>
    <p class="dropspot"><img alt="Add Key Down Event" class="center" src="../assets/Images/QS_Guide/QS_Add_SpaceKeyPressEvent.png" /></p>
    <p class="dropspot">在这个键下事件中，添加以下<span class="notranslate">DnD</span>™或<span class="notranslate">GML</span>。</p>
    <p class="dropspot"><img alt="DnD Example Using Key Down Event" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_2.png" /></p>
    <p class="code">var _col = choose(c_red, c_green, c_blue, c_yellow, c_fuchsia, c_orange);<br> image_blend = _col;</p>
    <p class="dropspot">在一个房间里放置该对象的几个实例，然后点击IDE顶部的播放按钮<img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> ，并测试按住并释放<em>空格键 </em>。你应该看到
      你应该看到，在按住键的时候，每个实例都会迅速地改变它的颜色，而在松开键的时候则停止改变。</p>
    <p class="dropspot"><img alt="Example Showing Colour Blending" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_2.png" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="#">变化的规模</a></p>
  <div class="droptext" data-targetname="drop_down2">
    <p class="dropspot">我们可以为精灵改变的另一个属性是<strong>比例 </strong>值，允许我们在任何时候把它画大或画小。刻度是通过两个独立的变量沿X和Y轴独立计算的，这两个变量是
     <span class="inline">image_xscale</span>变量和 <span class="inline">image_yscale</span> 变量。默认情况下，这两个变量被设置为1，它们的作用就像<strong>乘法器</strong>，所以0.5的值是一半的比例，2的值是两倍的比例。</p>
    <p class="note"><strong>重要的是! </strong>使用这些变量改变指定的精灵比例<strong>，也会改变边界框的大小</strong>，使之<strong>与之匹配</strong>，这意味着精灵的碰撞检测区域也会扩大。</p>
    <p class="dropspot">在这个例子中，我们将使用一些简单的数学方法，使一个实例在一个循环中上下缩放精灵。首先，打开（或创建）一个对象，给它分配一个精灵，然后给这个对象一个<strong>创建事件</strong>。在这个
      事件中添加以下内容。</p>
    <p class="dropspot"><img alt="DnD Set Variable Example" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_3_1.png" /></p>
    <p class="code">定时器=0。</p>
    <p class="dropspot">现在用这个给对象添加一个<strong>步骤事件</strong>。</p>
    <p class="dropspot"><img alt="DnD Actions To Change Sprite Scale" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_3_2.png" /></p>
    <p class="code">timer = timer + 1;<br> var _val = dsin(timer);<br> image_xscale = 1 + _val;<br> image_yscale = 1 + _val;</p>
    <p class="dropspot">这里我们使用数学函数 <a href="../GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dsin.htm"><span class="inline">dsin()</span></a>来生成一个介于-1和1之间的值，然后将其应用于
      到比例变量上。在把一些实例放到一个房间里并按下<strong>播放按钮 </strong> <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> ，你应该看到实例是如何从0刻度到2刻度再到2刻度的上升和下降。
      从0刻度到2刻度，然后再返回。</p>
    <p class="dropspot"><img class="center" src="../assets/Images/QS_Guide/QS_DrawExample_3.gif" title="Animation Showing Sprite Scaling" /></p>
    <p class="dropspot">最后一件事......将 &quot; <span class="inline">image_yscale</span>&quot;部分改为 &quot; <span class="inline">1 - _val</span>&quot;，看看会发生什么。</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p>上面的例子只是说明了当<span class="notranslate">GameMaker Studio 2</span>默认绘制时，你可以操纵对象精灵的一些方法，但如果你想为一个对象绘制不止一个东西呢？在这些情况下，你需要使用<strong>Draw Event</strong>来明确地告诉<span class="notranslate">GameMaker Studio 2</span>要画什么，这就是我们在下面的例子中要做的。</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down3" href="#">将两个（或多个）精灵画在一起</a></p>
  <div class="droptext" data-targetname="drop_down3">
    <p class="dropspot">在这个例子中，你将需要两个精灵和一个对象。称这些精灵为 &quot; <span class="inline">spr_One</span>&quot;和 &quot; <span class="inline">spr_Two</span>&quot;，然后将 &quot; <span class="inline">spr_One</span>&quot;
      原点为中心，&quot; <span class="inline">spr_Two</span>&quot;的原点为左中部。</p>
    <p class="dropspot"><img alt="Show Origins For Sprites" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_1.png">将第一个精灵（&quot; <span class="inline">spr_One</span>&quot;，中心原点）分配给你所创建的对象，然后添加
      一个<strong>创建</strong>事件。在创建事件中添加以下<span class="notranslate">DnD</span>™或<span class="notranslate">GML</span>。</p>
    <p class="dropspot"><img alt="Set Draw Angle Variable In DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_1.png" /></p>
    <p class="code">draw_angle = 0;</p>
    <p class="dropspot">我们将使用这个变量来旋转&quot; <span class="inline">spr_Two</span>&quot;，并将其覆盖在分配给该对象的精灵（&quot; <span class="inline">spr_One</span>&quot;）上。要做到这一点，我们需要给对象添加一个 "<strong>绘图事件 </strong>"。
      对象。通过这样做，我们告诉<span class="notranslate">GameMaker Studio 2</span>，我们想接管实例的绘制，这意味着我们的代码将包括一个调用到 <a href="../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_self.htm"><span class="inline">draw_self()</span></a>函数
      或 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Self.htm"><strong>绘制自我</strong></a>动作。这个动作简单地复制了对象在没有Draw Event的情况下所做的事情，它是默认绘制指定的精灵。我们将
      然后绘制第二个精灵，我们想用它来作为旋转的覆盖精灵。<span class="notranslate">DnD</span>™和<span class="notranslate">GML</span>看起来像这样。</p>
    <p class="dropspot"><img alt="Draw Two Sprites With DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_2.png" /></p>
    <p class="code">draw_self();<br> draw_angle = draw_angle + 0.5;<br> draw_sprite_ext(spr_Two, 0, x, y, 1, 1, draw_angle, c_red, 1);</p>
    <p class="dropspot">在房间编辑器中添加一些对象的实例，然后按下<a class="glossterm" data-glossterm="IDE" href="#">IDE</a>顶部的<strong>播放按钮 </strong> <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> 。如果一切正常，你现在应该看到类似这样的东西。</p>
    <p class="dropspot"><img alt="Animation Drawing Two Sprites Together" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_2.gif" /></p>
    <p class="dropspot">在我们离开这个例子之前，让我们稍微调整一下，不要让&quot; <span class="inline">spr_Two</span>&quot;简单地旋转，我们要让它指向鼠标的位置。为此，我们需要改变Draw Event
     <span class="notranslate">DnD</span>™或<span class="notranslate">GML</span>看起来像这样。</p>
    <p class="dropspot"><img alt="Edited Draw Code For Drawing Two Sprites With DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_3.png" /></p>
    <p class="code">draw_self();<br> draw_angle = point_direction(x, y, mouse_x, mouse_y);<br> draw_sprite_ext(spr_Two, 0, x, y, 1, 1, draw_angle, c_red, 1) 。</p>
    <p class="dropspot">再次运行该项目，这一次你会看到非常不同的东西!</p>
    <p class="dropspot"><img alt="Animation Drawing Two Sprites Pointing At Mouse" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_3.gif">现在，无论你把它移到哪里，精灵都会指向鼠标的方向正如你所看到的，分层精灵是一个很好的方法
      的一个很好的方法，它可以为一个物体添加细节，或者让某些东西独立于分配给该物体的 &quot;基本 &quot;精灵而移动，它是一个强大的工具，你可能会在你自己的项目中经常使用。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down4" href="#">绘制精灵以外的东西</a></p>
  <div class="droptext" data-targetname="drop_down4">
    <p class="dropspot">你也可以在Draw Event中绘制精灵以外的东西，比如文本或形状。在这个例子中，我们将使用DnD<span class="notranslate">™</span>或GML <span class="inline">draw_self()</span> 函数来绘制对象精灵，但我们也将绘制一些其他东西。
      首先是一些<strong>文本</strong>。在这个例子中，你需要一个精灵和一个对象（将精灵分配给它）。在对象中，首先用这个<span class="notranslate">DnD</span>™或<span class="notranslate">GML</span>添加一个<strong>创建事件</strong>。</p>
    <p class="dropspot"><img alt="Setting Variables Using DnD" class="center" height="506" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_1_1.png" width="317" /></p>
    <p class="code">name = choose(&quot;Fred&quot;, &quot;Jonas&quot;, &quot;Sharon&quot;, &quot;Kate&quot;, &quot;Frank&quot;, &quot;John&quot;, &quot;Monica&quot;, &quot;Amanda&quot;) ;<br> number = irandom(100);</p>
    <p class="dropspot">所有这一切都告诉<span class="notranslate">GameMaker Studio 2</span>从列出的名称中选择一个，并将其分配给一个变量，以及为该对象的每个实例生成一个从0到100的随机数。我们想把这些值画到屏幕上，所以为此
      你现在需要添加一个<strong>绘图事件</strong>，并在其中添加以下<span class="notranslate">DnD</span>™或<span class="notranslate">GML</span>。</p>
    <p class="dropspot"><img alt="Drawing Text Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_1.png" /></p>
    <p class="code">draw_self();<br> draw_set_halign(fa_center);
      <br> draw_text(x, y + 32, &quot;My name is &quot; + name);<br> draw_text(x, y + 48, &quot;My number is &quot; + string(number));</p>
    <p class="dropspot">你会注意到在上面的代码中，我们使用了 <a href="../GameMaker_Language/GML_Reference/Strings/string.htm"><span class="inline">string()</span></a>函数或 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Data_Types/Number_To_String.htm"><strong>数字到字符串</strong></a>动作
      在我们要绘制的 &quot;数字 &quot;变量上。这是因为所有的文本都必须由<em>字符</em>组成，而不是由数值组成，所以我们需要使用这个函数/动作将数字值转换成我们想
      绘制的字符。在这种情况下，我们要把我们生成的随机数变成一个可以绘制的字符 &quot;字符串&quot;。还请注意，我们设置了文本<strong>对齐方式</strong>。这只是告诉<span class="notranslate">GameMaker Studio 2</span>从哪里开始
      绘制相对于给定位置的文本，在这种情况下，我们希望文本沿X轴居中。</p>
    <p class="dropspot">在房间编辑器中添加一些对象的实例，然后按IDE顶部的播放按钮<img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> 。你应该看到类似这样的东西。</p>
    <p class="dropspot"><img alt="Sprites Being Drawn Along With Text" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_5_1.png" /></p>
    <p class="dropspot">在到目前为止的所有例子中，我们一直在绘制分配给实例的精灵，但这并不总是如此。<strong>你可以</strong>在绘制事件中<strong>绘制任何你想要的东西</strong>，而不考虑分配的精灵。为了说明
      为了说明这一点，我们将改变目前的代码，删除 <span class="inline">draw_self()</span> 的调用，用一个函数来画一个彩色的椭圆，像这样。</p>
    <p class="dropspot"><img alt="Drawing Shapes Along With Text Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_2.png" /></p>
    <p class="code">draw_ellipse_colour(x - 50, y - 32, x + 50, y + 32, c_fuchsia, c_lime, false);<br> draw_set_halign(fa_center) 。
      <br> draw_text(x, y + 32, &quot;My name is &quot; + name);<br> draw_text(x, y + 48, &quot;My number is &quot; + string(number));</p>
    <p class="dropspot">再次运行该项目，你应该看到这个。</p>
    <p class="dropspot"><img alt="Example Of Drawing Shapes And Text Together" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_5_2.png" /></p>
    <p class="dropspot">关于这一点，需要注意的是，即使我们没有绘制指定的精灵，它<strong>仍然会被用于碰撞检测。</strong>所以，虽然你可能在画一件东西，但碰撞的计算仍然是基于
      来计算碰撞，就像它和实例一起被放置在房间里一样，即使它不可见。这实际上是很方便的，因为它意味着你可以绘制不同的精灵，但保持一个基于
      分配的精灵。还要注意的是，你仍然可以应用不同的变换，比如X/Y比例，而碰撞将基于改变后的尺寸，尽管没有任何东西被画出来显示这一点。</p>
  </div>
  <p> </p>
  <p> </p>
  <h1>GUI层</h1>
  <p>我们在页面顶部提到，我们将讨论绘图<strong>GUI事件</strong>和绘图事件，所以现在让我们看看。绘制GUI事件在一个叫做<strong> <a class="glossterm" data-glossterm="GUI" href="#">GUI</a></strong>层的东西上工作。
    这是一个具有固定宽度和高度的特殊绘图层，它被绘制在房间里的实例上。GUI层的好处是<em> 它不随房间的摄像机移动，所以</em>它是添加静态GUI
    项目，如分数、健康条和其他你的游戏需要传达给用户的信息。你可以从手册的 "<a href="../The_Asset_Editors/Object_Properties/Draw_Events.htm">绘制事件</a>"部分找到更多关于GUI层的信息。
    中找到更多关于GUI层的信息。</p>
  <p class="note"><strong>注意</strong>：房间可以比屏幕尺寸大，所以你可以有大的关卡让玩家在其中移动。这意味着在房间编辑器中（或在代码中），你需要定义一个<strong>摄像机 </strong>来跟随游戏的动作。
    游戏的动作。这基本上是一种设置屏幕固定区域的方式，以根据--例如--玩家在房间中的位置来显示更大房间的不同部分，并在很多游戏中使用。想想看，在《马里奥》等经典游戏中，视角总是跟着主角走的方式。
    想一想在经典游戏（如马里奥或塞尔达）中，视角总是跟随主角的方式。这是用摄像机完成的。更多信息见手册中房间编辑器部分的<a href="../The_Asset_Editors/Room_Properties/Room_Properties.htm">房间属性</a>一节。</p>
  <p>下面的例子都将使用<strong>Draw GUI</strong>事件，所以你需要创建一个对象并将该事件添加到其中。请注意，这个对象不需要分配精灵，因为我们不希望默认绘制任何东西。
    我们也不需要它来检测碰撞。像这样只为绘制东西或控制游戏的某些方面而设计的对象通常被称为<strong>控制器对象</strong>。还请注意，我们将在所有的例子中使用同一个对象。
    所有的例子，所以我们建议你一个接一个地去看（尽管这不是严格意义上的必要）。</p>
  <p><img alt="Draw GUI Event In An Object" class="center" src="../assets/Images/QS_Guide/QS_DrawGUIObject.png"> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down5" href="#">绘图文本</a></p>
  <div class="droptext" data-targetname="drop_down5">
    <p class="dropspot">当绘制到GUI层时，左上角是原点位置，向右是+X，向下是+Y。这使得文本和图形的定位非常容易，正如你在这个例子中看到的。我们在这里要做的是画一个值
      代表玩家的得分，所以在我们的对象中，我们需要添加一个<strong>创建事件来 </strong>初始化一个变量来保存这个值，像这样。</p>
    <p class="dropspot"><img alt="Defining A Variable Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_1.png" /></p>
    <p class="code">player_score = 0。</p>
    <p class="dropspot">我们还想<strong>为</strong>该对象添加一个<strong>键盘下键&lt;Space&gt;事件</strong>，因为我们将用它来增加每次按下Space键时的分数。</p>
    <p class="dropspot"><img alt="Adding A Space Key Pressed Event" class="center" src="../assets/Images/QS_Guide/QS_Add_SpaceKeyPressEvent.png" /></p>
    <p class="dropspot">在这个事件中，添加以下内容。</p>
    <p class="dropspot"><img alt="DnD Actions In The Space Key Event" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_2.png" /></p>
    <p class="code">var _val = irandom(100);<br> player_score = player_score + _val;</p>
    <p class="dropspot">最后，让我们在Draw GUI事件中绘制分数值，像这样。</p>
    <p class="dropspot">在这个事件中，添加以下内容。</p>
    <p class="dropspot"><img alt="Drawing Text To The GUI Layer Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_3.png" /></p>
    <p class="code">draw_set_halign（fa_left）;<br> draw_set_colour（c_yellow）;
      <br> draw_text(32, 32, &quot;SCORE:&quot;);<br> draw_set_colour(c_white);
      <br> var _str = string(player_score);<br> draw_text_transformed(32, 48, _str, 2, 2, 0);</p>
    <p class="dropspot">你会注意到我们是如何使用硬<a class="glossterm" data-glossterm="硬编码" href="#">编码（或</a>固定）值来表示要绘制的文本的X/Y位置的，因为我们不需要它是相对于任何实例的，因为我们正在绘制
      到GUI层。我们还使用了 &quot;设置颜色 &quot;函数来改变文本的颜色，以及 &quot;转换 &quot;函数来使实际的分数值变大，这说明了你如何在自己的游戏中定制
      这说明你可以在你自己的游戏中定制文本元素。</p>
    <p class="dropspot">现在就在你的房间里添加这个物体的一个实例，然后按下<strong>播放按钮 </strong> <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> 。当游戏运行时，按下并释放 <span class="inline">&lt;Space&gt;</span> 键，你应该看到分数值增加。</p>
    <p class="dropspot"><img alt="Animation Showing Text Being Drawn To The GUI Layer" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_6.gif" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down6" href="#">绘制精灵</a></p>
  <div class="droptext" data-targetname="drop_down6">
    <p class="dropspot">在这个例子中，我们将使用GUI层来绘制一些精灵。最明显的用途是绘制玩家的生命，所以让我们继续做这件事吧在这个例子中，你需要一个精灵--它应该是64x64的像素
      - 但它不应该被分配给对象，因为我们将自己绘制它。</p>
    <p class="dropspot">首先，我们需要在<strong>创建事件</strong>中为对象添加一些新的变量（如果你已经做了前面的例子，在已经有的下面添加以下内容）。</p>
    <p class="dropspot"><img alt="Defining Variables Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_7_1.png" /></p>
    <p class="code">player_lives = 3;<br> gui_w = display_get_gui_width();</p>
    <p class="dropspot">在这段代码中，我们为玩家的生命初始化了一个变量，但我们也创建了一个变量来保持GUI层的宽度，这样我们就可以相对于屏幕的右侧正确定位。我们可以直接在代码中硬编码一个值
      并使用它，但这意味着如果我们对房间的大小做任何改变，或者如果我们以后添加了摄像机等等，那么我们就需要通过代码并改变所有的值。使用 <a href="../GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_gui_width.htm"><span class="inline">display_get_gui_width()</span></a>函数
      代替意味着我们不需要担心任何未来的变化，因为代码会自动适应GUI层最终的尺寸。</p>
    <p class="dropspot">接下来我们要<strong>给</strong>这个对象添加一个<strong>键盘按下&lt;Enter&gt;事件</strong>，因为我们要用它来改变每次按下回车键时的生命数。</p>
    <p class="dropspot"><img alt="Adding An Enter Key Pressed Event" class="center" src="../assets/Images/QS_Guide/QS_Add_EnterKeyPressEvent.png" /></p>
    <p class="dropspot">在这个事件中，添加以下内容。</p>
    <p class="dropspot"><img alt="DnD In The Enter Key Down Event" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_7_2.png" /></p>
    <p class="code">player_lives = player_lives -1;<br> if player_lives &lt; 0<br> {<br> player_lives = 3;<br> }</p>
    <p class="dropspot">最后，我们需要把精灵画到显示器上。为此，我们将使用一个 &quot; <span class="inline">for</span>&quot;循环（关于使用GML的信息在这里，<span class="notranslate">关于</span> <a href="../GameMaker_Language/GML_Overview/Language_Features/for.htm">DnD?</a>
     <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Loops/For.htm">这里</a>），以及GUI宽度变量来定位屏幕右上角的一切。所以，在Draw Gui事件中添加这个（在它可能有的任何其他动作之后
      之前的例子中的其他动作之后）。)</p>
    <p class="dropspot"><img alt="DnD Actions To Draw Sprites To The GUI Layer" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_7_3.png" /></p>
    <p class="code">for (var i = 0; i &lt; player_lives; i += 1;)<br> {<br> var _xx = gui_w - 48 - (i * 70);<br> draw_sprite(spr_Heart, 0, _xx, 48);<br> }</p>
    <p class="dropspot">如果你还没有在房间里添加这个物体的实例，现在就去添加它（只有一个！），然后按下播放按钮<img alt="Play Icon" class="icon" height="24" src="../assets/Images/Icons/Icon_PlayGame.png" width="24"> 。一旦游戏开始运行，就按下 <span class="inline">&lt;Enter&gt;</span> 键，看到生命的变化。</p>
    <p class="dropspot"><img alt="Animation Drawing Sprites To The GUI Layer" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_7.gif" /></p>
    <p class="dropspot">在你离开这个例子之前，你应该试验一下生命的数量，看看会发生什么。目前它被设置为3，但改变创建事件和按键事件，将数值设置为5或10......如果你做了所有的事情
      如果你所做的一切是正确的，那么代码应该适应并正确地画出它们!</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down7" href="#">绘制健康栏</a></p>
  <div class="droptext" data-targetname="drop_down7">
    <p class="dropspot">这最后一个例子包括在GUI层上绘制一个健康条。有许多方法可以做到这一点，但<span class="notranslate">GameMaker Studio 2</span>有一个内置的功能，专门用来做健康条，所以我们在这里将使用这个功能，尽管
      你也可以使用精灵或形状创建你自己的。首先，和以前一样，我们需要初始化一个变量来保存健康值，所以在对象的<strong>创建事件</strong>中添加以下<span class="notranslate">DnD</span>™或<span class="notranslate">GML</span>（在任何其他代码之后
      可能已经存在的其他代码之后）。)</p>
    <p class="dropspot"><img alt="Defining A Variable Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_8_1.png" /></p>
    <p class="code">player_health = 100。</p>
    <p class="dropspot">我们想使用方向键来改变健康值的高低，这取决于哪个方向键被按下，我们可以通过添加两个<strong>键盘按压&lt;箭头&gt;</strong>事件来实现，然而使用一个步骤事件<strong>和</strong>一些代码来检查按键可能更容易，所以<strong>现在</strong>继续添加一个步骤事件<strong>，并使用</strong>以下DnD™或<span class="notranslate">GML</span>。</p>
    <p class="dropspot"><img alt="Step Event DnD Actions" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_8_2.png" /></p>
    <p class="code">if keyboard_check(vk_up)<br> {<br> if player_health &lt; 100<br> {<br> player_health = player_health + 1;<br> }<br> }<br> if keyboard_check(vk_down)<br> {<br> if player_health &gt; 0<br> {<br> player_health = player_health - 1;<br> }<br> }</p>
    <p class="dropspot">完成这些后，我们就可以开始绘制健康条了，这是在Draw GUI事件中完成的，添加以下内容（在其他已经存在的内容之后）。</p>
    <p class="dropspot"><img alt="DnD For The Draw GUI Event To Draw A Healthbar" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_8_3.png" /></p>
    <p class="code">var _xx = gui_w / 2;<br> draw_healthbar(_xx - 50, 24, _xx + 50, 40, player_health, c_black, c_white, c_red, c_lime, 0, true, true) 。</p>
    <p class="dropspot">如果你还没有这样做的话，就把这个对象的一个实例添加到一个房间里（虽然只有一个！），然后按下播放按钮<img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> 。一旦游戏开始
      一旦游戏开始运行，就按下 <span class="inline">&lt;Up Arrow&gt;</span> 和 <span class="inline">&lt;Down Arrow&gt;</span> 键，看看健康状况的变化。</p>
    <p class="dropspot"><img alt="Animation Of Drawing A Healthbar" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_8.gif" /></p>
  </div>
  <p> </p>
  <p>我们希望在做完这些例子后，你在使用<span class="notranslate">GameMaker Studio 2</span>时有了更多的信心，对它的工作原理有了更多的了解。下一节将探讨如何让你所画的这些东西在房间里移动
    以及接受--和响应--用户的输入。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回:<a href="../Content.htm">索引</a></div>
        <div style="float:right">下一步。<a href="Movement_And_Controls.htm">运动和控制</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Drawing
Drawing Examples
Quick Start Drawing
-->
  <!-- TAGS
qs_drawing
-->
</body>
</html>