<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>什么是编程？</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="A brief description of what makes a program, generally and specifically using GameMaker Studio 2." />
  <meta name="rh-index-keywords" content="Quick Start - What Is Programming?" />
  <meta name="search-keywords" content="programming" />
  <meta name="robots" content="NOODP" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>什么是编程？</h1>
  <p>在<a href="Quick_Start_Guide.htm">上一节</a>中，我们概述了<span class="notranslate">GameMaker Studio 2</span>是如何创建你的游戏的，但无论你添加了什么精灵、物体或房间，都不会发生任何事情，除非你将其<strong>编程为 </strong>
    发生。但是，什么是程序？</p>
  <p>在一般意义上，一个程序只是一组指令（或 <strong> <a class="glossterm" data-glossterm="声明" href="#">声明</a></strong><span class="glossextra">s</span>），你把它交给计算机，告诉它执行某些任务。
    任务。这些任务可以有很大的不同，从简单地告诉计算机在屏幕上画一些东西，到根据一些用户的输入计算一个值，然后对其作出反应，但在所有情况下，它都是一个逻辑结构，会产生一些结果。
    在上一页中，我们谈到了将一个对象的实例向右移动2个像素，所以让我们来看看实际的程序会怎么做。</p>
  <p>在<span class="notranslate">Drag And Drop™</span><span class="notranslate">（DnD</span>™）中，它看起来像这样。</p>
  <p><img alt="DnD Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_Example.png" /></p>
  <p>而使用<span class="notranslate">GameMaker语言</span><span class="notranslate">（GML</span>），它看起来会是这样。</p>
  <p class="code">x = x + 2。</p>
  <p>为了理解上面的内容，我们必须首先讨论变量<strong>，</strong>然后再讨论<strong>函数， </strong>最后是<strong>条件，因为这 </strong>三样东西通常是构成任何程序的主要部分。
    任何程序的主体。</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="What_Is_Programming_.htm#">变量</a></p>
  <div class="droptext" data-targetname="drop_down">
    <p class="dropspot">变量是编程的基石，另外还有<strong>函数 </strong>（我们稍后会简单介绍）。变量是一个简单的<em>命名值</em>，在上面的例子中，变量被称为 &quot;<span class="inline">x</span>&quot;。
      现在，&quot;<span class="inline">x</span>&quot;可以是任何数值，如-126，或583，甚至1.56378，但 &quot;<span class="inline">x</span>&quot;的实际值并不重要，因为它可以变化（因此被称为 &quot;变量&quot;）。重要的是
      重要的是，我们把&quot;<span class="inline">x</span>&quot;加上2。值得注意的是，在这种情况下，&quot;<span class="inline">x</span>&quot;是一个内置<strong>变量，这意味着</strong>它是一个由GameMaker Studio 2为所有对象创建的变量。
     <span class="notranslate">的</span>变量，但你也可以创建你自己的变量。</p>
    <p class="dropspot">要创建一个变量，在使用之前必须先<strong>声明 </strong>它。声明一个变量就是告诉<span class="notranslate">GameMaker Studio 2</span>这个新变量的存在，并且它有一个初始值。要声明一个变量，你只需做以下事情
      这样。</p>
    <p class="dropspot"><img alt="Declare DnD Variables" class="center" src="../assets/Images/QS_Guide/QS_DnD_Declare.png" /></p>
    <p class="dropspot">或。</p>
    <p class="code">点=0。</p>
    <p class="dropspot">一旦一个变量被声明，那么它就可以在进一步的程序代码或动作中使用。变量的伟大之处在于它允许你在多个地方 &quot;重复使用 &quot;一个值，而实际上不必担心这个值是什么
      是什么。例如，假设你有一个 &quot;<span class="inline">damage</span>&quot; 变量，你在不同的地方使用它来告诉 GameMaker<span class="notranslate">Studio 2</span>对游戏中的其他物体<span class="notranslate">造成</span>一定的伤害。我们可以声明 &quot;<span class="inline">damage</span>&quot;
      为20，但后来决定这个数值太大，想把它改为10。如果我们使用数值20而不是一个变量，我们就需要翻阅所有的代码或动作，将20改为10，这既费时又容易出错。
      容易出错。然而，使用一个变量意味着我们只需在声明时将其改为10<em>一次 </em>，其余的代码或动作将使用这个新值。</p>
    <p class="dropspot">值得注意的是，有许多不同类型的变量，每个变量的使用方式都略有不同。我们不会在这里讨论这个问题，但你可以从手册的<a href="../GameMaker_Language/GML_Overview/Variables_And_Variable_Scope.htm"><span class="notranslate">GameMaker语言概述</span></a>部分找到更多信息。</p>
    <p class="dropspot">然而，变量仅仅是故事的第一部分。下一个部分是函数的使用...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="What_Is_Programming_.htm#">职能</a></p>
  <div class="droptext" data-targetname="drop_down1">
    <p class="dropspot">编程的下一个主要重要部分是与变量一起使用<strong>函数 </strong>。一个函数只是向计算机发出的做某事的指令，它可以有输入值，也可以有输出值（即：你可以给它一个值，它将做一些操作，然后返回不同的值。
      一个值，它将做一些操作，然后返回一个不同的值），尽管不是所有的函数都需要输入，也没有输出。为了更好地理解这一点，让我们看一下<span class="notranslate">GameMaker Studio 2</span>中的一个内置函数<span class="notranslate">。</span></p>
    <p class="dropspot">我们要看的函数是 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a>，在<span class="notranslate">DnD</span>™中是<a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Count.htm">获取实例计数</a>动作。
      这个函数/动作将检索游戏室中一个给定对象的实例数，你可以这样使用它。</p>
    <p class="dropspot"><img alt="Get Instance Count DnD Action" class="center" src="../assets/Images/QS_Guide/QS_DnD_GetInstanceCount.png" /></p>
    <p class="dropspot">或。</p>
    <p class="code">number = instance_number(obj_Enemy);</p>
    <p class="dropspot">在上面的两个例子中，该函数将一个对象ID作为其输入值（the <strong> <a class="glossterm" data-glossterm="争论" href="#">参数</a></strong>或<strong>参数</strong>），并将给出一个输出值（<strong>返回值 </strong>）。
      这是函数/动作被调用时房间里存在的给定对象的实例数。注意，我们使用一个变量来存储返回值，即变量&quot;<span class="inline">number</span>&quot;。这个变量可以
      在这段代码运行前声明，或者在代码运行时将其视为已声明，并将函数/动作的返回值分配给它。</p>
    <p class="dropspot">值得注意的是，你不仅仅局限于使用<span class="notranslate">GameMaker语言</span>或<span class="notranslate">DnD</span>™的内置动作，你实际上可以构建你自己的函数，用来扩展编程时的可能性（你可以<a href="../GameMaker_Language/GML_Overview/Script_Functions.htm">在这里</a>找到更多关于<span class="notranslate">GML</span>的信息，在<a href="../Drag_And_Drop/Drag_And_Drop_Overview/Action_Block_Functions.htm">这里</a>找到<span class="notranslate">DnD</span>™）。</p>
    <p class="dropspot">你可以用函数和变量做很多事情，但是如果没有编程故事的最后一个重要部分--<strong>条件反射</strong>，它们就几乎毫无用处。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="What_Is_Programming_.htm#">条件式</a></p>
  <div class="droptext" data-targetname="drop_down2">
    <p class="dropspot">编程的很大一部分是由提出问题组成的。这些问题通常是简单的问题，可以评估为真或假，并被称为<strong>条件 </strong>（而 <span class="inline">true </span>和
     <span class="inline">false </span>被称为<strong>布尔值 </strong>）。)最常见和最广泛使用的条件是 &quot;<span class="inline">if</span>&quot;这个问题，它被用来检查某些东西是 <span class="inline">true </span>还是 <span class="inline">false </span>，然后采取相应的行动。
        然后采取相应的行动。一个简单的例子是，如果一个角色的健康状况低于零，就将其从游戏中移除，用通俗的语言表达就是。</p>
    <p class="code">如果字符变量 &quot;hp &quot;小于或等于0，则销毁它。</p>
    <p class="dropspot">为了将上述内容变成代码，我们会有这样的内容。</p>
    <p class="dropspot"><img alt="DnD Conditional" class="center" src="../assets/Images/QS_Guide/QS_DnD_Conditional.png" /></p>
    <p class="dropspot">或。</p>
    <p class="code">if (hp &lt;= 0)<br>
      <br> {<br>
      <br> instance_destroy();<br>
      <br> }</p>
    <p class="dropspot">因此，上面我们问了一个问题 &quot;如果hp变量小于或等于0&quot;，然后如果评估结果为真，我们就调用函数 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_destroy.htm"><span class="inline">instance_destroy()</span></a>或
      动作<a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Destroy_Object_Instance.htm">Destroy Object Instance</a>。注意 &quot;<span class="inline">then</span>&quot;（如果某事......则某事......）是隐含的<em>， </em>你不需要添加它。
      你不需要添加它，同时注意在GML代码中我们用大括号 <span class="inline">{} </span>来 &quot;封锁 &quot;我们希望在&quot; <span class="inline">if</span>&quot;评估为 <span class="inline">true </span> 时执行的代码（在
      在<span class="notranslate">DnD</span>™中，这被象征为删除 &quot;<span class="inline">If</span>&quot;动作<em>右边 </em>的动作）。)在大括号之间添加的任何内容，只有在 &quot; <span class="inline">if</span>&quot; 评估为
     <span class="inline">true</span>，所以你可以在一个 &quot;块 &quot;中运行一个以上的语句。</p>
    <p class="dropspot">在使用 &quot;<span class="inline">if</span>&quot; 条件时，还有一件事要注意，我们也可以给它添加一个 &quot;<span class="inline">else</span>&quot; 语句，这样条件就变成了 &quot;如果有东西被评估为
      为 <span class="inline">true </span>，则做某事，<em>否则 </em>做不同的事&quot;。这样就可以处理一个返回 <span class="inline">true </span> <em>或 </em> <span class="inline">false</span> 的条件表达式。
      让我们也举个例子。</p>
    <p class="dropspot"><img alt="DnD If... Else.. Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_IfElse.png" /></p>
    <p class="dropspot">或。</p>
    <p class="code">if (countdown &lt;= 0)<br>
      <br> {<br>
      <br> instance_create_layer(x, y, &quot;Instances&quot;, obj_Bullet);<br>
      <br> countdown = 30;<br>
      <br> }<br>
      <br> else
      <br>
      <br> {<br>
      <br> countdown = countdown - 1;<br>
      <br> }</p>
    <p class="dropspot">上述代码翻译成普通语言为：。</p>
    <p class="code">如果倒计时变量小于或等于0，那么：<br>
      <br> 在图层 &quot;instances &quot;的当前x/y位置创建一个对象 &quot;obj_Bullet &quot;的实例，<br>
      <br> 将倒计时变量重置为30。<br>
      <br> 否则。
      <br>
      <br> 从倒计时变量中减去1。</p>
    <p class="dropspot">不要太担心上述代码的实际实例创建部分，因为我们将在下面的章节中详细介绍。这里需要理解的是，你可以创建条件表达式来检查
      如果某些东西是 <span class="inline">true </span>或 <span class="inline">false </span>，并让你的程序以不同的方式作出反应。这似乎是一件非常简单的事情，但它实际上是非常强大的，并将构成你在GameMaker中编程时的几乎所有基础。
      你在<span class="notranslate">GameMaker Studio 2</span>中编程时所做的一切。</p>
  </div>
  <p> </p>
  <p>因此，为了回答我们的问题 &quot;什么是编程？&quot;，我们可以说，<strong>编程是使用 </strong>语句的组合<strong>-- </strong>可以使用 <strong> <a class="glossterm" data-glossterm="变量" href="#">变量</a></strong>
   <span class="glossextra">s</span><strong> </strong>来形成 <strong> <a class="glossterm" data-glossterm="表情" href="#">表达式</a></strong>语句、执行任务的<strong>函数 </strong>，以及 <strong><a class="glossterm" data-glossterm="有条件的" href="#">条件式</a></strong>
     <span class="glossextra">s</span>来提出问题--然后并发地运行这些语句来实现一个目标。下面你可以看到一个在<span class="notranslate">DnD</span>™和<span class="notranslate">GML</span>中稍微复杂的程序。你能猜到它是做什么的吗？</p>
  <p><img alt="DnD Final Code Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_FinalCode.png" /></p>
  <p>或。</p>
  <p class="code">if mouse_check_button_pressed(mb_left) == true<br>
    <br> {<br>
    <br> x = mouse_x<br>
    <br> y = mouse_y<br>
    <br> image_blend = c_red;<br>
    <br> }<br>
    <br> else
    <br>
    <br> {<br>
    <br> if mouse_check_button_released(mb_left) == true<br>
    <br> {<br>
    <br> image_blend = c_white;<br>
    <br> }<br>
    <br> }</p>
  <p><a class="expandspot" data-rhwidget="ExpandSpot" data-target="expanding" href="What_Is_Programming_.htm#">扰流板</a><span class="expandtext" data-targetname="expanding">上述代码首先检查是否有鼠标按钮被按下（鼠标<strong>左键 </strong>，用常量 &quot; <span class="inline">mb_left</span>&quot; 定义）。
    如果它被按下，那么它将运行代码的实例移动到当前的鼠标位置（用内置变量 &quot; <span class="inline">mouse_x</span>&quot; 和 &quot; <span class="inline">mouse_y</span>&quot; 定义），并且
    也将实例的混合颜色设置为<strong>红色</strong>。如果鼠标按钮没有被按下，那么它将检查鼠标按钮是否被<strong>释放</strong>，如果被释放，它将把实例的混合颜色重置为白色（注意
    我们再次使用一些内置的<strong>常量 </strong>--&quot; <span class="inline">c_red</span>&quot;和&quot; <span class="inline">c_white</span>&quot;--来轻松定义颜色）。)</span>
  </p>
  <p> </p>
  <p>希望你现在对编程有了更多的了解，所以让我们继续探索<span class="notranslate">GameMaker Studio 2 IDE，</span> <a class="glossterm" data-glossterm="IDE" href="#">看看</a>如何添加资产，如精灵<em>和 </em>
   <em>对象 </em>等资产，以及其他你的游戏需要的重要资源。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回:<a href="../Content.htm">索引</a></div>
        <div style="float:right">下一步。<a href="Creating_Sprites.htm">创建精灵</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
What is Programming?
Quick Start: Programming
-->
  <!-- TAGS
qs_programming
-->
</body>
</html>