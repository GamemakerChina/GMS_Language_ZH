<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>创建扩展</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="详细说明如何创建通用扩展的页面" />
  <meta name="rh-index-keywords" content="扩展-创建扩展" />
  <meta name="search-keywords" content="创建扩展" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>创建扩展</h1><p>要创建扩展，您首先需要右键单击<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" />在资源浏览器上，然后选择<strong>创建扩展</strong>。这将打开主扩展属性窗口：</p><p><img alt="Extension Properties" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions.png" />现在就可以添加所需的文件和功能了，还可以在此处给扩展名起一个名字（遵循通常的字母/数字约定，除了下划线“ _”以外，没有特殊符号）。您还可以根据需要设置扩展的版本号。</p><p>要将文件添加到新扩展名，您需要单击菜单图标<img alt="Estension Options Icon" class="icon" src="../../assets/Images/Icons/Icon_ExtensionMenu.png" />并选择一个占位符文件或目标平台所需的实际文件：</p><p class="dropspot"><img alt="Add Files To An Extension" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_Files.png" /></p><p> “通用”占位符是可以是任何类型的文件，但特定平台要求的文件除外（因此 <span class="inline">DLL</span>或者 <span class="inline">SO </span>例如文件），它将仅用作“链接器”文件来连接具有给定扩展名的一组函数或常量（通常仅用于<span class="notranslate">iOS</span>和<span class="notranslate">Android</span>扩展名，这在本节中进行了说明）这些目标）。您还可以添加“ <span class="notranslate">GML</span> ”和“ JS”占位符文件以用于更特定的用途。</p><p> <span class="notranslate">iOS</span>和<span class="notranslate">Android</span>构建版本，否则就不需要使用占位符，因此您可以选择“<em>添加文件”</em>选项来添加以下任何文件，具体取决于它们所针对的目标平台：</p><ul class="colour"><li class="dropspot"><span class="inline">.gml</span> ：这是仅使用<span class="notranslate">GameMaker Language</span>制作的文件，并且与所有平台兼容。</li><li class="dropspot"><span class="inline">.js</span> ：这是JavaScript扩展格式，仅与JS目标模块（HTML5）兼容。</li><li class="dropspot"><span class="inline">.dll</span> ：此动态链接库扩展格式，仅与<span class="notranslate">Windows</span> ，UWP和Xbox One目标兼容（每个目标都需要一个不同的目标 <span class="inline">*.dll</span>文件与其规格兼容）。</li><li class="dropspot"><span class="inline">.dylib</span> ：这与DLL在Mac上等效，并且仅与Mac目标（不与<span class="notranslate">iOS</span> ）兼容。</li><li class="dropspot"><span class="inline">.so</span> ：这<span class="notranslate">Linux</span> ，并且仅与<span class="notranslate">Ubuntu</span> （ <span class="notranslate">Linux</span> ）目标兼容。</li><li class="dropspot"><span class="inline">.prx</span> ：这是用于添加功能PS4目标的文件格式（每个目标都需要一个不同的 <span class="inline">*.prx</span>文件与其规格兼容）。</li></ul><p>您会注意到， <strong><span class="notranslate">Android</span></strong>和<strong><span class="notranslate">iOS</span></strong>没有文件类型，这是因为它们的设置略有不同。在下面的内容中，您可以找到有关如何设置它们的说明，但首先让我们看一下<span class="notranslate">GML</span>扩展，因为所有平台的过程都相同。</p><p>首先，您需要创建将要使用的文件。对于<span class="notranslate">GML</span>扩展名，这将是一个文本文件（与 <span class="inline">.gml</span>扩展名），其格式如下：</p><p class="code">#define c_alice_blue<br/> return make_color_rgb(240,248,255);<br/>
    <br/>
    <br/> #define instance_create_colour<br/> var i = instance_create_layer(argument0, argument1, argument2);<br/> with (i)<br/>     {<br/>     image_blend = argument3;<br/>     }<br/> return i;</p><p>如您所见，我们以每个部分开头 <span class="inline">#define</span>调用，在上面的示例中用于定义两个函数。您不需要为函数提供参数字段，因为稍后会添加该参数字段，只需使用define然后定义函数名称，然后添加<span class="notranslate">GML</span>即可匹配。如果您正在编写DLL或JS扩展名，则过程将类似，但扩展名文件格式的语言正确。</p><p>完成此操作后，需要将文件添加到扩展名（上面已说明），这会将新窗口链接到文件属性的扩展名属性：</p><p class="dropspot"><img alt="File Property Window" class="center" height="553" src="../../assets/Images/Asset_Editors/Editor_Extensions_FileProperties.png" width="1050" /></p><p>在这里，您将选择扩展的目标平台（对于GM，则将其全部选中），并重命名扩展文件并设置其他一些细节，我们稍后将介绍。 <span class="notranslate">GML</span>文件中包含的功能自动填充编辑器，但是如果没有，则可以通过单击功能菜单按钮来添加它们<img alt="Estension Options Icon" class="icon" src="../../assets/Images/Icons/Icon_ExtensionMenu.png" />并选择您需要的内容：</p><p class="dropspot"><img alt="Add functions/Constants To An Extension" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_AddFunctions.png" /></p><p>然后，选择“<em>添加功能”</em>将允许您向扩展中添加功能，然后可以像在任何内置功能中一样<span class="notranslate">GameMaker Studio 2</span><span>添加功能后，将打开以下窗口，供您在其中定义功能属性（或双击该功能以将其打开）：</span></p><p class="dropspot"><img alt="Function Editor" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_FunctionEditor.png" /></p><p>在上图中，我们在函数编辑器中填充了函数的详细信息 <span class="inline">instance_create_colour()</span>我们在<span class="notranslate">GML</span>扩展脚本中定义的功能（函数编辑器不仅用于定义<span class="notranslate">GML</span>函数，而且对于任何其他扩展类型也将相同）。您可以看到我们给函数指定了一个名称，这就是您在项目中使用该函数时要调用的名称，并且该名称不必与扩展名中使用的名称匹配-您可以将其设置为所需的任何名称，然后然后使用“<em>外部名称”</em>选项将其链接到扩展名中定义的实际名称。在其下面，您可以使用一个部分来定义“<em>帮助”</em>文本，这是将在代码完成弹出窗口中使用的文本，而在代码编辑器底部的帮助器文本。</p><p>接下来，您可以定义<em>Return Type</em> ，它可以是<strong>双精度</strong>（<a class="glossterm" data-glossterm="浮点" href="#">浮点数</a>）或字符串-如果外部函数没有返回任何内容，那么这没关系-然后在其中定义函数将要使用的参数拿。</p><p>参数可以是<strong>双精度</strong>或<strong>字符串</strong>，您可以通过单击添加按钮来添加它们<img alt="Add Argument Icon" class="icon" height="18" src="../../assets/Images/Icons/Icon_AddArgument.png" width="18" />并通过点击删除按钮将其删除<img alt="Remove Argument Icon" class="icon" src="../../assets/Images/Icons/Icon_RemoveArgument.png" />。如果您的函数可以使用可变参数，则还应确保选中底部<em>的“可变长度参数”复选框。</em></p><p class="note"><strong>注意</strong>：如果要创建<span class="notranslate">Windows</span> <span class="inline">dll </span>文件，它有四个以上的参数，<strong>所有参数必须具有相同的类型</strong>。</p><p>完成所有这些操作后，该功能就可以在项目中使用了，它会自动完成显示，并用颜色编码。也可以将定义的函数设置为<strong>Init Functions</strong>或<strong>Final Functions</strong> ，这意味着它们将在游戏开始时（Init）和游戏结束时（Final）自动调用。</p><p class="note"><strong>重要的！</strong>所有平台都支持Init函数调用，<strong>但并非所有平台都将执行Final函数调用。</strong>这是因为某些平台会简单地关闭应用程序，而不会给出任何通知或时间来调用此函数。受此影响的平台是： <strong><span class="notranslate">iOS</span></strong> ， <strong><span class="notranslate">Android</span></strong> ， <strong>HTML5</strong> ， <strong>PlayStation</strong>和<strong>XboxOne</strong> 。</p><p>您还有另一个选择是创建一个<strong>Macro</strong> 。宏可以是<a class="glossterm" data-glossterm="持续的" href="#">常</a>数值，也可以是单个代码段（有关宏的更多信息，请参见此处）。例如，我们可以从<span class="notranslate">GML</span>扩展中删除颜色c_alice_blue的已定义函数，并将其设置为宏。要制作宏，只需在“扩展属性”窗口中单击“宏”按钮：</p><p class="dropspot"><img alt="Macro Editor" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_MacroEditor.png" /></p><p>这里的编辑器很容易解释-您给出了宏/常量的名称和值，或一小段代码。请注意，如果宏是一行代码<strong>，则每次调用该宏时都会对其进行评估</strong>。</p><p>当使用多个目标平台时，值得注意的是，您可以创建仅具有一组功能/宏的单个扩展，这些功能/宏将在<em>所有</em>平台上运行。通过仅将一个链接库添加到您的游戏中作为扩展并将其他（一个或多个）链接库<strong>从“扩展属性”</strong>窗口<strong>放入“代理文件</strong>”列表中，即可实现此目的。例如，假设您有一个<span class="notranslate">Windows</span>扩展程序，其中包含 <span class="inline"> <strong>dll </strong></span>” <span class="inline">Haggis.dll</span> “。您只需复制此内容 <span class="inline"> <strong>dll</strong></span>作为Mac <span class="inline"> <strong>DyLib</strong></span> ，命名为“ <span class="inline"> <strong>libHaggis.dylib</strong></span>并确保内部函数名称与原始<span class="notranslate">Windows</span> <span class="inline"> <strong>dll</strong></span> 。这<strong> <span class="inline">DyLib</span></strong>然后将其添加到代理文件中，并设置为在Mac目标上运行游戏时导出，并且<span class="notranslate">GameMaker Studio 2</span>将在调用扩展功能时自动使用它。</p><p>要添加代理文件，只需点击<img alt="Add Argument Icon" class="icon" height="18" src="../../assets/Images/Icons/Icon_AddArgument.png" width="18" />扩展名的“扩展名属性”窗口中的按钮，并浏览到文件位置。添加游戏后，您可能需要将扩展目标更改为适当的模块，并且在您下次运行游戏时，它将作为该平台的代理。您也可以通过单击<img alt="Remove Argument Icon"
      class="icon" src="../../assets/Images/Icons/Icon_RemoveArgument.png" />按钮，每按一下将删除列表中的最后一个。</p><p>添加代理文件后，它们将存储在游戏的项目文件中的Extensions文件夹中（您可以通过右键单击轻松找到它们<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" />在扩展名上，然后选择<em>在浏览器中打开</em>），因此，如果需要对其进行编辑，则应编辑与游戏捆绑在一起的复制文件，而不是原始文件，因为<span class="notranslate">GameMaker Studio 2</span>将使用项目中的文件进行编译。</p><p>代理文件必须遵循以下列出的命名约定，这一点非常重要，因为<span class="notranslate">GameMaker Studio 2</span>将解析这些名称，并根据文件的扩展名和名称为其分配目标模块，并自动为您链接文件。如果您不遵循这些约定，则您的游戏可能无法在<span class="notranslate">runtime</span> ，因为<span class="notranslate">GameMaker Studio 2</span>将无法计算出要使用的文件或无法正确加载该文件。</p><p>每个目标平台的命名约定如下：</p><p class="dropspot"></p><table><tbody><tr><th style="">平台</th><th style="">名字</th></tr><tr><td style=""><span class="notranslate">Windows</span> 32位<span class="notranslate">Runtime</span></td><td style=""><span class="inline">&lt;<em>Name</em>&gt;.dll, lib&lt;<em>Name</em>&gt;.dll</span></td></tr><tr><td style=""> <span class="notranslate">Windows</span> 64位<span class="notranslate">Runtime</span></td><td style=""><span class="inline">&lt;N<em>ame</em>&gt;_x64.dll, lib&lt;<em>Name</em>&gt;_x64.dll</span></td></tr><tr><td style=""> <span class="notranslate">Ubuntu</span> （ <span class="notranslate">Linux</span> ）</td><td style=""><span class="inline">&lt;<em>Name</em>&gt;.so, lib&lt;<em>Name</em>&gt;.so, &lt;<em>Name</em>&gt;_linux.so, lib&lt;<em>Name</em>&gt;_linux.so</span></td></tr><tr><td style=""> <span class="notranslate">macOS</span></td><td style=""><span class="inline">&lt;<em>Name</em>&gt;.dylib, lib&lt;Name&gt;.dylib</span></td></tr><tr><td style=""> HTML5</td><td style=""><span class="inline">&lt;<em>Name</em>&gt;.js</span></td></tr><tr><td style=""> PS4</td><td style=""><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt; <em>Name</em>&gt;.prx, &lt; <em>Name</em>&gt;_ps4.prx, lib&lt; <em>Name</em>&gt;_ps4.prx</span></td></tr><tr><td style=""> <span class="notranslate">XBox One</span></td><td style=""><span class="inline">&lt;<em>Name</em>&gt;_xboxone.dll</span></td></tr></tbody></table><p class="dropspot"></p><p>使用上述约定，您可以换掉 <span class="inline">&lt;<em>Name</em>&gt;</span>部分，您要为其添加代理文件的基本文件的名称。 </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">返回：<a href="../Extensions.htm">扩展编辑器</a></div><div style="float:right">下一页： <a href="Android_Extensions.htm"><span class="notranslate">Android</span>扩展</a></div></div></div><h5><span data-keyref="Copyright Notice">©版权所有<span class="notranslate">YoYo Games Ltd.</span> 2021保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Creating Extensions
-->
  <!-- TAGS
extensions_create
-->
</body>
</html>