<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>录音</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="详细说明“音频录制”异步事件的页面。" />
  <meta name="rh-index-keywords" content="对象-异步音频录制事件" />
  <meta name="search-keywords" content="录音,ev_audio_recording" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1>录音</h1><p><img alt="Audio Recording Event" class="center" src="../../../assets/Images/Asset_Editors/Async_AudioRecording.png" />此事件只能由<a href="../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_start_recording.htm"><span class="inline">audio_start_recording()</span></a>函数，并返回存储在变量中<a href="../../../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">的DS Map</a> <a href="../../../GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/async_load.htm"><span class="inline">async_load</span></a> ，其中包含不同的键/值对，具体取决于触发事件的函数<a class="glossterm" data-glossterm="打回来" href="Dialog.htm#">的回调。</a></p><p> ds_map中将提供以下键：</p><ul class="dropspotlist"><li class="dropspot"> ”<span class="inline">buffer_id</span> “-可以用来检索音频数据<a href="../../../GameMaker_Language/GML_Reference/Buffers/Buffers.htm">的临时缓冲区的ID</a></li><li class="dropspot"> ”<span class="inline">channel_index</span> “-此数据来自调用函数返回的记录通道索引</li><li class="dropspot">”<span class="inline">data_len</span> “-您收到的数据长度（以字节为单位）</li></ul><p class="note"><strong>注意</strong>：如本页开头所述，变量<span class="inline" style="font-size: 14px">async_load</span>仅在异步事件中有效，因为指向的DS映射是在事件开始时创建的，然后在末尾再次删除。但是，请注意，在事件结束时还将删除所有音频与地图一起存储的临时缓冲区，因此，如果要保留它以备后用，则应将其复制到自定义缓冲区。</p><p>在下面的用法示例中，我们将创建一个自定义缓冲区来存储录制的音频，还将游戏设置为从输入源0录制：</p><p class="code">channel_index = audio_start_recording(0);<br/> audio_buffer = buffer_create(len, buffer_fast, 1);</p><p>现在，检测到录制的每个游戏步骤都会触发一个异步音频录制事件，您可以在其中处理录制的输入，如下所示：</p><p class="code">var channel = async_load[? &quot;channel_index&quot;];<br/> if channel == channel_index<br/>    {<br/>    len = async_load[? &quot;data_len&quot;];<br/>    buffer_copy(async_load[? &quot;buffer_id&quot;], 0, len, audio_buffer, 0);<br/>    }</p><p>在这里，我们只是检查“ channel_index”键以确保它与开始记录时返回的值匹配，如果匹配，则将为此事件创建的临时缓冲区的内容复制到我们的自定义缓冲区中。之后，您可以使用自定义缓冲区执行所需的操作-您可以使用专用的缓冲区音频功能播放它，可以对其进行处理并通过网络发送，还可以将其保存到磁盘中...录制了音频之后在缓冲区中，您基本上可以做任何您想做的事情。 </p><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">返回：<a href="../Async_Events.htm">异步事件</a></div><div style="float:right">下一篇：<a href="Cloud.htm">云</a></div></div></div><h5><span data-keyref="Copyright Notice">©版权所有<span class="notranslate">YoYo Games Ltd.</span> 2021保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Asynchronous Audio Recording Event
ev_audio_recording
-->
  <!-- TAGS
ev_audio_recording
-->
</body>
</html>