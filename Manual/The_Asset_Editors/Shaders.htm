<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Shaders</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="详细说明shader编辑器如何工作的页面" />
  <meta name="rh-index-keywords" content="Shader器编辑器" />
  <meta name="search-keywords" content="shaders,shader,打开GL,开放式GL ES" />
</head>
<body><!--<div class="body-scroll" style="top: 150px;">--><h1> <span class="notranslate">Shader</span>器编辑器</h1><p><img alt="Shader Editor" class="center" src="../assets/Images/Asset_Editors/Editor_Shaders.png" /><span class="notranslate">Shaders</span>是一种非常强大的工具，可用于处理游戏渲染到屏幕上的图形，从而实现令人难以置信的快速效果，例如，可以向精灵添加微妙的色相，直至全屏失真效果。但是什么是<span class="notranslate">shader</span> ？</p><p> <span class="notranslate">shader</span>基本上是一个由两部分组成的程序，直接在图形卡本身上运行，由于GPU完成了所有工作并为您的游戏代码释放了CPU周期，因此着色程序非常快。完整的<span class="notranslate">shader</span>由一个顶点<span class="notranslate">shader</span>程序和一个片段<span class="notranslate">shader</span>程序（也称为像素<span class="notranslate">shader</span> ）组成。这两个微型程序都可以一起工作，以操纵图形卡在屏幕上呈现的内容。然后，这允许您实时操作实际<a class="glossterm" data-glossterm="呈现" href="#">渲染</a><a class="glossterm" data-glossterm="显示缓冲区" href="#">到显示缓冲区</a>上的位置，颜色和Alpha值。</p><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">顶点<span class="notranslate">Shader</span></a></p><div class="droptext" data-targetname="drop-down"><p class="dropspot"> “顶点<span class="notranslate">Shader</span>是渲染管线中的可编程<span class="notranslate">shader</span>阶段，用于处理单个顶点（用于渲染任何图像的三角形的点）的处理，以及在渲染几何图形（例如精灵或曲面）时使用的<span class="notranslate">GameMaker Studio 2</span><strong>创建一个称为“顶点缓冲区”</strong>的顶点流，该顶点流定义了这些三角形的几何形状。例如，一个精灵将具有两个三角形（通常称为<em>多边形</em>）的几何图形，这些几何图形一起渲染以形成一个“四边形”。来自“顶点缓冲区”的顶点流将作为输入提供给“顶点<span class="notranslate">Shader</span> ，后者可以以可编程方式处理顶点数据。 GPU使用“顶点<span class="notranslate">Shader</span>输出来组装三角形，然后将其正确裁剪并剔除到视口和观察相机，然后发送到GPU的光栅化器块，以生成新的输出流，该输出流由称为的东西组成<strong>碎片</strong>。这些都是微小的数据结构，每个数据结构都与出现在屏幕上的单个像素有关。</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">片段<span class="notranslate">Shader</span></a></p><div class="droptext" data-targetname="drop-down1"><p class="dropspot">片段<span class="notranslate">Shader</span>是渲染管道中的可编程<span class="notranslate">shader</span>阶段，用于处理“片段”（用于对任何给定多边形进行纹理化的插值像素），并且它们负责输出每个渲染三角形像素的最终像素颜色。基本上它是这样工作的：“片段<span class="notranslate">Shader</span> <span class="notranslate">Shader</span>沿着管道传递的片段（正在渲染的三角形的各个像素）作为输入。然后，它可以处理这些片段，以更改将绘制到屏幕上的最终目标像素的颜色和Alpha。</p></div><p></p><p> <span class="notranslate">shaders</span>实际工作方式以及它们在图形管道中的位置的完整概述，不在本文讨论范围之内，但是您可以在此处找到简化的指南：</p><p></p><ul class="colour"><li> <a href="../Additional_Information/Guide_To_Using_Shaders.htm"><span class="notranslate">Shaders</span>使用指南</a></li></ul><p></p><p><span class="notranslate">YoYo Games</span> Tech博客上有许多文章，其中有很多更详细的内容，您可以从以下链接中进行访问：</p><p></p><ul class="colour"><li> <a href="https://www.yoyogames.com/blog/14/shaders-overview-part-1"><span class="notranslate">Shaders</span>第1部分</a></li><li><a href="https://www.yoyogames.com/blog/16/shaders-overview-part-2"><span class="notranslate">Shaders</span>第2部分</a></li><li><a href="https://www.yoyogames.com/blog/17/shaders-overview-part-3"><span class="notranslate">Shaders</span>第3部分</a></li><li><a href="https://www.yoyogames.com/blog/18/shaders-overview-part-4"><span class="notranslate">Shaders</span>第4部分</a></li></ul><p></p><p><span class="notranslate">GameMaker Studio 2</span>支持以下<span class="notranslate">shader</span>语言：</p><p></p><table><tbody><tr><th> <span class="notranslate">Shader</span>语言</th><th>目标平台</th></tr><tr><td><strong>GLSL ES</strong></td><td>所有目标平台</td></tr><tr><td><strong>GLSL</strong></td><td> Mac和<span class="notranslate">Ubuntu</span> （ <span class="notranslate">Linux</span> ）</td></tr><tr><td> <strong>HLSL 11</strong></td><td> <span class="notranslate">Windows</span> ，UWP，XboxOne</td></tr><tr><td><strong>密码</strong></td><td><span class="notranslate">Playstation 4</span></td></tr></tbody></table><p></p><p>要创建<span class="notranslate">shader</span>资源，只需右键单击<img alt="RMB Icon" class="icon" src="../assets/Images/Icons/Icon_RMB.png" />在<a href="../Introduction/The_Asset_Browser.htm">Asset Browser上，</a>然后选择<em>Create <span class="notranslate">Shader</span></em> 。创建基础<span class="notranslate">shader</span> ，即可使用鼠标右键<img alt="RMB Icon" class="icon" src="../assets/Images/Icons/Icon_RMB.png" />在继续编辑代码之前，在新资源上的菜单中选择<span class="notranslate">shader</span></p><p><img alt="Shader Editor RMB Menu" class="center" src="../assets/Images/Asset_Editors/Editor_Shader_RMBMenu.png" /> <span class="notranslate">shader</span> ，代码编辑器本身分为两个“程序”（顶点和片段），每个都可以从编辑器顶部的选项卡中获得。两者都是一次创建的，因为<em>没有两个部分就无法创建<span class="notranslate">shader</span></em> 。即使您只希望使用片段<span class="notranslate">shader</span> ，也必须首先创建“通过”顶点<span class="notranslate">shader</span> ，这就是为什么默认情况下，任何<span class="notranslate">shader</span>都将具有已经为您编码的顶点和片段通过<span class="notranslate">shader</span>在页面顶部的屏幕截图中，您可以看到我们使用了代码编辑器窗格视图来并排显示这两个窗口……在同时使用两个<span class="notranslate">shader</span>程序时很有用）。</p><p>值得注意的是，您可以在<em>所有</em>目标平台<span class="notranslate">shaders</span> <strong>，但是要使它们在HTML5</strong>目标平台上运行，必须在<a href="../Settings/Game_Options/HTML5.htm">HTML5游戏选项中</a>启用WebGL，否则它们将不起作用。</p><p> <span class="notranslate">shader</span>功能以及如何在<span class="notranslate">GameMaker Studio 2</span>使用它们的更多详细信息，请参阅以下页面：</p><ul class="colour"><li> <a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm"><span class="notranslate">Shader</span>的功能</a>-的<span class="notranslate">GML</span>参考部分<span class="notranslate">shaders</span> 。</li><li> <a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm"><span class="notranslate">Shader</span>常数</a><span class="notranslate">GameMaker Studio 2</span>内置的常数，可在编写<span class="notranslate">shaders</span>时使用。</li><li> <a href="http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf">GLSL ES规范</a><span class="notranslate">GameMaker Studio 2</span>使用的Open GL ES <span class="notranslate">Shader</span>语言规范的PDF文件。</li><li> <a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-reference">HLSL语言参考</a>-使用HLSL的Microsoft参考页面。</li><li><a href="http://twvideo01.ubm-us.net/o1/vault/gdceurope2013/Presentations/825424RichardStenson.pdf">PSSL语言演示</a>-演示格式的PSSL语言概述。 </li></ul><p></p><p></p><p></p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">返回：<a href="The_Asset_Editors.htm">资产编辑器</a></div><div style="float:right">下一步：<a href="Sounds.htm">声音</a></div></div></div><h5><span data-keyref="Copyright Notice">©版权所有<span class="notranslate">YoYo Games Ltd.</span> 2021保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
The Shader Editor
Shaders
OpenGL ES
HLSL
PSSL
-->
  <!-- TAGS
shader_editor
-->
</body>
</html>