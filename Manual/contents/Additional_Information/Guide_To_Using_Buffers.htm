<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>缓冲器使用指南</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how buffers work" />
  <meta name="rh-index-keywords" content="Guide To Using Buffers" />
  <meta name="search-keywords" content="Using Buffers,buffers" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>缓冲器使用指南</h1>
  <p>缓冲区（在编程中）基本上是系统内存中的一个空间，用于存储任何东西的小数据包（例如：数据传输、碰撞、颜色数据等...）。由于它被保存在系统内存中，所以访问速度非常快。
    缓冲区一般用于非常短期的存储，比如在处理网络信息之前接收网络信息，或者用于存储游戏中的检查点（这在本页下面的例子中有解释）。</p>
  <p><img alt="Buffer Memory" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Buffer_Memory.png">缓冲区是通过在系统内存中分配一个空间来创建的，计算单位是<a class="glossterm" data-glossterm="字节" href="#">字节</a>
   <span class="glossextra">s</span>，然后为你的游戏保留空间，只要你的游戏在运行，或者直到你使用适当的函数删除缓冲区（你可以<a href="../GameMaker_Language/GML_Reference/Buffers/Buffers.htm">在这里</a>找到所有<span class="notranslate">GML</span>缓冲区的函数）。
      这意味着，即使你的游戏不在焦点上（例如，在移动设备上，当你接电话时，游戏将被放到后台），缓冲区仍然存在，但是如果游戏被关闭或重新启动，缓冲区就会丢失。</p>
  <p class="note"><strong>注意</strong>：重启游戏不会清除或删除缓冲区！但它会阻止对先前创建的缓冲区的进一步访问，因为ID句柄会丢失，导致内存泄漏，最终会使游戏崩溃。但它会阻止对先前创建的缓冲区的任何进一步访问，因为ID句柄已经丢失，导致内存泄漏，最终会使你的游戏崩溃。
    因此，当重新启动游戏时，记得先删除任何缓冲区。</p>
  <p><span class="notranslate">GameMaker Studio 2</span>允许创建四种不同的缓冲区类型。原因是缓冲区被设计成高度优化的临时存储介质，因此你应该创建一个适合你希望存储的数据类型的缓冲区
    因此，你应该创建一个适合你希望它存储的数据类型的缓冲区，否则你可能会出错或导致你的代码出现瓶颈。在进一步解释之前，让我们看看四种可用的缓冲区类型（<strong>在GML中 </strong>定义为<strong>常数 </strong>）<span class="notranslate">。</span></p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>恒定</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="inline">buffer_fixed</span></td>
        <td><br> 一个以字节为单位的固定大小的缓冲区。这个大小是在创建缓冲区时设置的，不能再改变。</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_grow</span></td>
        <td><br> 一个缓冲区，它将随着数据的增加而动态地<i>增长</i>。你创建它时有一个初始大小（应该是预期要存储的数据的近似大小），然后它将扩展以接受超出这个初始大小的进一步数据
          这个初始大小。</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_wrap</span></td>
        <td><br> 一个缓冲区，数据将被<i>包裹起来</i>。当被添加的数据达到缓冲区大小的极限时，被覆盖的数据将被放回缓冲区的起点，并从该点继续写下去。</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_fast</span></td>
        <td><br> 这是一个特殊的 &quot;精简 &quot;缓冲区，读/写速度极快。但是它只能用于 <span class="inline"><tt>buffer_u8</tt></span> 数据类型，而且必须是1字节对齐。关于<b>数据类型</b>和字节<b>对齐</b>的信息可以在本页面下边找到）。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>这些是你在使用<span class="notranslate">GameMaker Studio 2</span>时可用的缓冲区类型，你选择哪种类型在很大程度上取决于你想把它用在什么地方。例如，增长型缓冲区将用于存储数据的 &quot;快照&quot;，以创建一个
    或者当你知道你所处理的数值都在0到255或者-128到127之间时，就可以使用快速缓冲区，例如在处理图像的ARGB数据时。
    例如在处理图像的<a class="glossterm" data-glossterm="ARGB" href="#">ARGB</a>数据时。</p>
  <p><img alt="Buffer Types" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Buffer_Types.png">当创建一个缓冲区时，你应该总是尝试创建一个适合该类型的大小，一般规则是
    缓冲区的创建应该满足它所要存储的数据的最大尺寸，如果有疑问，使用增长缓冲区来防止覆盖错误。</p>
  <p>创建缓冲区的实际代码看起来是这样的。</p>
  <p class="code">player_buffer = buffer_create(16384, buffer_fixed, 2);</p>
  <p><br> 这将创建一个16384字节的固定缓冲区，字节对齐为2，该函数返回一个唯一的ID值，存储在一个变量中，以便以后引用这个缓冲区。</p>
  <p>当读和写数据到缓冲区时，你是以 &quot;数据类型 &quot;定义的数据 &quot;块 &quot;进行的。数据类型 &quot;设定了在缓冲区内分配给被写入值的字节数，这一点至关重要
    否则你的代码会得到一些非常奇怪的结果（甚至是错误）。</p>
  <p>缓冲区是<strong>按顺序</strong>写入（和读出）的，即一段数据是在另一段数据之后写入的，每段数据都是一个固定的类型。这意味着，你最好知道你正在向缓冲区写入什么数据
    在任何时候都是如此。这些数据类型在<span class="notranslate">GML</span>中由以下常数定义。</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>数据类型 常数</th>
        <th>字节数</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="inline">buffer_u8</span></td>
        <td>1</td>
        <td><br> 一个无符号、8位的整数。这是一个从0到255的正值。</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s8</span></td>
        <td>1</td>
        <td><br> 一个有符号的、8位的整数。这可以是一个正值或负值，范围从-128到127（0被视为正值）。</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u16</span></td>
        <td>2</td>
        <td><br> 一个无符号、16位的整数。这是一个从0-65,535的正值。</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s16</span></td>
        <td>2</td>
        <td><br> 一个有符号的、16位的整数。这可以是一个从-32,768到32,767的正值或负值（0被认为是正值）。</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f16</span></td>
        <td>2</td>
        <td><br> 一个16位的浮点数字。这可以是+/-65504范围内的正值或负值。<b>(目前不支持！)</b></td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u32</span></td>
        <td>4</td>
        <td><br> 一个无符号、32位的整数。这是一个从0到4,294,967,295的正值。</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s32</span></td>
        <td>4</td>
        <td><br> 一个有符号的、32位的整数。这可以是一个从-2,147,483,648到2,147,483,647的正值或负值（0被归类为正值）。</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f32</span></td>
        <td>4</td>
        <td><br> 一个32位的浮点数字。这可以是+/-16777216范围内的正值或负值。</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u64</span></td>
        <td>8</td>
        <td><br> 一个64位无符号整数值。<b>(目前不是所有的缓冲区函数都支持！)</b></td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f64</span></td>
        <td>8</td>
        <td><br> 一个64位的浮点数字。</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_bool</span></td>
        <td>1</td>
        <td><br> 一个布尔值。只能是1或0<tt>（真</tt>或<tt>假</tt>）。</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_string</span></td>
        <td>不适用</td>
        <td><br> 这是一个UTF-8空尾的（0x00）字符串。基本上，一个<span class="notranslate">GameMaker</span>字符串被倾倒在缓冲区中，并在最后加上一个0。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>因此，假设你已经创建了一个缓冲区，并且你想向其写入信息，那么你将使用类似以下代码的东西。</p>
  <p class="code">buffer_write(buff, buffer_bool, global.Sound);<br> buffer_write(buff, buffer_bool, global.Music);<br> buffer_write(buff, buffer_s16, obj_Player.x);<br> buffer_write(buff, buffer_s16, obj_Player.y);<br> buffer_write(buff, buffer_string, global.Player_Name) 。</p>
  <p>看了上面的例子，你可以看到你可以同时向缓冲区写入不同类型的数据（当使用<em>快速 </em>缓冲区类型时，你只限于特定的数据类型），这些数据将被依次加入缓冲区内
    尽管它在缓冲区中的实际位置将取决于它的字节对齐，下面将解释）。从缓冲区中读取信息也是如此，在上面的例子中，你将以相同的顺序从缓冲区中读取数据
    读取数据，检查数据类型是否相同，例如</p>
  <p class="code">global.Sound = buffer_read(buff, buffer_bool);<br> global.Music = buffer_read(buff, buffer_bool);<br> obj_Player.x = buffer_read(buff, buffer_s16);<br> obj_Player.y = buffer_read(buff, buffer_s16);<br> global.Player_Name = buffer_read(buff, buffer_string) 。</p>
  <p>正如你所看到的，你读出信息的顺序与你读入缓冲区的顺序相同。关于如何从缓冲区添加和删除数据的进一步信息，请看下面给出的例子。</p>
  <p>如果你一直在阅读这个页面，你会看到关于缓冲区的<strong>字节对齐 </strong>的参考。这基本上是指新数据在一个给定的缓冲区中的存储位置。它是如何工作的呢？嗯，对于一个单
    字节对齐的缓冲区，每块数据都是按顺序写入缓冲区的，每块新数据都是直接加在前一块数据之后。然而，一个2字节对齐的缓冲区会将每条数据写入2字节的间隔，因此，即使
    你最初写的是1个字节的数据，下一次写的时候会被移到2个字节的位置。</p>
  <p><img alt="Buffer Byte Alignment" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Buffer_Byte_Alignment.png">所以，如果你的字节对齐设置为，比如说，4个字节，你写了一个1字节大小的数据，然后做了一个缓冲区的告诉（告诉会得到缓冲区读/写的当前位置），你会得到一个1字节的偏移量（这里的偏移量是指从缓冲区开始的字节数
    大小，然后做一个缓冲区<strong>告诉 </strong>（告诉可以得到缓冲区当前的读/写位置），你会得到一个<strong>1字节的偏移量 </strong>（这里的偏移量是指从缓冲区的开始到
    当前读/写的位置）。)</p>
  <p>但是，如果你写另一个数据，也是1个字节大小，<em>然后 </em>做一个缓冲区告诉，你会得到一个5个字节的偏移量（尽管你只写了2个字节的数据），因为对齐方式已经把数据填充到4个字节的位置上了
    缓冲区对齐。</p>
  <p>基本上，这意味着对齐方式只影响事物被写入的<em>位置 </em>，所以如果你在写完东西后做一个缓冲区告诉，它将返回当前的写入位置，紧接着你之前的数据
    写入的数据。但是请注意，如果你接着写另一个数据，在内部，缓冲区将把写的位置移动到对齐尺寸的下一个倍数，然后再实际写下这段数据。</p>
  <p>下面我们有几个例子说明如何在项目中使用缓冲区。</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">缓冲区检查点</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">一个简单的例子是，在任何平台的<span class="notranslate">GameMaker Studio 2</span>游戏中，都可以使用缓冲区，该函数为 <a href="../GameMaker_Language/GML_Reference/General_Game_Control/game_save_buffer.htm"><span class="inline">game_save_buffer()</span></a>.
      这个函数将获取当前游戏状态的 &quot;快照&quot;，并将其保存到一个预定义的缓冲区，然后可以从该缓冲区读取，以再次加载该点的游戏。</p>
    <p class="note"><strong>注意</strong>：这个功能非常有限，它是为初学者设计的，以便快速建立和运行一个检查点系统，但更高级的用户可能更愿意使用文件功能来编码他们自己的系统，因为事实上
      游戏不会保存任何你可以在运行时创建的动态资源，如数据结构、表面、添加的精灵等等。</p>
    <p class="dropspot">我们需要做的第一件事是创建一个新的对象来控制保存和加载，所以你要做一个对象并给它一个<strong>创建事件</strong>。在这个事件中，你可以放置以下代码。</p>
    <p class="code">SaveBuffer = buffer_create(1024, buffer_grow, 1);<br> StateSaved = false;</p>
    <p class="dropspot">第一行创建了一个1024字节的增长缓冲区（因为我们不知道保存数据的最终大小），并对齐到1字节。然后创建一个变量来检查游戏是否已经被保存（这将用于加载）。</p>
    <p class="dropspot">接下来我们将添加一个<strong>按键事件</strong>（例如），在这个<strong>事件</strong>中我们将把当前的游戏状态保存到创建的缓冲区中。</p>
    <p class="code">StateSaved = true;<br> buffer_seek(SaveBuffer, buffer_seek_start, 0);<br> game_save_buffer(SaveBuffer) 。
    </p>
    <p class="dropspot">上面将首先把控制变量设置为 <span class="inline">true </span> （这样当我们把游戏保存到缓冲区时，这个变量就会被保存下来），然后在把当前的保存状态写入缓冲区之前，寻求到缓冲区的起点。为什么我们要用
      <a href="../GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm"><span class="inline">buffer_seek()</span></a>?好吧，正如本页已经提到的，你从最后一次添加数据到缓冲区的位置开始读写。这意味着
      如果你不把缓冲区的告诉值设置到开始的位置，那么当你保存时，你将在当前缓冲区的读/写位置把数据加入缓冲区。因此，我们使用函数 <span class="inline">buffer_seek()</span> ，把告诉移到
      到缓冲区的开始位置。</p>
    <p class="dropspot">我们现在已经把当前的游戏状态保存到一个缓冲区。下一步将是编写如何加载它的代码，可能在另一个<strong>按键事件</strong>中。</p>
    <p class="code">如果StateSaved<br> {<br> buffer_seek(SaveBuffer, buffer_seek_start, 0);<br> game_load_buffer(SaveBuffer);<br> }</p>
    <p class="dropspot">然后，游戏将在你放置上述代码的事件结束时被加载。</p>
    <p class="note"><strong>注意</strong>：这只是在同一个房间里使用，而不是在你的游戏关闭或重启后生成完整的保存游戏!</p>
    <p class="dropspot">最后要添加到控制器对象的是一些 &quot;清理 &quot;代码。缓冲区存储在内存中，因此，如果你不在使用完后进行清理，你可能会出现内存泄漏，最终会导致游戏滞后和崩溃。
      因此，你可能会添加一个<strong>房间结束事件</strong>（来自<strong>其他</strong>事件类别），其中包括。</p>
    <p class="code">buffer_delete(SaveBuffer)。</p>
    <p class="dropspot">现在可以把这个对象放到一个房间里，按一下键就可以从缓冲区保存和加载房间状态。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">网络缓冲区</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">在使用<span class="notranslate">GameMaker Studio 2</span> <a href="../GameMaker_Language/GML_Reference/Networking/Networking.htm">网络功能</a>时，你必须使用缓冲区来创建通过网络连接发送的数据包。这个例子
      打算展示如何做到这一点，但由于网络功能的范围，它只被设计用来展示如何使用缓冲区本身，而不是完整的网络系统。</p>
    <p class="dropspot">我们将展示的第一件事是为网络连接的客户端创建和使用一个缓冲区。这个缓冲区将被用来创建小的数据包，然后发送给服务器。
      实例的创建事件中，我们将指定一个缓冲区，像这样。</p>
    <p class="code">send_buff = buffer_create(256, buffer_grow, 1);</p>
    <p class="dropspot">我们把缓冲区做得很小（256字节）--因为它不是用来存放大量数据的--然后我们把它做成一个增长缓冲区，以确保在任何时候需要增加要发送的数据时不会出错，为了方便，对齐方式被设置为1。</p>
    <p class="dropspot">现在，让我们假设我们的客户端要向服务器发送数据。为此，我们需要创建一个缓冲区 &quot;数据包&quot;，在这个例子中，我们将发送一个按键<strong>事件，比如</strong>当玩家按左箭头<em>来 </em>
      在游戏中移动。要做到这一点，我们先把必要的数据写入缓冲区，然后再发送出去。</p>
    <p class="code">buffer_seek(buff, buffer_seek_start, 0);<br> buffer_write(buff, buffer_u8, 1);<br> buffer_write(buff, buffer_s16, vk_left);<br> buffer_write(buff, buffer_bool, true);<br> network_send_packet(client, buff, buffer_tell(buff) ) 。</p>
    <p class="dropspot">在写入缓冲区之前，我们将 &quot;告诉 &quot;设置为缓冲区的开始，因为联网总是从缓冲区的开始获取数据。然后我们写下检查值（这将被服务器用来确定事件的类型
      要处理的事件的类型），然后是正在使用的键，然后是键的状态（在这种情况下，真表示已按下）。然后，这个缓冲区被网络功能作为一个数据包发送。请注意，我们不发送整个缓冲区！我们只发送写入的数据。我们只发送写入的数据。
      使用buffer_tell函数来返回缓冲区的当前读写位置（记住，向缓冲区写东西会把 &quot;tell &quot;移到所写内容的末尾）。这只是为了避免发送超过必要的字节数。</p>
    <p class="dropspot">在服务器上接收数据呢？收到的数据包必须写进服务器上的缓冲区，然后用来更新游戏。为此，我们将在服务器的网络控制器对象中使用<a href="../The_Asset_Editors/Object_Properties/Async_Events.htm">网络异步事件</a>，正如下面的简化代码所示。</p>
    <p class="code">var buff = ds_map_find_value(async_load, &quot;buffer&quot;);<br> if cmd == buffer_read(buff, buffer_u8);<br> {<br> key = buffer_read(buff, buffer_s16);<br> key_state = buffer_read(buff, buffer_bool);<br> }</p>
    <p class="dropspot">异步事件将包含一个特殊的临时DS地图 <span class="inline">async_load</span> （它在事件结束时自动从内存中删除），它包含不同的信息，取决于从网络传入的数据类型
      网络传入的数据类型而包含不同的信息。在这种情况下，我们假设该地图已被检查并发现是一个从客户端发送的缓冲区数据包。我们现在检查缓冲区中的第一条数据，看看发送的是什么类型的事件--在这种情况下，值 "1 "代表一个关键事件。
      值 &quot;1 &quot;代表一个按键事件，然而在编码这些东西时，你应该定义常量来保存这些值以简化事情--然后存储被按下的按键及其状态（<span class="inline">true</span> = pressed,
      <span class="inline">false</span> = 释放）。)然后，这些信息将被用来更新所有的客户端，使其具有发送客户端播放器的新状态。</p>
    <p class="note"><strong>注意</strong>：在网络异步事件结束时，从DS地图中创建的缓冲区会被自动删除，所以这里不需要使用<span class="inline" style="font-size: 14px">buffer_delete()</span>。</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Additional_Information.htm">其他信息</a></div>
        <div style="float:right">下一步。<a href="Bitwise_Operators.htm">比特运算法则</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Buffers
Using Buffers
-->
  <!-- TAGS
using_buffers
-->
</body>
</html>