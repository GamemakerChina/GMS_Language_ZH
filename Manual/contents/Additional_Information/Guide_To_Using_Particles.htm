<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>粒子使用指南</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how to set up and use particles" />
  <meta name="rh-index-keywords" content="Guide To Using Particles" />
  <meta name="search-keywords" content="particles,particle guide,particle setup" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>粒子使用指南</h1>
  <p>本指南是为那些想了解如何使用和创建<strong>粒子</strong>的人准备的。本页将涵盖<a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm"><span class="notranslate">GameMaker语言</span></a>功能和
    因此，如果你以前从未使用过粒子，我们希望本指南能让你开始使用，因为它们非常有用，而且相当
    制作的乐趣。</p>
  <p>在进一步讨论之前，我们也许应该解释一下粒子到底是什么......基本上，粒子是一种图形资源，具有某些由<strong>粒子系统</strong>定义的属性。这些属性不能被直接操作
    直接操作<em>， </em>但可以通过用于定义其所属系统的代码或动作来集体改变。它们对于在游戏中创造美丽和华丽的效果--或微妙和谨慎的效果--非常有用。
    - 它们对于在游戏中创造美丽而华丽的效果--或微妙而谨慎的效果--非常有用，而不像使用实例那样有CPU的开销。</p>
  <p>我们已经提到了粒子系统，所以在继续之前让我们解释一下什么是粒子系统。把粒子系统想象成一个容器，你将用它来容纳你的粒子，以备使用。你可以使用代码或动作来定义粒子的视觉方面，然后将它们放置在 "容器 "中（见下文）。
    粒子，然后把它们放在 &quot;容器&quot;（粒子系统）里，这样你就可以随时随地把它拿出来使用。</p>
  <p>在设置系统和创建粒子之前，有必要了解一些事情...。首先，大部分粒子系统的代码<strong>在游戏中只被调用一次</strong>，通常是在第一个房间或关卡的某种控制器对象中。
    房间或关卡--这并不总是这样，但为了简单起见，我们将在下面的简要指南中使用这种情况，因为它是使用粒子的最常见方式。你这样做是因为粒子系统一旦创建，就会保留在内存中并随时可以使用。
    在内存中并随时准备使用，所以如果你多次创建它，就会迅速增加内存的使用，导致严重的滞后，甚至有可能使游戏崩溃。在本指南中，为了简单起见，你将制作
    一个<strong>全局 </strong>粒子系统，可以在任何时候被游戏中的任何实例使用。</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">创建一个粒子系统</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">首先，你需要定义粒子系统并给它一个名字，以便你能使用它。由于这将是一个全局系统，任何对象都可以使用，你可以在控制器对象或在游戏开始时运行的初始化函数中完成这一工作。
      游戏开始时运行的初始化函数。<span class="notranslate">GML</span>将看起来像这样。<br>
    </p>
    <p class="code">global.P_System = part_system_create_layer(&quot;Instance_Layer&quot;, false)。</p>
    <p class="dropspot">并使用<span class="notranslate">DnD</span>™。</p>
    <p class="dropspot"><img alt="Create Particle System" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_CreateSystem.png">注意，提供的图层名称必须是系统将被使用的房间内的有效图层。
      否则将看不到任何粒子。还要注意的是，我们将 &quot;持久化 &quot;标志（在代码和DnD™中）设置为假。一个持久化的粒子系统是一个可以在不同的房间里 &quot;持久化 &quot;的系统，而不需要为每个房间销毁和重新创建
      而不需要为每一个房间销毁并重新创建它。然而，为了保持本指南的简单性，我们将不使用持久性。</p>
    <p class="dropspot">所以这就是创建的系统，但是粒子呢？我们也必须定义它们，否则这个系统就毫无用处，什么也做不了。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">定义一个粒子类型</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">要在一个系统中使用一个粒子，你必须首先定义它的一般属性。这些就像物体属性，但它们只以<em>一般的 </em>方式适用于单个粒子。这意味着，如果你给粒子的最小移动速度为1，最大移动速度为2，那么任何由粒子创建的
      速度为1，最大移动速度为2，那么由系统创建的任何粒子都会有一个每步1到2个像素的随机速度，总体而言，它们的平均速度为1.5。你应该命名并添加你的第一个粒子到
      系统中，使用下面的<span class="notranslate">GML</span>，在你用来创建系统的同一个对象中，命名并添加第一个粒子。<br>
    </p>
    <p class="code">global.Particle1 = part_type_create();</p>
    <p class="dropspot">而对于那些使用<span class="notranslate">DnD</span>™的人来说。</p>
    <p class="dropspot"><img alt="Create Particle Type" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Create_Type.png">注意，在使用<span class="notranslate">DnD</span>™时，我们还要勾选<strong>混合 </strong>选项。这将使粒子的<strong>添加</strong>混合成为可能，我们将在下面讨论这个问题。</p>
    <p class="dropspot">你现在有了一个系统和一个可以放进去的粒子，但你还没有准备好创造你的杰出效果你仍然需要定义粒子的属性，即：它的外观--它的速度、它的旋转、它的alpha等等。有很多
      有很多细节可以用来定义粒子效果，所以下面是对最重要的设置的概述，然后是一个使用所有这些设置的代码和<span class="notranslate">DnD</span>™片段。</p>
    <ul class="dropspotlist">
      <li class="dropspot"><strong>形状</strong>。粒子的形状是它将使用的内置精灵，默认为常量 <span class="inline">pt_shape_pixel</span> 。如果需要的话，还有一个函数可以添加一个自定义的粒子 - <a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_sprite.htm"><span class="inline">part_type_sprite()</span></a>-
        或<a href="../Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Sprite.htm">设置粒子</a>形状的动作。</li>
      <li class="dropspot"><strong>大小</strong>。设置粒子类型的尺寸参数。你可以指定最小的起始尺寸、最大的起始尺寸，以及每一步的尺寸增加（使用负数表示尺寸减少）。这是一个标量值，它
        将平等地修改基础图像的X/Y比例。</li>
      <li class="dropspot"><strong>color</strong>: 设置粒子的颜色，如果使用的是单一的颜色。如果提供两种或三种颜色，这将是颜色的混合，在其生命周期内从一种颜色混合到另一种颜色。</li>
      <li class="dropspot"><strong>alpha</strong>:为粒子设置0到1之间的阿尔法值。如果传入一个单一的值，这将是粒子的阿尔法，如果传入两个或三个值，那么阿尔法将在这些值之间混合。
        粒子的寿命。</li>
      <li class="dropspot"><strong>speed</strong>：为粒子类型设置速度属性。你可以指定一个最小和最大的速度，当粒子被创建时，会在给定的范围之间选择一个随机值。你可以表示每一步的速度增加。
        甚至可以使用一个负数来降低粒子的速度（速度永远不会小于0）。</li>
      <li class="dropspot"><strong>方向</strong>。设置粒子类型的方向属性。你可以再次指定一个方向范围（以逆时针方向为单位--0表示向右运动，90表示向上运动，等等...）。例如，为了让
        粒子以随机方向移动，你可以选择最小0和最大360作为数值。你也可以指定每一步的增加方向（也可以是负的）。</li>
      <li class="dropspot"><strong>方向</strong>。设置粒子类型的方向角属性。你可以指定最小的角度，最大的角度，以及每一步的增加。你还可以指出给定的角度应该是相对于当前的
        例如：通过将所有的值设置为0，但相对值为true，粒子的方向将精确地跟随粒子的路径。</li>
      <li class="dropspot"><strong>混合</strong>。设置粒子类型是使用<strong>加成 </strong>混合还是<strong>正常 </strong>混合。当使用<span class="notranslate">GML</span>时，这是在一个函数中设置的，当使用<span class="notranslate">DnD</span>™时，这是粒子初始化的一部分。添加性
        混合意味着粒子将使用 <span class="inline">bm_add</span> 混合模式，在它们重叠的地方给它们一个 &quot;发光 &quot;的外观，并将它们与下面绘制的任何东西（精灵、背景、瓷砖等）混合。
        - 对火和魔法效果非常有用（例如），但对像烟雾这样的东西最好不要用。实验一下，看看有什么不同请注意，在创建粒子时，启用这个功能会破坏纹理批处理，因此每一步需要更多的批处理来绘制它们。
        所以每一步需要更多的批次来绘制它们--这一点需要考虑，因为它可能会影响性能，尤其是在移动设备上。</li>
      <li class="dropspot"><strong>寿命</strong>。设置粒子类型的寿命界限，以步数（游戏帧）为单位。和以前的设置一样，它有一个最小和最大的值，粒子将在这些值中持续一个随机的步数。因此，一个寿命为30
        min和30 max将使粒子正好存在30步，但20 min和60 max的寿命将使每个粒子存在20到60步之间的随机数。</li>
    </ul>
    <p class="dropspot">现在，在我们向你介绍定义粒子的代码之前，让我们<strong>先</strong>谈谈 &quot;摆动&quot;......信不信由你，&quot;摆动 &quot;是一个粒子属性，可以对上述许多设置进行设置
      单独的。当你看到 &quot;摆动 &quot;作为粒子功能或动作的参数时，这意味着如果你在1到20之间放置一个数字，粒子将 &quot;摆动 &quot;或在该属性的最小和最大值之间波动。
      1是一个缓慢的摆动，20是非常快的摆动。因此，一个最小速度为2、最大速度为5、摆动速度为20的粒子将在所创建的每个粒子的生命周期内，在最小/最大速度之间快速摆动。</p>
    <p class="note"><strong>注意</strong>：还有其他一些次要的粒子属性，我们在这里不做介绍，只是为了让事情在开始时尽可能简单。有关粒子属性的全部细节，请参见相应的页面。</p>
    <p class="dropspot">我们现在来看看一些定义粒子的代码。<br>
    </p>
    <p class="code">//这定义了粒子的形状<br> part_type_shape(global.Particle1,pt_shape_pixel)。
      <br> //这是对大小的定义<br> part_type_size(global.Particle1,1,1,0,2);
      <br> //这是设置它的颜色。有三种不同的代码<br> part_type_color1(global.Particle1,c_white);
      <br> //这是它的alpha。有三个不同的代码<br> part_type_alpha1(global.Particle1,1);
      <br> //粒子的速度<br> part_type_speed(global.Particle1,0.50,2,-0.10,0);
      <br> //方向<br> part_type_direction(global.Particle1,0,359,0,20);
      <br> //这是改变粒子的旋转<br> part_type_orientation(global.Particle1,0,0,0,true)。
      <br> //这是混合模式，要么是加法模式，要么是法线模式<br> part_type_blend(global.Particle1,1);
      <br> //这是它的寿命，以步为单位<br> part_type_life(global.Particle1,5,30);
    </p>
    <p class="dropspot">要在<span class="notranslate">DnD</span>™中创建同样的粒子定义，我们需要这些行动。</p>
    <p class="dropspot"><img alt="Define Particle Type" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Define_Particle.png">所以这就是了！我们现在已经定义了我们的粒子，它们已经准备好被使用了。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">在游戏中直接创建粒子</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">有几种创建粒子的方法，每一种都有其优点和缺点。你可以使用<strong>发射器</strong>来<strong>迸发 </strong>或<strong>流动 </strong>粒子，或者你可以<strong>直接 </strong>在一个点上创建粒子。
      你使用哪种方式真的取决于你想达到的目的和你想创造的效果，但我们将从这两种方式中最简单的开始，即直接创建粒子。在<span class="notranslate">GML</span>中，我们会使用以下函数。<br>
    </p>
    <p class="code">part_particles_create(global.P_System, x, y, global.Particle1, 10)。</p>
    <p class="dropspot">而在<span class="notranslate">DnD</span>™中，它将是。</p>
    <p class="dropspot"><img alt="Create Particles At A Position" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Burst.png">上面的单个代码/动作将在给定的x/y坐标处创建10个类型为 &quot;Particle1 &quot;的粒子。
      类型的粒子。很简单!这行代码/动作的好处是，它可以在任何地方使用，没有任何麻烦。例如，如果你把它放在一个对象中的鼠标<strong>全局左压</strong>事件中，并改变
      的x/y值，它就会在你每次按下按钮的时候在鼠标的位置产生粒子。或者，如果你有一个火箭，那么你可以把它放在步骤事件中，每一步都有烟雾粒子出现（虽然1或
      2个可能比10个要好！）。)你甚至可以让它通过随机改变x/y坐标在一个区域内创建粒子，例如。<br>
    </p>
    <p class="code">repeat(50)<br> {<br> var xx = x + 20 - random(40);<br> var yy = y + 20 - random(40);<br> part_particles_create( global.P_System, xx, yy, global.Particle1, 1);<br> }</p>
    <p class="dropspot"><img alt="Create Particles Over A Random Area" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Create_Particles.png">上面的代码将在一个40px的正方形区域内的随机位置创建50个粒子。
      区域内的随机位置创建50个粒子。
    </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">用发射器创建粒子</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">既然我们已经解释了创建粒子的简单方法，那么现在让我们采用稍微复杂的方法，即使用发射器<strong>。</strong>发射器是粒子系统的另一部分，在使用前必须定义，所以我们将
      所以我们要做一个全局发射器，就像我们为系统和粒子做的一样。我们还必须决定是否有一个静态的（非移动的）发射器，以及我们是否要<strong>爆裂 </strong>或<strong>流化 </strong>粒子。
      以及决定我们要让发射器在什么区域和什么类型的分布上使用。</p>
    <p class="dropspot">这都是什么意思？好吧，<strong>静态 </strong>发射器是一个你可以定义一次就忘掉的发射器，因为它在游戏过程中不会移动到任何地方，例如：想想木头火 - 它不会移动，它只是发射出火焰，所以是静态的。
      所以是静态的，但是一个火球需要一个<strong>动态</strong>发射器，并且会在屏幕上移动。至于爆裂或流，爆裂是粒子的一次性爆炸，而流就是这样--粒子的持续流
      每一步。对于面积和分布，对于发射器，你可以定义一个发射粒子的区域（可以是矩形、椭圆形、菱形或直线），以及分布曲线（高斯、反高斯或线性）。</p>
    <p class="dropspot">下面的图片说明了发射器可用的不同类型的区域形状。</p>
    <p class="dropspot"> </p>
    <center><img alt="Rectangle Emitter" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_Rectangular.gif" /> <img alt="Line Emitter" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_Line.gif" /></center>
    <center><img alt="Ellipse Emitter" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_Ellipse.gif" /> <img alt="Diamond Emitter" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_Diamond.gif" /></center>
    <p class="dropspot"><br> 而分布曲线（线性、高斯和反高斯）在这里得到了说明。</p>
    <p><img alt="Particle distribution" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_Distribution.png" /></p>
    <p class="dropspot">下面是一个定义两个发射器的代码/动作的例子，通常是在控制器对象的<strong>创建事件</strong>中，在定义粒子系统之后。一个是静态的，在整个房间的
      而另一个则是动态的，跟随鼠标，每隔30步从一个小椭圆中爆发。</p>
    <p> </p>
    <p class="code">global.Particle1_Emitter1 = part_emitter_create(global.P_System);<br> global.Particle1_Emitter2 = part_emitter_create(global.P_System);<br>
      <br> //设置将发射粒子的区域<br> part_emitter_region(global.P_System, global.Particle1_Emitter1, 0, room_width, 0, room_height, ps_shape_rectangle, ps_distr_linear);<br> part_emitter_region(global.P_System, global.Particle1_Emitter2,
      mouse_x-10, mouse_x+10, mouse_y-10, mouse_y+10, ps_shape_ellipse, ps_distr_gaussian);<br>
      <br> //设置第一个粒子流为每步10个<br> part_emitter_stream(global.P_System, global.Particle1_Emitter1, global.Particle1, 10);<br>
      <br> //现在可以忘掉了，因为它将发挥作用，直到被告知停止...<br> //设置报警[0]事件，使发射器2的粒子爆裂...<br> alarm[0] = 30;</p>
    <p class="dropspot"><img alt="Define Particle Emitters" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Create_Emitter.png">所以，在这里，我们正在创建两个粒子发射器，并将其分配给我们在开始时创建的粒子系统
      开始的时候创建的。创建这些发射器的函数/动作允许我们在房间里定义一个区域，在这个区域内发射粒子，并给出要发射的粒子类型，以及在定义区域内使用的形状和分布。这些
      函数/动作将返回一个数值，也就是发射器的ID值，我们将其存储在一个变量中，以便我们可以使用进一步的发射器函数来瞄准这些发射器。</p>
    <p class="dropspot">现在我们有代码<span class="notranslate">/DnD</span>™来流化粒子（这些粒子将在每个游戏步骤中发射，而不需要我们做其他事情），但我们还想添加一个<strong>Alarm[0]</strong> <strong>事件</strong>来在特定的
      间隔爆发粒子。
    </p>
    <p class="code">part_emitter_region(global.P_System, global.Particle1_Emitter2, mouse_x - 10, mouse_x + 10, mouse_y - 10, mouse_y + 10, ps_shape_ellipse, ps_distr_gaussian);<br> part_emitter_burst(global.P_System, global.Particle1_Emitter2, global.Particle1, 30);<br> alarm[0] = 30;</p>
    <p class="dropspot"><img alt="Burst Particles From Emitter" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Set_Emitter.png">粒子爆发只是发射器发出的一次性粒子爆炸，而不是每一个游戏步骤都有持续的
      而不是每个游戏步骤都有源源不断的粒子。</p>
    <p class="dropspot">但是，如果你想让几个物体发射粒子怎么办？一个全局发射器一次只能在一个地方，所以你需要在每个对象中创建<em>局部 </em>发射器。这些发射器将仍然使用全局粒子系统和其中的任何粒子
      但它们可以是不同的形状和大小，并随着物体移动，这使它们成为火箭或子弹或其他东西的理想选择。你要使用的代码和上面的完全一样，但在发射器名称前没有 &quot;global &quot;的前缀。
      发射器名称前的 "global "前缀。</p>
    <p class="dropspot">这就是所处理的粒子的创造，但还有一件事非常重要...当你处理完它们时，要进行清理。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">清理工作</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">正如一开始提到的，一旦创建，粒子系统（以及它的粒子、发射器等......）就会储存在内存中，以便即时使用。很好，但是当你重新开始游戏时会发生什么？或者如果你的玩家死了，又重新开始了这个房间？好吧，如果你
      如果你不正确地管理游戏，你会得到一个<strong>内存泄漏。</strong>这是指某些东西已经被创建并占用了内存，但已经被 &quot;取消引用&quot;，这意味着GameMaker<span class="notranslate">不再</span>能够访问它。这种事情会
      缓慢地吞噬内存，导致你的游戏滞后，甚至阻塞计算机，导致你的游戏崩溃，这对于第一次使用粒子系统的用户来说是一个相当普遍的问题。</p>
    <p class="dropspot">你如何避免这种情况呢？好吧，<span class="notranslate">GameMaker Studio 2</span>有<span class="notranslate">GML</span>和<span class="notranslate">DnD</span>™，在不使用时从内存中删除粒子系统及其发射器和粒子，在使用以下代码/操作时，只要稍加计划，你就可以轻松地防止
      这个潜在的问题。</p>
    <p class="dropspot">你要做的第一件事是决定你要在哪里创建系统，以及如何使用它。你可以在你的第一个房间（如菜单或标题屏幕）中的一个对象的<strong>游戏开始事件</strong>中创建一个全局系统。
      但这意味着，如果你用这个函数重新启动游戏，它将被重新创建。 <a href="../GameMaker_Language/GML_Reference/General_Game_Control/game_restart.htm"><span class="inline">game_restart()</span></a>函数，它将被重新创建并导致内存泄漏。或者你
      可以在任何房间的一个实例中创建一个本地系统，但同样，如果你离开这个房间，那么这个系统将无法访问并导致内存泄漏。为了避免这种情况，你需要在 <a href="../The_Asset_Editors/Object_Properties/Other_Events.htm"><strong>游戏结束活动</strong></a>      或 <a href="../The_Asset_Editors/Object_Properties/Object_Events.htm"><strong>清理事件</strong></a>的内容。</p>
    <p class="code">part_type_destroy(global.Particle1);<br> part_emitter_destroy(global.P_System, global.Particle1_Emitter);<br> part_emitter_destroy(global.P_System, global.Particle2_Emitter);<br> part_system_destroy(global.P_System)。
    </p>
    <p class="dropspot"><img alt="Clean Up Particle System" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_CleanUp.png">这将从内存中删除已定义的粒子、发射器和系统，以便你重新启动
      游戏或更换房间。请记住，在考虑了哪里是创建系统最合适的地方之后，也要考虑哪里是破坏系统最合适的地方!</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p>现在你知道了关于粒子、粒子系统和发射器的基本知识，所以你现在可以把它们添加到你的游戏中去了但是，在急于为所有东西添加粒子效果之前，请注意，虽然粒子比实例对CPU的消耗要小，但它们并不是解决一切问题的办法，因为如果你同时有成千上万个粒子，它们会导致延迟。
    不是解决所有问题的办法，因为如果你一次有成千上万的粒子，它们会导致延迟。最好的办法是进行试验，小心翼翼地使用它们来 &quot;充实 &quot;游戏的视觉效果，让它更吸引眼球，但不要做得太过火。
    它。</p>
  <p> </p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">下拉式标题</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p>在这里输入你的下拉文本</p>
  </div>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Additional_Information.htm">其他信息</a></div>
        <div style="float:right">下一步。<a href="Guide_To_Using_Shaders.htm"> <span class="notranslate">着色器</span>使用指南</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Vectors
Vector Maths
-->
  <!-- TAGS
vector_maths
-->
</body>
</html>