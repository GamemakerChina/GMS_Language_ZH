<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>自由数据结构</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains the Free Data Structure action" />
  <meta name="rh-index-keywords" content="DnD™ Action - Free Data Structure" />
  <meta name="search-keywords" content="Free Data Structure" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><img alt="Free Data Structure Icon" class="icon" src="../../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Data_Structures/i_DS_Free_Data_Structure.png"> 自由数据结构</h1>
  <p>这个动作将从内存中释放数据结构，每当不再需要一个数据结构时就应该调用这个动作，例如在一个实例的Destroy甚至是Room End事件中，等等。释放一个数据结构意味着没有进一步的动作
    可以用来引用它，因为它将不再存在，尽管你也可以使用<a href="If_Data_Structure_Exists.htm">If Data Structure Exists</a> 动作来检查这一点。</p>
  <p>请注意，除非该数据结构有一个分配给全局范围变量的索引，否则它不会从一个房间被带到另一个房间。例如，如果你创建了一个播放器实例，并且一个列表数据结构被分配给该实例中的一个变量。
    列表将需要被释放，如果玩家被销毁<i>或者</i>房间在玩家实例中发生变化（除非玩家实例被标记为持久化），所以玩家实例将有两个 Free Data Structure 动作来处理这两个事件。
    这两个事件。重要的是，当不再需要时，所有创建的数据结构都要以这种方式销毁，以防止内存泄漏，这可能导致性能问题，甚至使你的游戏崩溃。</p>
  <p> </p>
  <h4>行动语法。</h4>
  <p><img alt="Free Data Structure Action" class="center" src="../../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Data_Structures/a_DS_Free_Data_Structure.png" /></p>
  <h4>争论。</h4>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>类型</td>
        <td>你要释放的数据结构类型（列表、地图、网格或堆栈）。</td>
      </tr>
      <tr>
        <td>变化的</td>
        <td>持有要释放的数据结构索引的变量</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>例子。</h4>
  <p><img alt="Free Data Structure Example" class="center" src="../../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Data_Structures/e_DS_Free_Data_Structure.png">上面的动作块代码得到了全局变量中引用的列表的大小，然后使用for循环来循环浏览它，并销毁列表中的ID的实例。
    变量中引用的列表的大小，然后使用for循环来循环浏览，并销毁列表中存储有ID的实例。循环结束后，列表被从内存中释放出来。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Data_Structure_Actions.htm">数据结构行动</a></div>
        <div style="float:right">下一个。<a href="Add_To_List.htm">添加到列表</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Action - Free Data Structure
-->
  <!-- TAGS
action_ds_free
-->
</body>
</html>