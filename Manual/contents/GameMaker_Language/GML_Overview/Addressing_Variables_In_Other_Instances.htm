<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>在其他实例中对变量进行寻址</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining hoe to address variables in other instances" />
  <meta name="rh-index-keywords" content="Addressing Variables In Other Instances" />
  <meta name="search-keywords" content="" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>在其他实例中对变量进行寻址</h1>
  <p>在专门讨论<a href="Variables_And_Variable_Scope.htm">变量</a>的章节中，你发现了如何在单个实例中或在全局范围内创建和使用变量，但如果你想让一个实例访问另一个实例中的变量，会发生什么？
    不同的实例中的一个变量呢？有很多情况下你可能想这样做，例如，在与子弹物体的碰撞中，你可能想通过访问子弹中的一个变量来了解子弹的伤害程度，或者你可能想停止拼图中所有球的运动
    或者你可能想停止一个谜题中所有球的运动，或者你可能想把主角移到一个特定的位置，或者你在任何游戏中通常遇到的任何其他情况。值得庆幸的是，<span class="notranslate">GameMaker语言</span>配备了一些机制来实现这一点。
    这一点。</p>
  <p>访问或改变另一个实例中的变量的最常见的方法之一是使用其对象名称作为标识符，然后使用一个点&quot;<span class="inline">.</span>&quot;告诉GameMaker<span class="notranslate">Studio 2，</span>在
    后面的变量将在该对象中被分配或改变。这方面的语法是。</p>
  <p class="code">&lt;object_id&gt;.&lt; variable&gt;<em>=&lt;</em>value&gt;。 </p>
  <p>在实践中，它看起来像这样。</p>
  <p class="code">obj_ball.speed = 0。</p>
  <p>在上面的代码中，你正在设置 &quot;obj_<tt>ball &quot;</tt>的一个实例的速度<tt>。</tt>然而，如果你在房间里有多个给定对象的实例，<em>那么它将同样适用于所有</em>的对象 - 除非你使用<b>HTML5</b>。
    在这种情况下，它将只影响<em>一个</em>，但你无法知道它将影响哪一个 - 所以如果你需要访问一个对象的所有实例，你应该使用 <a href="Language_Features/with.htm"><tt>with()</tt></a>，因为那是
    100%跨平台兼容。一般来说，只有当你在房间里只有一个对象的实例时，或者（正如你在下一部分所看到的）你有一个特定的<i>实例<b>ID</b></i>时，才应该使用这种格式。</p>
  <p>当房间里有多个实例时，你也可以使用唯一的<b>实例名来</b>访问一个对象的单个实例，以告诉<span class="notranslate">GameMaker Studio 2</span>我们希望准确地处理哪个实例。<b>实例名称常数</b>是一个
    是唯一的识别常量，它被赋予给你游戏中添加到房间的每一个实例。你可以通过在<a href="../../The_Asset_Editors/Rooms.htm">房间编辑器</a>中双击一个实例来找到这个常量。</p>
  <p><img alt="The instance constant in the room editor" class="center" src="../../assets/Images/Scripting_Reference/GML/Overview/Instance_Constant.png">注意，这个名字可以被编辑并赋予一个更具描述性的名字--尽管这个名字在整个游戏中<em>必须</em>是唯一的。
    命名必须是整个游戏中唯一的，并且它可以被用作点的左侧。</p>
  <p class="code">inst_4DB70D2.speed = 0。</p>
  <p>然而，到目前为止，最常见和最实用的方法是在点的左边使用一个<i>变量</i>，只要该变量<i> 存储了一个有效的<b>实例id</b></i>。下面的例子说明了这一点。</p>
  <p class="code">// 示例 1<br> var _inst = instance_position(mouse_x, mouse_y, all);<br> if instance_exists(_inst)<br> {
    <br> _inst.speed = 0;<br> }
    <br>
    <br> // 示例2<br> var _inst = instance_create_layer(mouse_x, mouse_y, &quot;Enemies&quot;, obj_E_Parent);<br> _inst.direction = point_direction(_inst.x, _inst.y, x, y);<br> _inst.target = id;</p>
  <p>在上面例1的代码中，有一个 <a href="../GML_Reference/Asset_Management/Instances/instance_exists.htm"><tt>instance_exists()</tt></a>调用的代码块中。这是因为使用point方法来访问或改变另一个实例的
    值将会产生错误，并且在实例不存在的情况下使游戏崩溃，而在这个例子中就有可能出现这种情况。然而在例2和例3中我们不需要检查，因为我们知道实例是存在的
    因为在例2中我们创建了它，而在例3中，它是碰撞事件中的另一个实例。但是，如果在使用这个方法的时候，有<i>任何</i>可能性，实例可能会被销毁、停用，或者以其他方式从房间中移走。
    你<i>应该</i>事先使用<tt>instance_exists()</tt>函数或 <a href="../GML_Reference/Asset_Management/Instances/instance_number.htm"><tt>instance_number()</tt></a>函数。</p>
  <p>请注意，你不能在这个方法中使用特殊的<a href="Instance_Keywords.htm">关键字</a>&quot; all &quot;来针对所有的实例（例如： <span class="inline">all.val = 10</span> 会产生一个错误），但你可以使用关键字
    &quot;其他<tt>&quot;和</tt>&quot;自我 &quot;而没有问题。例如，在一个<a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">碰撞事件</a>中使用<tt>其他</tt>。</p>
  <p class="code">// 例三 other.hp -= 10;<br> if other.hp &lt;= 0<br> {
    <br> other.sprite_index = spr_E_Dead;<br> }
  </p>
  <p>同样重要的是要注意，你不能使用任何函数本身作为赋值的左手边。例如，下面的代码会给你一个错误。</p>
  <p class="code">instance_nearest(x, y, obj).speed = 0;</p>
  <p>该代码示例中表达式的返回值是一个整数（最近的实例的唯一ID值），因此必须用括号 <span class="inline">()</span> ，才能以这种方式使用，并正确解决实例
    要求。上面的代码可以正确地写成。</p>
  <p class="code">(instance_nearest(x, y, obj)).speed = 0;<br>
    <br> /或
    <br>
    <br> var inst = instance_nearest(x, y, obj);<br> inst.speed = 0;</p>
  <p>这些都是读取、改变和设置其他实例中的变量的完全有效的方法，之所以有效是因为point实际上是一个<i>操作符</i>。它把一个值作为左边的<a class="glossterm" data-glossterm="操作符" href="#">操作数</a>，把一个变量作为右边的操作数，并返回指定对象或实例中这个特定变量的地址。所有的对象名称、常量、ID等等......都只是代表值，这些可以像其他值一样被处理。</p>
  <p>另一种引用另一个实例中的变量的方法是使用<span class="notranslate">GameMaker语言</span>函数 <span class="inline">with()</span> ，<a href="Language_Features/with.htm">这里</a>将详细讨论。</p>
  <p class="code">// 这将影响对象 &quot;obj_Enemy &quot;的所有实例<br> with (obj_Enemy)<br> {<br> target = other.father;<br> }<br>
    <br> // 这将影响 &quot;obj_Enemy &quot;对象的一个实例<br> var _enemy = instance_nearest(x, y, obj_Enemy);<br> if instance_exists(_enemy)<br> {<br> with (_enemy)<br> {<br> target_x = mouse_x;<br> target.y = mouse_y;<br> }<br> }</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="GML_Overview.htm"><span class="notranslate">GML</span>概述</a></div>
        <div style="float:right">下一步。<a href="Evaluation_Order.htm">评价顺序</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
variables - addressing
addressing variables
-->
  <!-- TAGS
addressing_variables
-->
</body>
</html>