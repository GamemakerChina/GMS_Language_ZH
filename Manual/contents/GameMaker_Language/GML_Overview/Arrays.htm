<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>数组</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining Arrays" />
  <meta name="rh-index-keywords" content="Arrays" />
  <meta name="search-keywords" content="Arrays" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>数组</h1>
  <p>数组可以非常有用，是制作游戏的一个重要部分。以下是一些没有数组就不可能实现的事情（或者至少是更加困难的事情）。</p>
  <ul class="colour">
    <li>菜单。一个或两个数组可以使创建一个好的菜单系统变得更加容易。</li>
    <li>RPGs。数组对于制作RPG来说是必不可少的，因为你不需要有杂乱无章的变量，而只需要有几行，你可以随时参考。</li>
    <li>纸牌游戏。有利于记录牌和手的情况。</li>
    <li>高分和其他统计数据。追踪一个数组要比追踪多个变量容易得多。</li>
  </ul>
  <p>这只是冰山一角，因为数组是你可以使用的最基本和最有用的编程工具之一，你会对它们的应用感到惊讶！它们的内存效率很高，一般来说，它们的解析速度很快。它们也是非常高效的内存，一般来说解析速度很快。
    这使得它们成为保持最大性能的理想选择。</p>
  <p><label for="aone">一个基本的数组是有一个<strong>维度</strong>的，但是你也可以有不止一个维度的数组。下面的章节对这两种类型的数组进行了详细的解释。 </label></p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">1维数组</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">在进一步讨论之前，让我们先澄清一下数组究竟是什么，以及它是如何结构的。数组只是一个分配给变量的<a href="Data_Types.htm">数据类型</a>，它不仅可以包含一个值，还可以包含多个值。
      值。下面的图片显示了一个基本数组的示意图。 </p>
    <p class="dropspot"><img class="center" src="../../assets/Images/Scripting_Reference/GML/Overview/1DArrayExample.png" /></p>
    <p class="dropspot">这被称为<strong>1D</strong>（一维）数组，正如你所看到的，该数组被存储在变量&quot;<span class="inline">a</span>&quot;中，并包含多个值。要访问这个数组，你需要做如下的事情。</p>
    <p class="code">var _val = a[0];<br> show_debug_message(_val);
    </p>
    <p class="dropspot">上面的代码从数组 &quot;a &quot;的第0个位置获取数值，然后将其输出到控制台，根据上图所示的数组的内容，它将输出125。如果你做了以下事情。</p>
    <p class="code">var _val = a[3];<br> show_debug_message(_val);
    </p>
    <p class="dropspot">输出将显示 &quot;嗨！&quot;。</p>
    <p class="dropspot">正如你所看到的，你给数组一个变量名称，然后在方括号中给一个值 <span class="inline">[]</span> ，其中的值是在数组中获取数据的位置。所以，从本质上讲，数组是一个有若干空格的容器，用来存储数值。
      存储值，而容器中的每个位置都有一个特定的数字来标识，这就是我们在 <span class="inline">[]</span> 。值得注意的是，数组的内容<b>总是从0开始，而且</b> <i>永远不可能是负数!</i></p>
    <p class="dropspot">我们已经展示了如何检查一个数组的数据，但我们如何创建数组来开始呢？首先，在我们使用它之前，它必须被<i>初始化</i>，否则<span class="notranslate">GameMaker Studio 2</span>会给我们一个错误。初始化一个数组意味着我们给数组的每个
      的位置都有一个初始值，以便在项目代码的其他地方使用。记住这一点很重要，因为这意味着你在使用数组之前必须做一定的计划，但使用这样的重复循环来初始化数组是很容易的
      但使用这样的重复循环来初始化一个数组是很容易的......</p>
    <p class="code">var i = 9;<br> repeat(10)
      <br> {
      <br> array[i] = 0;<br> i -= 1;<br> }
    </p>
    <p class="dropspot">这段简单的代码将初始化一个10个位置的数组（从0到9），以保持0，即：数组中的每个位置都包含0的值。你会注意到，这个数组是<i>倒着</i>初始化的，最后一个值被首先定义。这一点
      这不是严格意义上的必须，但却是最理想的方式，因为它将在内存中保留一个与数组精确大小相同的空间，而如果你从0<em>向上</em>初始化一个数组，每增加一个值就必须重新分配内存。
      值都要重新分配内存（所以对于一个十项的数组，在一个循环中初始化它将改变内存分配十次）。对于较小的数组来说，速度上的差异可以忽略不计，但是较大的数组应该尽可能用这种方式进行优化。</p>
    <p class="note"><b>注意</b>：HTML5导出是上述规则的例外，当针对该规则时，你应该按照从0向上的连续顺序初始化数组。</p>
    <p class="dropspot">你也可以使用<span class="notranslate">GML</span>函数 <a href="../GML_Reference/Variable_Functions/array_create.htm"><tt>array_create()</tt></a>来初始化一个固定大小的数组，你甚至可以创建没有值的 &quot;空 &quot;数组，例如。</p>
    <p class="code">my_array= [];</p>
    <p class="dropspot">这告诉<span class="notranslate">GameMaker</span>，变量 &quot;my_array &quot;是一个数组，然后你可以在未来的任何时候向它添加值。然而，如果你试图访问一个空数组中的一个值，那么你会得到一个错误。事实上，你应该始终注意
      注意只访问有效的数组位置，因为试图访问一个数组之外的值也会产生错误。例如，这将导致项目在运行时崩溃。</p>
    <p class="code">my_array = array_create(5, 0);<br> var _val = my_array[6];</p>
    <p class="dropspot">数组初始化时只有5个位置，但我们试图得到第7个位置--数组是从0开始编号的，所以 <span class="inline">array[6]</span> 是第7个位置--因此游戏产生了错误并崩溃了。</p>
    <p class="dropspot">我们已经展示了如何用相同的值初始化每个位置的数组，但是如果我们想用不同的值初始化每个位置的数组呢？那么，我们必须自己手动输入每一个位置，但是
      有一个很好的技巧，可以帮助我们跟踪这些东西。</p>
    <p class="code">var _count = 3;<br> array[_count] = &quot;you?&quot;<br> count -= 1;<br> array[_count] = &quot;are &quot;<br> count -= 1;<br> array[_count] = &quot;How &quot;<br> count -= 1;<br> array[_count] = &quot;Hello!&quot;<br> count -= 1;</p>
    <p class="dropspot">正如你所看到的，我们没有在实际的数组中使用任何数字，而是用一个<a href="Variables/Local_Variables.htm">局部变量来</a>倒数这些值。这是非常有用的，特别是对于较大的数组，因为它意味着你不需要
      因为它意味着你不需要跟踪有多少个位置，也不需要跟踪你在哪个数字上，因为代码会帮你处理这些。你只需要知道数组总共要容纳多少个位置。</p>
    <p class="dropspot">最后，你可以用一个单一的变量调用将这些值赋给一个数组，像这样。</p>
    <p class="code">var _a = [0, 1, 2, 3, 4];<br> var _b = [];</p>
    <p class="dropspot">以上将创建两个数组作为局部变量，第一个数组已经填充了5个元素，第二个数组是一个空数组，准备添加值。</p>
    <p class="dropspot">说完这些，我们如何在实际工作中使用数组呢？就像我们使用一个普通变量一样，正如下面的例子所示。</p>
    <p class="code">// 将两个数组值相加<br> total = array[0] + array[5];<br>
      <br> // 检查一个数组值<br> if (array[9]) == 10<br> {
      <br> //做一些事情<br> }
      <br>
      <br> // 绘制一个数组值<br> draw_text(32, 32, array[3]);</p>
    <p class="dropspot">由于数组是连续编号的，这意味着你也可以通过它们进行循环来执行额外的动作，就像我们初始化它时那样。</p>
    <p class="code">var total = 0;<br> for (var i = 0; i &lt; 10; ++i;)<br> {
      <br> total += array[i];<br> draw_text(32, 32 + (i * 32), array[i]);<br> }
      <br> draw_text(32, 32 + (i * 32), total);</p>
    <p class="dropspot">上面的代码将把我们数组中的所有数值加起来，逐一画出，最后画出总数值。</p>
    <p class="dropspot">关于数组，最后要提到的是，你也可以删除一个数组，只需将定义该数组的变量 &quot;重新赋值 &quot;为一个单一的值。这将释放出与该数组的所有位置和数值相关的内存。
      比如说。</p>
    <p class="code">//创建数组 for (var i = 9; i &gt; -1; --i;)<br> {
      <br> a[i] = i;<br> }
      <br> //删除该数组<br> a = -1;</p>
    <p class="dropspot">如果数组有多个维度（见下文），它们也会被清理掉，注意，当你在实例中创建数组时，这些数组不需要在实例从游戏中删除时被清理掉，因为它们会在销毁或房间结束时被垃圾收集器自动删除。
      被<a class="glossterm" data-glossterm="垃圾收集器" href="#">垃圾收集器</a>在销毁或房间结束时自动删除。然而，如果数组中的任何位置持有对<em>动态</em>资产的引用--比如粒子系统、缓冲器或数据结构
      - 那么这些资产<em>将</em>需要在数组被删除、实例被销毁或房间结束之前被销毁。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">多维数组</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><span style="text-align: justify;">我们知道什么是一维数组，但在<span class="notranslate">GameMaker Studio 2</span>中，你可以有多维数组，其结构基本上是数组中的数组中的数组......例如，下面是<strong>一个二维</strong>（二维）数组</span></p>
    <p class="code"><span style="text-align: justify;"></span>array[0][0] = 5;</p>
    <p class="dropspot">这实质上是告诉<span class="notranslate">GameMaker</span>，这个数组实际上是由各种一维数组组成的。下面是一个扩展的例子。</p>
    <p class="code">array[1][2] = 1;<br> array[1][1] = &quot;hello&quot;;<br> array[1][0] = 55.5;<br> array[0][2] = sprite_index;<br> array[0][1] = &quot;world&quot;;<br> array[0][0] = -67.89;</p>
    <p class="dropspot">多维数组在使用前需要进行初始化，这与单一的一维数组相同，并且可以像其他变量一样保存实数、字符串和任何其他<a href="Data_Types.htm">数据类型</a>，这使得它们成为任何需要以方便的方式存储大量数据的游戏的理想选择。
      的理想选择（记住，你可以很容易地在数组中循环）。下面是在实际游戏中如何使用的最后一个例子......假设你想在游戏的四个不同点上产生四个不同的敌人
      在你的游戏中根据一个随机值产生四个不同的敌人。那么，我们可以用一个2维的数组来做这件事，这样就可以省去写大量的代码了。</p>
    <p class="dropspot">首先，我们应该初始化我们将在 &quot;控制器 &quot;对象的创建事件中使用的数组（注意使用注释来提醒你每个数组条目的作用）。</p>
    <p class="code">enemy[3][2] = 448; //y position<br> enemy[3][1] = 32; //x position<br> enemy[3][0] = obj_Slime; //Object<br> enemy[2][2] = 448;<br> enemy[2][1] = 608;<br> enemy[2][0] = obj_Skeleton;<br> enemy[1][2] = 32;<br> enemy[1][1] = 608;<br> enemy[1][0] = obj_Knight;<br> enemy[0][2] = 32;<br> enemy[0][1] = 32;<br> enemy[0][0] = obj_Ogre;</p>
    <p class="dropspot">我们现在有了要生成实例的对象，以及它们在房间内相应的x和y的生成坐标，都存储在我们的数组中。现在可以在控制器对象的另一个事件中使用（例如，一个警报，或一个按键
      事件）。)</p>
    <p class="code">//得到一个从0到3的随机数，包括<br> var i = irandom(3);<br> //使用数组来创建对象<br> instance_create_layer(enemy[i][1], enemy[i][2], &quot;Enemy_Layer&quot;, enemy[i][0]);</p>
    <p class="dropspot">这段简短的代码现在将在游戏室中生成一个随机的敌人，它使用的代码比 &quot;if /<tt>then / else &quot;</tt>结构或甚至 &quot;switch &quot;少得多，而且由于<tt>数组</tt>在创建事件中被全部初始化了
      由于数组是在创建事件中一起初始化的，所以编辑和改变这些值要容易得多，因为它们没有被<a class="glossterm" data-glossterm="硬编码" href="#">硬编码</a>到项目代码的其他部分。</p>
    <p class="dropspot">还需要注意的是，数组中每个维度的长度可以不同，所以你可以让数组初始维度的长度为3，但是第二个维度条目可以为每个初始数组值的长度不同
      例如，它被分配到的第二个维度的长度可以不同。</p>
    <p class="code">array[2][2] = &quot;3&quot;;<br> array[2][1] = &quot;2&quot;;<br> array[2][0] = &quot;1&quot;;<br> array[1][3] = &quot;4&quot;;<br> array[1][2] = &quot;三&quot;;<br> array[1][1] = &quot;二&quot;;<br> array[1][0] = &quot;一&quot;;<br> array[0][1] = 2;<br> array[0][0] = 1。</p>
    <p class="dropspot">最后，多维数组并不<em>局限于 </em>两个维度，你可以在代码中根据需要为数组添加3、4或更多的维度，只需进一步添加 <span class="inline">[n]</span> 参数即可，例如。</p>
    <p class="code">array[0][0][0] = 1; // 一个三维数组<br> array[0][0][0] = 1; // 一个四维数组<br> // 等等。</p>
  </div>
  <p> </p>
  <p>就像普通的变量一样，你可以将数组传递给<a href="Script_Functions.htm">脚本函数</a>和<a href="Method_Variables.htm">方法变量</a>使用，然后返回给调用该函数的实例。要做到这一点。
    你只需要指定数组变量（不需要每个单独的位置，也不需要 <span class="inline">[]</span> 括号），整个数组将<b>以引用的方式传递</b>到函数中。然而，如果你改变任何
    数组中的任何一个值，该数组将被复制到一个<em>临时 </em>数组中，只用于该函数。<strong>请注意这里使用的是<i>临时</i></strong>这个词！你实际上并不是在传递数组本身。你实际上不是把数组本身传入函数（就像你传入一个
    变量），而是要求该函数创建一个数组的<i>副本</i>，你将改变这个数组。这意味着，如果你想改变任何数组的值，你<b>必须总是</b>从函数中<b>返回数组</b>（这种行为
    被称为 &quot;<em>写时</em>拷贝<em>&quot;）。)</em></p>
  <p class="note"><b>注意： </b>由于这种内部工作方式，将数组传递给函数可能会影响性能，特别是当数组非常大时。所以要小心使用这个功能</p>
  <p>作为一个例子，考虑以下代码。首先，我们创建我们要使用的数组，然后将该数组传递给函数。</p>
  <p class="code">for (var i = 9; i &gt; -1; --i;)<br> {
    <br> a[i] = i;<br> }
    <br> my_array_func(a);
  </p>
  <p>该函数本身是一些简单的东西，如。</p>
  <p class="code">my_array_func = function(array)<br> {
    <br> for (var i = 9; i &gt; -1; --i;)<br> {
    <br> array[i] = i * 100;<br> }
    <br> }
  </p>
  <p>现在你会期望最终的数组持有900、800、700等值。但是，情况并非如此，因为我们<i>并没有</i>从函数中返回数组，所以我们所改变的只是在我们将数组作为参数传入函数时创建的临时拷贝。
    作为参数传入函数时创建的临时副本，而当函数完成后，这个临时副本也基本上消失了。为了纠正这个问题，我们应该将代码格式化如下。</p>
  <p class="code">for (var i = 9; i &gt; -1; --i;)<br> {
    <br> a[i] = i;<br> }
    <br> a = my_array_func(a);</p>
  <p>而现在的函数应该是这样的。</p>
  <p class="code">my_array_func = function(array)<br> {
    <br> for (var i = 9; i &gt; -1; --i;)<br> {
    <br> array[i] = i * 100;<br> }
    <br> return array;<br> }
  </p>
  <p class="note"><b>注意： </b>如果你不改变任何数组的值，而只是引用它们，那么上面的内容就<b>没有</b>必要。引用一个数组不会复制它，而且解析起来会更快。</p>
  <p>同样值得注意的是，你可以使用访问器<tt>@</tt>从一个函数中引用一个数组，并直接改变其值，这就节省了将其复制到函数中的CPU开销。你可以找到更多关于访问器的信息
    的更多信息，以及它们是如何工作的，还有一个数组的例子，请看下面的页面。</p>
  <ul class="colour">
    <li><a href="Accessors.htm">访问者</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="GML_Overview.htm"><span class="notranslate">GML</span>概述</a></div>
        <div style="float:right">下一步。<a href="Data_Types.htm">数据类型</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Arrays
passing arrays to scripts
deleting arrays
-->
  <!-- TAGS
arrays
-->
</body>
</html>