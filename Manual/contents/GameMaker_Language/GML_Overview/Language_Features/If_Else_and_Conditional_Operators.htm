<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>if / else和条件运算符</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the If / Else and Conditional Operators" />
  <meta name="rh-index-keywords" content="?,if,else,ternary operator,then" />
  <meta name="search-keywords" content="if,else,then,?,ternary,conditional" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>if / else和条件运算符</h1>
  <p>大多数编程语言的一个基本特征是能够提出一个简单的问题，给出一个布尔式的<tt>真</tt>或<tt>假的</tt>答案，在<span class="notranslate">GML</span>中，这是用<tt>if</tt>关键字实现的。一个简单的<tt>if</tt>条件需要
    一个<a class="glossterm" data-glossterm="表情" href="#">表达式</a>，如果该表达式被解析为 <span class="inline">true</span> ，它将执行一个或多个<span class="glossextra">语句</span>。
    有以下基本形式。</p>
  <p class="code">如果（&lt;表达式&gt;）<br> {<br> &lt;语句&gt;;<br> &lt;语句&gt;;<br>...<br> }</p>
  <p><br> 这里你是说，如果一个表达式解析为<tt>真</tt>，那么就做什么。请注意，条件的 &quot;then &quot;部分是隐含的，<em>但是</em>有一个 <span class="inline">then</span> 的关键字可以使用（尽管
    它几乎总是被省略），所以你也可以创建这样的条件式。</p>
  <p class="code">如果（&lt;表达式&gt;），那么<br> {<br> &lt;语句&gt;;<br> &lt;语句&gt;;<br>...<br> }</p>
  <p>除了 <span class="inline">if</span> 和 <span class="inline">then</span> ，你还可以使用<tt>else</tt>关键字在被检查的表达式评估为<tt>false</tt>时做其他事情。这个 &quot;如果......<tt>那么......否则......&quot;</tt>
    形式看起来像这样。</p>
  <p class="code">如果（&lt;表达式&gt;）<br> {<br> &lt;语句&gt;;<br> }<br> else
    <br> {<br> &lt;statement&gt;;<br> }</p>
  <p>在这种情况下，表达式将被评估，如果评估结果为 <span class="inline">false</span> ，则执行 <span class="inline">else</span> 之后的语句，否则执行初始语句（为真<tt>）。</tt></p>
  <p class="note">注意：在<span class="notranslate">GameMaker</span>语言中，任何小于或等于0的值都将评估为 <span class="inline">false</span> ，而任何大于0的值都将评估为 <span class="inline">true</span> 。</p>
  <p>一个好的习惯是，总是在表达式周围加上大括号，在<tt>if</tt>中的语句周围加上大括号{}（否则只有第一条语句会被执行），并在块中为每个语句取一个新行，例如。</p>
  <p class="code">// 这将工作<br> if &lt;expression&gt; &lt;statement&gt;;<br>
    <br> // 示例：<br> if test == true variable = false else variable = true;</p>
  <p class="code">// 这样更好<br> if (&lt;表达式&gt;)<br> {
    <br> &lt;语句&gt;
    <br> }<br> else
    <br> {
    <br> &lt;statement&gt; &lt;statement&gt;
    <br> }
    <br>
    <br> // 示例<br> if (test == true)<br> {<br> variable = false;<br> }<br> else
    <br> {<br> variable = true;<br> }</p>
  <p>请注意，虽然这样做略显冗长，但它意味着代码中没有歧义，而且在任何时候都能在所有平台上正确编译。然而，最初的例子可能不是这样，正如在<a href="../Expressions_And_Operators.htm">表达式和运算符</a>页面中解释的那样。</p>
  <p class="note"><strong>注意</strong>：当比较两个值是否相等时，你应该使用 &quot;<span class="inline">==</span>&quot; 操作符，而只使用 &quot;<span class="inline">=</span>&quot; 进行赋值。目前<span class="notranslate">GameMaker</span>将
    将它们视为可互换的，但这在未来可能会改变，当使用正确的运算符进行比较和赋值时，你的代码会更干净、更明显。</p>
  <p>为了给出一个使用 <span class="inline">if</span> 的正确例子，请看下面的代码，当放在步骤事件中时，它将把一个实例移向房间中<tt>x=200</tt>的位置。</p>
  <p class="code">如果（x &lt; 200）<br> {
    <br> x += 4;<br> }
    <br> else
    <br> {
    <br> x = 200;<br> }
  </p>
  <p>请注意，你也可以在 <span class="inline">if</span> ，即：在同一语句中检查不同的值或表达式，进行<i>复合</i>检查。这些检查可以使用各种<a href="../Expressions_And_Operators.htm">组合运算符</a>（<tt>&amp;&amp; and, ||</tt>or,<tt> and</tt>^^ xor）。当你这样做时，<span class="notranslate">GameMaker Studio 2</span>将一次对它们中的每一个进行评估，并根据它们的评估结果，然后其余的可能被跳过。比如说。</p>
  <p class="code">如果 (keyboard_check_pressed(vk_enter)) &amp;&amp; (instance_exists(obj_Player))<br> {
    <br> go = false;<br> alarm[0] = room_speed;<br> }
  </p>
  <p>这里我们使用<tt>&amp;&amp;&quot;和 &quot;</tt>运算符进行检查，所以它是在检查if<em>中的 </em>两个条件是否都为真<tt>，</tt>如果第一个<tt>条件</tt>为假，那么第二个<tt>条件</tt>甚至不会被检查。
    被检查。这被称为代码的 &quot;短路&quot;，所以当组合表达式进行检查时，你应该确保 &quot;最便宜 &quot;的表达式总是放在第一个，以避免在第一个表达式评估为真时评估更昂贵的表达式。
    评估为 <span class="inline">false</span> 。类似地，如果一个条件在编译时可以被评估为<span class="inline">true</span> 或 <span class="inline">false</span> ，那么整个条件将从代码中删除。
    例如，假设你有一个用于调试的<a href="../Variables/Constants.htm">宏</a> <span class="inline">DEBUG_ON </span>，它可以是 <span class="inline">true</span> ，也可以是 <span class="inline">false</span> - 当它被设置为 <span class="inline">false</span> ，那么下面的代码块将在编译时从游戏中被删除。</p>
  <p class="code">如果DEBUG_ON == true<br> {<br> show_debug_message(&quot;Instances = &quot; + string(instance_count));<br> }</p>
  <p>你还可以进行<b>条件操作</b>（也称为<b>三元</b>操作），这基本上是一种执行基本if的 &quot;快捷 &quot;方式。它的语法如下。</p>
  <p class="code">变量 = &lt;条件&gt; ? &lt;语句1 (如果真)&gt; :<i>&lt;语句</i>2 (如果假)&gt;</p>
  <p>条件运算符 &quot;<span class="inline">?</span>&quot; 将返回两个给定值中的一个，这取决于条件表达式的评估结果是真还是<tt>假</tt>，比如说。</p>
  <p class="code">var temp_x = (x &lt; (room_width / 2)) ?32: (room_width - 32);</p>
  <p>上述代码将检查 &quot;x &quot;的值与房间宽度的一半的值，然后如果它小于这个值，它将把 &quot;<span class="inline">temp_x</span>&quot;设置为32，否则 &quot;<span class="inline">temp_x</span>&quot;将是房
    宽度-32。下面是一些更多的使用例子。</p>
  <p class="code">draw_text(x, y, &quot;The fee is &quot; + (global.member ? &quot;$2.00&quot; : &quot;$10.00&quot;));<br> path_start(((global.level &gt; 10) ? path_hard : path_easy;), 2, path_action_reverse, true);<br> (-hp &lt;= 0) ? instance_destroy() : score +=
    10;</p>
  <p>值得注意的是，你可以嵌套条件操作，但如果你这样做，那么每个操作都需要用括号括起来，比如说。</p>
  <p class="code">var c = a ? &quot;foo&quot; : (b ? &quot;bar&quot; : &quot;whee&quot;); // 正确<br> var c = a ? &quot;foo&quot; : b ? &quot;bar&quot; : &quot;whee&quot;; // 将导致一个错误</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="../Language_Features.htm">语言特点</a></div>
        <div style="float:right">下一页:<a href="repeat.htm">重复</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
if
else
then
ternary operators
conditional operators
-->
  <!-- TAGS
if
else
then
-->
</body>
</html>