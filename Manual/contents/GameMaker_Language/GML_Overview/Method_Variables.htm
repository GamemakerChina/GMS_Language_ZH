<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>方法变量</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Method Variables" />
  <meta name="rh-index-keywords" content="Method Variables" />
  <meta name="search-keywords" content="Method Variables,methods,method" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>方法变量</h1>
  <p>方法变量本质上是一个被分配了一个函数的变量，将该函数 &quot;绑定 &quot;到一个实例上，使你能够使用该变量来引用该函数--就像你使用一个运行时<a href="Runtime_Functions.htm"><span class="notranslate">函数</span></a>名来引用一个内置的GML<span class="notranslate">函数。</span>使用的变量在范围上可以是<em>本地的</em>、<em>实例</em>的或<em>全局的</em>（关于变量范围的更多信息，见<a href="Variables_And_Variable_Scope.htm">这里</a>）。</p>
  <p>创建一个方法变量的语法如下。</p>
  <p class="code">&lt;variablename&gt; = function(&lt;parameter1&gt;, &lt;parameter2&gt;, etc... )<br> {
    <br> &lt;statement1&gt;;<br> &lt;statement1&gt;;<br>...<br> }
  </p>
  <p>或</p>
  <p class="code">function &lt;variablename&gt;(&lt;parameter1&gt;, &lt;parameter2&gt;, etc... )<br> {
    <br> &lt;statement1&gt;;<br> &lt;statement1&gt;;<br>...<br> }
  </p>
  <p>然而，一般来说，你会在方法中使用<em>第一种 </em>形式，而在定义<a href="Script_Functions.htm">脚本函数</a>时使用第二种形式，因为第二种形式也会给函数名分配一个脚本索引，而第一种
    形式将是一个 &quot;真正的 &quot;方法（<a href="Variables/Global_Variables.htm">如果</a>用于定义脚本函数，则需要使用全局<a href="Variables/Global_Variables.htm">前缀</a>）。</p>
  <p class="note"><strong>注意</strong>：你可以通过在项目中使用两个表单，然后分别调用<span class="notranslate">运行时</span>函数<a href="../GML_Reference/Variable_Functions/typeof.htm">typeof()</a>来检查。一个将被归类为 &quot;数字&quot;--因为
    它返回一个脚本索引ID，而另一个将被归类为 &quot;方法&quot;。</p>
  <p>因此，请记住--一般来说--我们在谈论方法和方法变量时，总是指那些<em>没有 </em>被定义为脚本索引的函数。 </p>
  <p>下面你可以看到三个使用不同作用域创建方法变量的简单例子。</p>
  <p class="code">// 本地<br> var _debug = function(message)<br> {
    <br> show_debug_message(message);<br> }
    <br>
    <br> // 实例<br> do_maths = function(val1, val2, val3)<br> {
    <br> return (val1 * val2) - val3;<br> }
    <br>
    <br> // 全局<br> global.pd = function(_x1, _y1, _x2, _y2);<br> {
    <br> return point_distance(_x1, _y1, _x2, _y2);<br> }
  </p>
  <p>请注意，在上面的代码中，作为函数输入的各种参数都被命名了，这些名称是应该在函数中用来指代不同的输入。还要注意的是，你可以使用 <span class="inline"><a href="Language_Features/return.htm">return</a></span> 语句从一个函数中返回一个值，以便在你的代码中使用，一个<em>没有</em>定义返回值的函数，将默认返回<span class="inline">undefined</span> 。</p>
  <p class="note"><strong>注意</strong>：虽然变量将在所选择的作用域中，但实际的函数将被绑定到它最初定义的作用域中。例如，<a href="Script_Functions.htm">脚本函数</a>都是全局范围和 &quot;非绑定&quot;
    即：它们不与任何实例相关联），但是如果你有一个脚本函数，在其中创建了另一个函数作为方法变量，然后你从一个实例中调用这个脚本函数，在脚本中使用的函数将<strong>作为一个方法绑定到实例变量</strong>。
    一般来说，这不是你需要考虑的问题，但是对于使用方法变量的更复杂的操作，这是值得考虑的。这也适用于使用其他结构，比如 <a href="Language_Features/with.htm"><span class="inline">with</span></a>    - 当你在with里面创建一个方法变量时，该函数将被绑定到当前范围内的实例。</p>
  <p>一旦创建了方法变量，就可以像使用<span class="notranslate">运行时</span>函数或脚本函数一样使用，比如说。</p>
  <p class="code">create_vec = function(_x1, _y1, _x2, _y2);<br> {
    <br> var _array;<br> _array[0] = point_distance(_x1, _y1, _x2, _y2);<br> _array[1] = point_direction(_x1, _y1, _x2, _y2);<br> return _array;<br> }
    <br>
    <br> vec = create_vec(x, y, mouse_x, mouse_y);</p>
  <p>在一个函数中创建的变量将遵循与正常情况相同的规则，并将根据所使用的关键字或函数调用的范围来确定范围。在上面的例子中，我们使用了 <span class="inline">var</span> ，所以数组变量是在
    的<em>局部 </em>范围内。如果我们没有使用这个关键字，那么这个变量就会在调用函数的实例的范围内被创建。</p>
  <p>方法，就像脚本函数一样，也可以接受可选的参数，这些参数在没有传入时有默认值。</p>
  <p class="code">create_attachment = function(_attachment,<strong>_x = x</strong>,<strong>_y = y</strong>)<br> {
    <br> return instance_create_layer(_x, _y, layer, _attachment);<br> }
  </p>
  <p>上述函数需要三个参数，其中最后两个参数是可选的。如果在调用函数时没有传入这些参数，那么它们将默认使用实例的x和y坐标。</p>
  <p>请注意，如果一个参数没有被传入，并且它没有默认值，那么它将等于<tt>未定义</tt>。</p>
  <p>方法也可以利用静态变量，这些变量在每次函数调用时都保持其数值。请<a href="Functions/Static_Variables.htm">阅读本页</a>以了解更多信息。</p>
  <p>下面我们列出一些与方法变量相关的辅助函数。</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/is_method.htm">is_method</a></li>
    <li><a href="../GML_Reference/Variable_Functions/method.htm">方法</a></li>
    <li><a href="../GML_Reference/Variable_Functions/method_get_self.htm">method_get_self</a></li>
    <li><a href="../GML_Reference/Variable_Functions/method_get_index.htm">method_get_index</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="GML_Overview.htm"><span class="notranslate">GML</span>概述</a></div>
        <div style="float:right">下一步。<a href="Structs.htm">结构</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions
User Defined Functions
-->
  <!-- TAGS
method_variables
-->
</body>
</html>