<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>层_脚本_begin</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the function layer_script_begin" />
  <meta name="rh-index-keywords" content="layer_script_begin" />
  <meta name="search-keywords" content="layer_script_begin" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>层_脚本_begin</h1>
  <p>通过这个函数，你可以给一个图层指定一个<a href="../../../../GML_Overview/Script_Functions.htm">脚本函数</a>，它将在图层渲染之前被调用。当添加一个函数到一个图层时，在这种方式下，它将在每个不同的绘制事件开始时被运行。
   <i>的</i>开始，所以你可能想在指定的函数中检查哪个事件是当前渲染的，并调整代码以适应。这可以通过检查 <a href="../../Objects/Object_Events/event_type.htm"><tt>事件类型</tt></a>    和/或 <a href="../../Objects/Object_Events/event_number.htm"><tt>事件_编号</tt></a>(见下面的扩展例子)。请注意，该函数<i>并不是</i>要在任何绘制事件或步骤事件中被调用，而只是需要在
    在<strong>房间创建代码</strong>中或一个实例的<strong>创建事件 </strong>/<strong>房间开始事件</strong>中调用。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">layer_script_begin(layer_id, script)。</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>layer_id</td>
        <td>目标层的唯一ID值（或作为字符串的层名）。</td>
      </tr>
      <tr>
        <td>脚本</td>
        <td>要分配给该层的脚本函数索引</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code">不适用</p>
  <p> </p>
  <h4>扩展实例。</h4>
  <p>在这个扩展的例子中，我们将首先向你展示一个简单的脚本函数的结构，以设置一些<span class="notranslate">着色器</span>的统一数据，这样当给定的图层被绘制时，这个函数将被运行，<span class="notranslate">着色器</span>将正确工作。在这个例子中，值得一提的是
    值得注意的是，我们是如何检查哪个事件被调用的，从而使函数的其余部分只在我们要求它工作的特定事件上运行--在本例中，只在主绘制事件上。</p>
  <p class="code">/// @function layer_<span class="notranslate">shader</span>_start();<br> function layer_<span class="notranslate">shader</span>_start()
    <br> {
    <br> if event_type == ev_draw<br> {
    <br> if event_number == 0<br> {
    <br> color_to_find =<span class="notranslate">shader</span>_get_uniform(<span class="notranslate">sShaderDemo5</span>, &quot;f_Colour1&quot;);<br> color_to_set = shader_get<span class="notranslate">_uniform</span>(<span class="notranslate">sShaderDemo5, &quot;f_</span>Colour2&quot;);<br> shader_set(s_<span class="notranslate">ColourChanger</span>) 。
    <br> <span class="notranslate">shader</span>_set_uniform_f(color_to_find, 1,1,1 );<br> <span class="notranslate">shader</span>_set_uniform_f(color_to_set, 1,0,0 );<br> }
    <br> }
    <br> }
  </p>
  <p>然后我们会有一个配套的函数，在所有绘图完成后重置<span class="notranslate">着色器</span>。</p>
  <p class="code">/// @function layer_<span class="notranslate">shader</span>_end();<br> function layer_<span class="notranslate">shader</span>_end()
    <br> {
    <br> if event_type == ev_draw<br> {
    <br> if event_number == 0<br> {
    <br> <span class="notranslate">shader</span>_reset()。
    <br> }
    <br> }
    <br> }
  </p>
  <p>现在我们已经定义了用于设置<span class="notranslate">着色器</span>的脚本函数，然后我们必须将它们分配给一个特定的层，以便该层知道如何调用它们。这将在房间创建代码中完成，或者在一些控制器对象的创建事件或房间启动事件中完成。
    控制器对象（它们不需要每一步都被设置，而是在房间开始的时候，或者在最初创建层的时候设置一次）。</p>
  <p class="code">var lay_id = layer_get_id(&quot;Instances&quot;);<br> layer_script_begin(lay_id, layer_shader_<span class="notranslate">start);</span><br> layer_script_end(lay_id, layer_shader_end<span class="notranslate">) 。</span></p>
  <p>这最后的代码块将脚本分配给该层。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="General_Layer_Functions.htm">一般层的功能</a></div>
        <div style="float:right">下一页：<a href="layer_script_end.htm">layer_script_end</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
layer_script_begin
-->
  <!-- TAGS
layer_script_begin
-->
</body>
</html>