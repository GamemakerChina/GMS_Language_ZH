<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>序列事件、时刻和广播信息</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different functions and variables associated with Sequence Events, Moments and Broadcast Messages" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Sequence Events,Sequence Momements,Sequence Messages,broadcast messages,event_create,event_destroy,event_clean_up,event_step,event_step_begin,event_step_end,event_async_system,event_broadcast_message" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>事件、时刻和广播信息</h1>
  <p>除了<a href="Sequences.htm">这里</a>列出的序列结构的所有属性外，你还有可能在序列中添加特殊的 &quot;动作 &quot;属性。有三种不同类型的
    这些 &quot;动作 &quot;属性可以被添加到一个序列对象中--事件、时刻和广播信息。<b>瞬间</b>和<b>广播信息</b>--每一种都会在下面的章节中详细解释
    在下面的章节中详细说明。</p>
  <p> </p>
  <h2>序列事件</h2>
  <p>序列对象可以添加<b>事件</b>，这些事件类似于对象资产使用的事件。你分配给序列对象的事件将以特定的顺序发生，可以是在序列生命周期的某个定义的时刻发生一次，也可以是在序列运行的每一帧发生一次。
    在序列生命周期中的某个时刻发生一次，或者在序列运行的每一帧中发生。在本节中，我们将讨论如何使用代码来处理这些事件，但它们也可以使用<a href="../../../../The_Asset_Editors/Sequences.htm">序列编辑器</a>来添加。
    请注意，这里列出的事件的顺序不受<a class="glossterm" data-glossterm="弹头" href="#">播放头</a>方向的影响，即使序列在向后播放，事件仍将按照以下的顺序运行
    以下。</p>
  <p>可用的事件有：。<b></b></p>
  <ul class="colour">
    <li><b>创建</b>：当在一个图层上创建一个序列实例时，这将被触发。</li>
    <li><b>销毁</b>：当一个层上的序列实例被销毁时，会触发这个功能。</li>
    <li><b>清理</b>：当一个序列实例被垃圾回收时，就会触发这个功能。</li>
    <li><b>步骤</b>：就在通常的对象步骤事件之前被触发。<b>重要的是!</b>如果序列暂停了，那么这个事件将不会被触发，直到序列再次开始播放后的下一个步骤。</li>
    <li><b>开始步骤</b>：就在对象开始步骤事件之前被触发。<b>重要的是!</b>如果序列暂停了，那么这个事件将不会被触发，直到序列再次开始播放后的下一个步骤。</li>
    <li><b>结束步骤</b>：就在对象结束步骤事件之前被触发。<b>重要的是!</b>如果序列暂停了，那么这个事件将不会被触发，直到序列再次开始播放后的下一个步骤。</li>
    <li>异<b>步系统</b>：与任何对象的<a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/System.htm">异步系统事件</a>处理程序一样被触发。<em><b>重要的是!</b>如果序列暂停了，那么这个事件将不会被触发。</em></li>
    <li><b>广播信息</b>：在序列更新期间，当遇到广播信息<span class="notranslate">关键帧</span>时被触发。</li>
  </ul>
  <p>所有的事件都需要与脚本中定义的函数相关联，所以要设置一个事件，必须将<a href="../../../GML_Overview/Method_Variables.htm">方法变量</a>分配给一个具有正确的
    名称，告诉序列哪个事件应该调用这个函数。这方面的语法如下。<br>
  </p>
  <p class="code">&lt;sequence_struct&gt;.&lt;event_property&gt; = method(&lt;sequence_struct&gt;, &lt;function_name&gt;)。</p>
  <p>不同事件的序列结构属性如下。<tt></tt></p>
  <ul class="colour">
    <li><tt>事件_创建</tt><tt></tt></li>
    <li><tt>事件销毁</tt><tt></tt></li>
    <li><tt>事件_清理</tt><tt></tt></li>
    <li><tt>事件_步骤</tt><tt></tt></li>
    <li><tt>事件_step_begin</tt><tt></tt></li>
    <li><tt>事件_步骤_结束</tt></li>
    <li><tt>事件_async_system</tt><tt></tt></li>
    <li><tt>事件_广播_信息</tt></li>
  </ul>
  <p>举个使用的例子，假设我们想让序列在检测到鼠标左键点击时反转方向。我们首先需要创建一个带有我们想要调用的函数的脚本，像这样。</p>
  <p class="code">/// @function seq_reverse();<br>
    <br> function seq_reverse()<br> {
    <br> if mouse_check_button_pressed(mb_left)<br> {
    <br> if self.headDirection == seqdir_right<br> {
    <br> self.headDirection = seqdir_left;<br> }
    <br> else self.headDirection = seqdir_right;<br> }
    <br> }
  </p>
  <p>在这个函数中，我们所做的就是监听鼠标的按压，然后扭转该方法所绑定的序列的播放方向。你会注意到，目前你不能向与这些属性相关的函数传递任何参数。
    链接到这些属性，而且在所有情况下，函数范围内的变量都是 <a href="../../../GML_Overview/Instance_Keywords.htm"><tt>自我</tt></a>变量在函数的范围内被指定为序列实例。</p>
  <p class="note"><b>注意</b>：值得注意的是，在上面的脚本中，自我标识符可以省略，只是用来明确显示本例中使用的方法变量的范围。</p>
  <p>为了将其分配给一个序列，你会做这样的事情。</p>
  <p class="code">var _seq = sequence_get(Sequence1);<br> _seq.event_step = method(_seq, seq_reverse);</p>
  <p>我们现在已经给序列<i>对象</i>分配了一个步骤事件，其功能是检测鼠标何时被按下，然后在序列<i>实例</i>被创建后改变其播放头的方向。
    在一个房间里被创建后，改变序列实例的播放方向。</p>
  <p> </p>
  <h2><label for="2">瞬间</label></h2>
  <p>序列<b>时刻</b>是一个独特的代码动作，在序列播放时在一个或多个指定的帧上被触发。这些代码时刻--就像事件（上面解释的）--只是预定义的<a href="../../../GML_Overview/Method_Variables.htm">方法变量</a>，在给定的帧上被触发。
    在给定的帧上被触发。例如，如果你想让一个序列在动画的特定帧上创建一个 &quot;子弹 &quot;实例--首先你需要创建用于这个动作的函数，类似这样。</p>
  <p class="code">/// @function seq_shoot();<br>
    <br> seq_shoot = function()<br> {
    <br> instance_create_layer(sequence.xorigin, sequence.yorigin, &quot;Instances&quot;, obj_Bullet);<br> }
  </p>
  <p>然后你会将其添加到序列结构的<tt><span class="notranslate">momentKeyframes</span></tt>属性中的一个帧。这基本上是一个 &quot;特殊 &quot;的轨道，只用于此目的，因此只能接受与您希望序列具有的瞬间动作相关的关键帧<span class="notranslate">数据</span>。
    与你希望序列拥有的时刻动作相关联。创建该轨道的方式与创建其他轨道的方式基本相同，即创建<span class="notranslate">关键帧</span>结构并将<span class="notranslate">关键帧</span>数据填入其中，其中通道0是唯一的通道
    通道0是唯一可以使用的通道，轨道类型是<tt>seqtracktype_moment</tt>。下面是一个如何创建的例子，使用我们上面定义的函数，在给定的时刻（帧）上发射。</p>
  <p class="code">var _seq = sequence_get(my_Seq);<br> var _k = array_create(3);<br> _k[0] = sequence_<span class="notranslate">keyframe</span>_new(seqtracktype_moment);<br> _k[0] 。frame = 60;<br> _k[1] = sequence_<span class="notranslate">keyframe</span>_new(seqtracktype_moment);<br> _k[1].frame = 120;<br> _k[2] = sequence_<span class="notranslate">keyframe</span>_new(seqtracktype_moment);<br> _k[2] 。frame = 180;<br> var _d = array_create(1);<br> _d[0] = sequence_<span class="notranslate">keyframedata</span>_new(seqtracktype_moment);<br> _d[0].channel = 0;<br> _d[0].event = method(_d[0], seq_shoot);<br> _k[0].channels = _d;<br> _k[1].channels = _d;<br> _k[2].channels
    = _d;<br> _seq.<span class="notranslate">momentKeyframes</span>= _k;</p>
  <p>上面的代码将简单地设置 &quot;时刻 &quot;轨道的第60、120和180帧来调用seq_shoot方法。你会注意到，目前你还不能向用于每个时刻的函数传递任何参数。
    在所有情况下，函数范围内的<tt>self</tt>变量都被指定为序列实例（你一般不需要使用self<tt>，但</tt>在某些特殊情况下
    但在一些特殊情况下，它可能是有用的）。)</p>
  <p> </p>
  <h2><label for="3">广播信息</label></h2>
  <p>序列可以被用来生成<b>广播信息</b>，这是一个简单的字符串，被添加到动画时间轴上的特定帧，当时间轴上的那个点被达到时，这个字符串将被广播给所有监听它的
    对象实例收听。你可以在IDE中使用<a href="../../../../The_Asset_Editors/Sequences.htm">序列编辑器</a>添加这些信息，但也可以用代码来创建和编辑。</p>
  <p>要使用<span class="notranslate">GML</span>在序列上创建一个广播信息，你需要将它们添加到序列结构的<tt><span class="notranslate">messageEventKeyframes</span></tt>属性中的一个框架中。这本质上是一个 &quot;特殊 &quot;的轨道，只用于
    的 "特殊 "轨道，因此只能接受与你希望序列拥有的广播信息相关的<span class="notranslate">关键帧</span>数据。创建该轨道的方式与创建其他轨道的方式基本相同，即创建<span class="notranslate">关键帧</span>结构并将关键帧数据填入其中。
    用<span class="notranslate">关键帧</span>数据填充它们，其中通道0是你可以使用的唯一通道，轨道类型是<tt>seqtracktype_message</tt>。下面是一个如何创建的例子。</p>
  <p class="code">var _seq = sequence_get(my_Seq);<br> var _k = array_create(2);<br> _k[0] = sequence_<span class="notranslate">keyframe</span>_new(seqtracktype_message);<br> _k[0].frame = 60;<br> _k[1] = sequence_<span class="notranslate">keyframe</span>_new(seqtracktype_message);<br> _k[1] 。frame = 120;<br> var _m1 = array_create(2);<br> _m1[0] = &quot;Hello&quot;;<br> _m1[1] = &quot;World&quot;;<br> var _m2 = array_create(1);<br> _m2[0] = &quot;This is a Broadcast Message&quot;;<br> var _d1 = array_create(1);<br> _d1[0] = sequence_<span class="notranslate">keyframedata_new(</span>seqtracktype_message);<br> _d1[0] 。channel = 0;<br> _d1[0].events = _m1;<br> var _d2 = array_create(1);<br> _d2[0] = sequence_<span class="notranslate">keyframedata</span>_new(seqtracktype_message);<br> _d2[0] 。channel = 0;<br> _d2[0].events = _m2;<br> _k[0].channels = _d1;<br> _k[1].channels = _d2;<br> _seq.<span class="notranslate">messageEventKeyframes</span>= _k;</p>
  <p>你会注意到，消息文本是以数组的形式传递给<span class="notranslate">关键帧</span>数据通道的。这是因为你可以在同一帧上广播多个消息，并让不同的对象实例监听它们，并根据
    他们实际期待的消息而作出不同的反应。</p>
  <p>一旦序列发出了广播消息，你可以使用对象实例中的<i>其他</i>&gt;<i>广播消息</i>事件来解析它，<a href="../../../../The_Asset_Editors/Sequence_Properties/Broadcast_Messages.htm">这里</a>有详细的解释。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Sequences.htm">序列</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Sequence Events
Sequence Moments
Sequence Broadcast Messages
broadcast Messages
event_create
event_destroy
event_clean_up
event_step
event_step_begin
event_step_end
event_async_system
event_broadcast_message
-->
  <!-- TAGS
sequence_events_moments_broadcasts
-->
</body>
</html>