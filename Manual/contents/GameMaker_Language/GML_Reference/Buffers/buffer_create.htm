<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>缓冲区创建</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for buffer_create" />
  <meta name="rh-index-keywords" content="buffer_create,buffer_fixed,buffer_grow,buffer_wrap,buffer_fast,buffer_vbuffer" />
  <meta name="search-keywords" content="buffer_create,buffer_fixed,buffer_grow,buffer_wrap,buffer_fast,buffer_vbuffer" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>缓冲区创建</h1>
  <p>你用这个函数在你的游戏中分配一部分内存作为缓冲区，该函数返回唯一的<i>缓冲区ID</i>，该<i>ID</i>应该存储在一个变量中，并用于所有对缓冲区的进一步函数调用。然后，这个缓冲区可以被
    缓冲区可以用来存储不同类型的数据（当你使用函数写入缓冲区时，可以指定 <a href="buffer_write.htm"><tt>buffer_write()</tt></a>函数写入缓冲区时指定，以下常数用于定义缓冲区类型。</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>恒定</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>缓冲区_固定</td>
        <td>一个固定大小的缓冲区。</td>
      </tr>
      <tr>
        <td>缓冲区_增长</td>
        <td>随着数据的增加，缓冲区将动态地 &quot;增长&quot;。</td>
      </tr>
      <tr>
        <td>缓冲区_包装</td>
        <td>一个缓冲区，数据将被 &quot;包裹 &quot;起来。当被添加的数据达到缓冲区大小的极限时，被覆盖的数据将被放回缓冲区的起点，并从该点继续写入。</td>
      </tr>
      <tr>
        <td>缓冲区_快速</td>
        <td>特殊的 &quot;剥离 &quot;缓冲区，读/写速度极快。只能与<tt>buffer_u8</tt> <a href="buffer_read.htm">数据类型</a>一起使用，并且<i>必须</i>是1字节对齐的。</td>
      </tr>
      <tr>
        <td>buffer_vbuffer</td>
        <td>这种类型的缓冲器只能作为顶点缓冲器使用。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>除了缓冲区类型外，你还必须为缓冲区设置<i>字节对齐</i>。这个值取决于你想在缓冲区中存储的数据，在大多数情况下，值为1是完全可以的。然而，要注意的是
    对于某些操作来说，特定的对齐方式是<i>必不可少的</i>，不正确的对齐方式可能会导致错误（关于对齐方式的更多细节请参见<a href="../../../Additional_Information/Guide_To_Using_Buffers.htm">缓冲区</a>）。下面是一个一般的
    以下是一个一般的指南，说明哪些值最适合于每种数据类型（当有疑问时，使用1的对齐方式）。</p>
  <ul class="colour">
    <li>字符串应该被对齐到1个字节。</li>
    <li>有符号或无符号的8位整数可以对准任何数值，但请注意，对于快速缓冲区（见 <a href="buffer_write.htm"><tt>buffer_write()</tt></a>)，它<i>必须</i>对齐到1。</li>
    <li>有符号或无符号的16位整数应该被对齐到2个字节。</li>
    <li>有符号或无符号的32位整数应该被对齐到4个字节。</li>
    <li>16位以内的浮点应该被对齐到2个字节。<i>(目前不支持！)</i></li>
    <li>多达32位的浮点应该被对齐到4个字节。</li>
    <li>多达64位的浮点应该被对齐到8个字节。</li>
  </ul>
  <p class="note"><b>注意</b>：字节对齐可能非常重要，因为错误的选择可能对性能产生不利影响。</p>
  <p class="note"><b>注意</b>：当你不再需要这样的动态创建的资源时，必须将其从内存中删除，以防止内存泄漏，所以当你用完你所创建的缓冲区后，你应该再次释放它，这一点很重要
    使用 <span style="font-size:1px;"><a href="buffer_delete.htm"><tt style="font-size: 14px">buffer_delete()</tt></a></span>.</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">buffer_create(size, type, alignment)</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>尺寸</td>
        <td>缓冲区的大小（以字节为单位）。</td>
      </tr>
      <tr>
        <td>类型</td>
        <td>要创建的缓冲区的类型（见上面的常数列表）。</td>
      </tr>
      <tr>
        <td>对齐</td>
        <td>缓冲区的字节排列</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code">Int (顶点缓冲区ID)</p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">player_buffer = buffer_create(16384, buffer_fixed, 2);</p>
  <p>上面的代码为一个缓冲区分配了16384字节的内存，并返回该缓冲区的索引，该索引被存储在变量 &quot;player_buffer &quot;中，供将来使用。缓冲区是以两个字节为边界对齐的。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back:<a href="Buffers.htm">缓冲器</a></div>
        <div style="float:right">下一页:<a href="buffer_create_from_vertex_buffer.htm">从顶点缓冲区创建的缓冲区</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
buffer_create
buffer_fixed
buffer_grow
buffer_wrap
buffer_fast
buffer_vbuffer
-->
  <!-- TAGS
buffer_create
-->
</body>
</html>