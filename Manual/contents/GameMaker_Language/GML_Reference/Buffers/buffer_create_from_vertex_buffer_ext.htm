<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>buffer_create_from_vertex_buffer_ext</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for buffer_create_from_vertex_buffer_ext" />
  <meta name="rh-index-keywords" content="buffer_create_from_vertex_buffer_ext" />
  <meta name="search-keywords" content="buffer_create_from_vertex_buffer_ext,buffer_fixed,buffer_grow,buffer_wrap,buffer_fast,buffer_vbuffer" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>buffer_create_from_vertex_buffer_ext</h1>
  <p>你使用这个函数在游戏中分配一部分内存作为缓冲区，填充先前创建的<a href="../Drawing/Primitives/Primitives_And_Vertex_Formats.htm">顶点缓冲区</a>的数据。该函数返回一个唯一的<i>缓冲区ID</i>，该<i>ID</i>应该存储在一个变量中，并用于所有对该缓冲区的后续函数调用。该函数接受要使用的顶点缓冲区的ID（如由函数返回的 <a href="../Drawing/Primitives/vertex_create_buffer.htm"><tt>vertex_create_buffer()</tt></a>,
    例如），并使用以下常数来定义缓冲区的类型。</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>恒定</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>缓冲区_固定</td>
        <td>一个固定大小的缓冲区。</td>
      </tr>
      <tr>
        <td>缓冲区_增长</td>
        <td>随着数据的增加，缓冲区将动态地 &quot;增长&quot;。</td>
      </tr>
      <tr>
        <td>缓冲区_包装</td>
        <td>一个缓冲区，数据将被 &quot;包裹 &quot;起来。当被添加的数据达到缓冲区大小的极限时，被覆盖的数据将被放回缓冲区的起点，然后从该点继续写。</td>
      </tr>
      <tr>
        <td>缓冲区_快速</td>
        <td>特殊的 &quot;剥离 &quot;缓冲区，读/写速度极快。只能与<tt>buffer_u8</tt> <a href="buffer_write.htm">数据类型</a>一起使用，并且<i>必须</i>是1字节对齐的。</td>
      </tr>
      <tr>
        <td>buffer_vbuffer</td>
        <td>这种类型的缓冲器只能作为顶点缓冲器使用。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>除了缓冲区类型外，你还必须为缓冲区设置<i>字节对齐</i>。这个值取决于你想在缓冲区中存储的数据，在大多数情况下，值为1是完全可以的。然而，要注意的是
    对于某些操作来说，特定的对齐方式是<i>必不可少的</i>，不正确的对齐方式可能会导致错误（关于对齐方式的更多细节，见<a href="../../../Additional_Information/Guide_To_Using_Buffers.htm">缓冲区对齐</a>方式）。下面的
    是一个一般的指南，说明哪种值最适合于每种数据类型（当有疑问时，使用1的对齐方式）。</p>
  <ul class="colour">
    <li>字符串应该被对齐到1个字节。</li>
    <li>有符号或无符号的8位整数可以对准任何数值，但请注意，对于一个快速缓冲区（见 <a href="buffer_write.htm"><tt>buffer_write()</tt></a>)，它<i>必须</i>对齐到1。</li>
    <li>有符号或无符号的16位整数应该被对齐到2个字节。</li>
    <li>有符号或无符号的32位整数应该被对齐到4个字节。</li>
    <li>16位以内的浮点应该被对齐到2个字节。<i>(目前不支持！)</i></li>
    <li>多达32位的浮点应该被对齐到4个字节。</li>
    <li>多达64位的浮点应该被对齐到8个字节。</li>
  </ul>
  <p class="note"><b>注意</b>：顶点缓冲区是1字节对齐的，但你可以根据你想处理数据的方式来创建任何对齐方式的缓冲区，因为顶点数据只是一个原始的内存拷贝到缓冲区。</p>
  <p>最后两个参数用于指定你希望复制到新创建的缓冲区的顶点数据范围。起始顶点可以是0到顶点数-1之间的任何地方，然后你给出从该点开始的顶点数
    要复制的顶点数量。你可以使用函数 <tt><a href="../Drawing/Primitives/vertex_get_number.htm">vertex_get_number()</a></tt>来获取存储的顶点总数。</p>
  <p class="note"><b>注意</b>：当你不再需要这样的动态创建的资源时，必须将其从内存中删除，以防止内存泄漏，所以当你用完你所创建的缓冲区后，你应该再次释放它，这一点很重要
    使用 <span style="font-size:1px;"><a href="buffer_delete.htm"><tt style="font-size: 14px">buffer_delete()</tt></a></span>.还要注意，用于创建新缓冲区的顶点缓冲区也不会从内存中删除，你应该使用函数
    <span style="font-size:1px;"><a href="../Drawing/Primitives/vertex_delete_buffer.htm"><tt style="font-size: 14px">vertex_delete_buffer()</tt></a></span>当不再需要它时，你应该使用函数。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">buffer_create_from_vertex_buffer_ext(vertex_buffer, type, alignment, start_vertex, num_vertices)</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>顶点缓冲区（vertex_buffer</td>
        <td>要使用的顶点缓冲器索引。</td>
      </tr>
      <tr>
        <td>类型</td>
        <td>要创建的缓冲区的类型（见下面的常数列表）。</td>
      </tr>
      <tr>
        <td>对齐</td>
        <td>缓冲区的字节排列</td>
      </tr>
      <tr>
        <td>开始时_顶点</td>
        <td>开始的顶点。</td>
      </tr>
      <tr>
        <td>num_vertices</td>
        <td>要复制的顶点总数。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code">Int (顶点缓冲区ID)</p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var v_num = vertex_get_number(model_buff); player_buffer = buffer_create_from_vertex_buffer(model_buffer, buffer_grow, 1, 0, v_num - 1);</p>
  <p>上述代码为一个缓冲区分配了内存，然后将所有顶点的数据从给定的顶点缓冲区复制到该缓冲区，并返回新缓冲区的索引，该索引被存储在变量 &quot;player_buffer &quot;中，供将来使用。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back:<a href="Buffers.htm">缓冲器</a></div>
        <div style="float:right">下一页:<a href="buffer_delete.htm">缓冲区_删除</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
buffer_create_from_vertex_buffer_ext
buffer_fixed
buffer_grow
buffer_wrap
buffer_fast
buffer_vbuffer
-->
  <!-- TAGS
buffer_create_from_vertex_buffer_ext
-->

</body></html>