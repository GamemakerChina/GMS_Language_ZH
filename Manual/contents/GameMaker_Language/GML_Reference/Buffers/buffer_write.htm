<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>緩衝寫入</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for buffer_write" />
  <meta name="rh-index-keywords" content="buffer_write,buffer_u8,buffer_s8,buffer_u16,buffer_s16,buffer_u32,buffer_s32,buffer_u64,buffer_f16,buffer_f32,buffer_f64,buffer_bool,buffer_string,buffer_text" />
  <meta name="search-keywords" content="buffer_write,buffer_u8,buffer_s8,buffer_u16,buffer_s16,buffer_u32,buffer_s32,buffer_u64,buffer_f16,buffer_f32,buffer_f64,buffer_bool,buffer_string,buffer_text" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>緩衝寫入</h1>
  <p>这个函数可以用来向先前创建的缓冲区写入数据。你所写的数据必须与这个函数的 &quot;类型 &quot;参数一致，也就是说，你不能试图把一个字符串写成一个无符号的16位整数，比如说。
    以下常数可以用来定义数据类型。</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>恒定</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>buffer_u8</td>
        <td>一个无符号、8位的整数。这是一个从0到255的正值。</td>
      </tr>
      <tr>
        <td>buffer_s8</td>
        <td>一个有符号的、8位的整数。这可以是一个从-128到127的正值或负值（0被认为是正值）。</td>
      </tr>
      <tr>
        <td>缓冲区_u16</td>
        <td>一个无符号、16位的整数。这是一个从0-65,535的正值。</td>
      </tr>
      <tr>
        <td>缓冲区_s16</td>
        <td>一个有符号的、16位的整数。这可以是一个从-32,768到32,767的正值或负值（0被认为是正值）。</td>
      </tr>
      <tr>
        <td>buffer_u32</td>
        <td>一个无符号、32位的整数。这是一个从0到4,294,967,295的正值。</td>
      </tr>
      <tr>
        <td>缓冲区_s32</td>
        <td>一个有符号的、32位的整数。这可以是一个从-2,147,483,648到2,147,483,647的正值或负值（0被归类为正值）。</td>
      </tr>
      <tr>
        <td>buffer_u64</td>
        <td>一个无符号的64位整数。</td>
      </tr>
      <tr>
        <td>buffer_f16</td>
        <td>一个16位的浮点数。这可以是一个正值或负值，范围与16位有符号整数相同。</td>
      </tr>
      <tr>
        <td>buffer_f32</td>
        <td>一个32位的浮点数。这可以是一个正值或负值，范围与32位有符号整数相同。</td>
      </tr>
      <tr>
        <td>buffer_f64</td>
        <td>一个64位的浮点数。</td>
      </tr>
      <tr>
        <td>buffer_bool</td>
        <td>一个布尔值。只能是1或0<tt>（真</tt>或<tt>假</tt>）。</td>
      </tr>
      <tr>
        <td>缓冲区字符串</td>
        <td>一个任意大小的字符串，最后以一个空结尾字符结束。</td>
      </tr>
      <tr>
        <td>buffer_text</td>
        <td>一个任意大小的字符串，没有最后的空结尾字符。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>该函数如果成功将返回0，如果失败将返回-1。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">buffer_write(buffer, type, value)</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>缓冲区</td>
        <td>要写入的缓冲区的索引。</td>
      </tr>
      <tr>
        <td>类型</td>
        <td>要写入缓冲区的数据类型（见上面的常数列表）。</td>
      </tr>
      <tr>
        <td>价值</td>
        <td>要写的数据。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code">如果成功则为0，如果失败则为-1</p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">buffer_seek(buff, buffer_seek_start, 0);<br> buffer_write(buff, buffer_s16, 0);<br> buffer_write(buff, buffer_s16, x);<br> buffer_write(buff, buffer_s16, y) 。</p>
  <p>上面的代码找到了存储在变量 &quot;buff &quot;中的id的缓冲区的起点，并向其写入了一系列有符号的16位整数值。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back:<a href="Buffers.htm">缓冲器</a></div>
        <div style="float:right">下一页:<a href="buffer_fill.htm">缓冲区填充</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
buffer_write
buffer_u8
buffer_s8
buffer_u16
buffer_s16
buffer_u32
buffer_s32
buffer_u64
buffer_f16
buffer_f32
buffer_f64
buffer_bool
buffer_string
buffer_text
-->
  <!-- TAGS
buffer_write
-->
</body>
</html>