<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>异常_unhandled_handler</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for exception_unhandled_handler" />
  <meta name="rh-index-keywords" content="exception_unhandled_handler" />
  <meta name="search-keywords" content="exception_unhandled_handler" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>异常_unhandled_handler</h1>
  <p>这个<span class="notranslate">运行时</span>函数可以用来在发生运行时<span class="notranslate">异常</span>时 &quot;接管 &quot;默认的GameMaker<span class="notranslate">Studio 2错误信息</span>。你提供了一个方法或函数，当异常发生时被调用，它的第一个参数将是一个结构体
    包含关于异常的信息。这个结构的格式如下。</p>
  <p class="code">{<br> message : &quot;&quot;, //一个字符串，是这个异常的简短信息<br> longMessage : &quot;&quot;, //一个字符串，是这个异常的较长信息<br> script : &quot;&quot;, //一个字符串，描述异常来自哪里 line: 0, //一个实数，是异常来自哪里的行号 stacktrace : [ &quot;&quot;, &quot;&quot;], //一个字符串，是堆栈的行号
    描述异常来自哪里<br> line: 0, //一个实数，是异常来自哪里的行号<br> stacktrace : [ &quot;&quot;, &quot;&quot; ] , //一个字符串数组，是异常产生的堆栈框架
    产生的堆栈帧<br> }
  </p>
  <p>你也可以提供 <span class="inline">undefined</span> 作为参数，这将删除自定义异常处理程序（如果设置了），并恢复到<span class="notranslate">GameMaker Studio 2</span>的默认错误信息。</p>
  <p>这个函数将返回之前设置的异常处理方法，但是如果它从未被改变过，或者之前用 <span class="inline">undefined</span> ，那么它将直接返回 <span class="inline">undefined</span> 。</p>
  <p>将一个方法传递给这个函数意味着不会向用户显示错误信息，你将被允许自己处理这个异常。然而，你不能用它来 &quot;脱离 &quot;异常，继续你的游戏，因为游戏
    仍然会在异常处理程序被调用后关闭。</p>
  <p>请注意，运行该方法的上下文<i>不</i>在一个事件中，所以此时极不可能有任何东西被渲染到屏幕上。一般来说，在这个时候最安全的做法是保存一个文件，其中包括
    异常上下文信息的文件，这样它就可以--例如--在游戏的下一次运行中被解析和处理，然后再进行处理。</p>
  <p>注意，如果你在提供的方法中使用<tt>返回</tt>语句，那么给定的值将被转换为一个整数，并作为运行器的退出代码。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">exception_unhandled_handler(user_handler)。</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>用户处理程序</td>
        <td>用来作为异常处理程序的方法（用户定义的函数），或者 <span class="inline">undefined</span> ，将其重置为默认。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code">方法（或未定义）。</p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">exception_unhandled_handler(function(ex))<br> {
    <br> show_debug_message( &quot;--------------------------------------------------------------&quot;);<br> show_debug_message( &quot;Unhandled exception &quot; + string(ex));<br> show_debug_message( &quot;--------------------------------------------------------------&quot;);<br> if file_exists( &quot;crash.txt&quot;) file_delete(&quot;crash.txt&quot;);<br> var _f = file_text_open_write(&quot;crash.txt&quot;);<br> file_text_write_string(_f, string(ex));<br> file_text_close(_f) 。
    <br> return 0;<br> }
    <br> )
  </p>
  <p>上面的代码将创建一个异常处理方法，并使用它来保存一个带有异常数据的文件。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Debugging.htm">调试</a></div>
        <div style="float:right">下一页:<a href="get_integer.htm">get_integer</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
exception_unhandled_handler
-->
  <!-- TAGS
exception_unhandled_handler
-->
</body>
</html>