<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>gpu_set_tex_mip_filter</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference for the function gpu_set_tex_mip_filter" />
  <meta name="rh-index-keywords" content="gpu_set_tex_mip_filter,tf_point,tf_linear,tf_anisotropic" />
  <meta name="search-keywords" content="gpu_set_tex_mip_filter,tf_point,tf_linear,tf_anisotropic" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>gpu_set_tex_mip_filter</h1>
  <p>通过这个函数，你可以将当前的mip过滤模式设置为支持的三种类型之一。你给出的常数指的是你需要的mip滤波模式，你可以选择<b>点</b>滤波（默认设置，意思是
    无滤波），<b>线性</b>滤波（这也被称为<i>三线滤波</i>）或<b>各向异性</b>滤波（见下面的常数表）。</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>恒定</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>tf_point</td>
        <td>这将禁用mipmap级别之间的过滤，这可能会导致可见的纹理过渡，但能提供最佳性能。</td>
      </tr>
      <tr>
        <td>tf_linear</td>
        <td>这将使mipmap级别之间的线性过滤成为可能（这也被称为<i>三线过滤</i>），这将使纹理过渡更加平滑，但它会对性能产生轻微的影响。</td>
      </tr>
      <tr>
        <td>tf_anisotropic</td>
        <td>这将在mipmap级别之间启用各向异性过滤，这将大大改善纹理过渡的质量，并能减少其他过滤模式下可见的模糊现象，但它对性能的打击最大。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">gpu_get_tex_mip_filter(filter)。</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>过滤器</td>
        <td>使用的mip过滤模式（一个常数，默认：<tt>tf_point</tt>）。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code">不适用</p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">if keyboard_check(ck_enter)<br> {
    <br> switch(gpu_get_tex_mip_filter())
    <br> {
    <br> case tf_point: gpu_set_tex_mip_filter(tf_linear); break;<br> case tf_linear: gpu_set_tex_mip_filter(tf_anisotropic); break;<br> case tf_anisotropic: gpu_set_tex_mip_filter(tf_point); break;<br> }
    <br> }
  </p>
  <p>上面的代码检查键盘，如果指定的键被按下，它就会得到当前的mip过滤器，并将其值切换到下一个，在不同的模式中循环往复。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Mipmapping.htm">Mipmapping</a></div>
        <div style="float:right">下一篇:<a href="gpu_set_tex_mip_filter_ext.htm">gpu_set_tex_mip_filter_ext</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
gpu_set_tex_mip_filter
tf_point
tf_linear
tf_anisotropic
-->
  <!-- TAGS
gpu_set_tex_mip_filter
-->
</body>
</html>