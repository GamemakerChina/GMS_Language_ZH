<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>顶点格式_添加_自定义</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference for vertex_format_add_custom" />
  <meta name="rh-index-keywords" content="vertex_format_add_custom,vertex_type_float1,vertex_type_float2,vertex_type_float3,vertex_type_float4,vertex_type_colour,vertex_type_ubyte4,vertex_usage_position,vertex_usage_colour,vertex_usage_normal,vertex_usage_textcoord,vertex_usage_blendweight,vertex_usage_blendindices,vertex_usage_depth,vertex_usage_tangent,vertex_usage_binormal,vertex_usage_fog,vertex_usage_sample" />
  <meta name="search-keywords" content="vertex_format_add_custom,vertex_type_float1,vertex_type_float2,vertex_type_float3,vertex_type_float4,vertex_type_colour,vertex_type_ubyte4,vertex_usage_position,vertex_usage_colour,vertex_usage_normal,vertex_usage_textcoord,vertex_usage_blendweight,vertex_usage_blendindices,vertex_usage_depth,vertex_usage_tangent,vertex_usage_binormal,vertex_usage_fog,vertex_usage_sample" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>顶点格式_添加_自定义</h1>
  <p>这个函数允许你为特定的顶点格式属性使用一个自定义的数据类型，作为正在创建的新顶点格式的一部分。可使用的值由你选择的数据类型常数定义，列在下面。</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>恒定</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>顶点_类型_float1</td>
        <td>一个单一的浮点值</td>
      </tr>
      <tr>
        <td>顶点_类型_float2</td>
        <td>两个浮点值</td>
      </tr>
      <tr>
        <td>顶点_类型_float3</td>
        <td>三个浮点值</td>
      </tr>
      <tr>
        <td>顶点_类型_float4</td>
        <td>四个浮点值</td>
      </tr>
      <tr>
        <td>顶点_类型_颜色</td>
        <td>四个成分值（r、g、b、a）。</td>
      </tr>
      <tr>
        <td>顶点_类型_立方体4</td>
        <td>四个成分的无符号字节值（从0到255）。</td>
      </tr>
    </tbody>
  </table>
  <p><br> 这些常量的用途也需要被定义，以便这些值可以在<span class="notranslate">正在</span>创建的着色器中被正确地 &quot;绑定&quot;。这是必要的，因为DX和OpenGL有不同的要求。
    你不正确地绑定它们，它们就不会在着色器中正确出现。你可以选择的可用的使用常数如下，你使用的常数将取决于所创建的<span class="notranslate">着色器</span>的具体情况。</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>恒定</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>顶点使用位置</td>
        <td>位置值（x，y，z）。</td>
      </tr>
      <tr>
        <td>顶点使用的颜色</td>
        <td>颜色值（R、G、B、A）。</td>
      </tr>
      <tr>
        <td>顶点的使用情况</td>
        <td>顶点法线值（Nx, ny, nz）。</td>
      </tr>
      <tr>
        <td>顶点_使用_文本坐标</td>
        <td>紫外坐标(u, v)</td>
      </tr>
      <tr>
        <td>顶点使用的混合重量</td>
        <td>输入矩阵的混合重量（例如用于骨骼动画）。</td>
      </tr>
      <tr>
        <td>顶点使用的混合指数</td>
        <td>要使用的矩阵的索引（例如用于骨骼动画）。</td>
      </tr>
      <tr>
        <td>顶点使用深度</td>
        <td>顶点深度缓冲值</td>
      </tr>
      <tr>
        <td>顶点的使用_正切</td>
        <td>切线值</td>
      </tr>
      <tr>
        <td>顶点使用法则</td>
        <td>二态值</td>
      </tr>
      <tr>
        <td>顶点使用的雾</td>
        <td>雾值</td>
      </tr>
      <tr>
        <td>顶点使用实例</td>
        <td>采样器索引</td>
      </tr>
    </tbody>
  </table>
  <p><br> 在使用这样的自定义格式时，有一些重要的事情需要注意。</p>
  <ul class="colour">
    <li>当使用GLSL<span class="notranslate">着色器</span>时，<tt>vertex_format_add_custom(</tt>)函数只支持<tt>vertex_usage_position</tt>,<tt>vertex_usage_colour</tt>,<tt>vertex_usage_normal</tt>和<tt>vertex_usage_textcoord</tt>。这些将映射到<span class="notranslate">着色器</span>的属性
     <tt>in_Position</tt>,<tt>in_Colour[0 - ...]</tt>,<tt>in_Normal</tt>（任何不是这三个属性之一的属性--例如：纹理坐标--可以映射到你定义的任何属性）。</li>
    <li>一般来说，你应该尽可能使用<tt>vertex_usage_textcoord</tt>作为所有额外的参数，因为像<tt>vertex_usage_blendweight</tt>和<tt>vertex_usage_tangent</tt>这样的类型在大多数<span class="notranslate">着色器</span>语言中已经接近废弃，并且可能不会
      正确转换。相反，使用<tt>vec</tt>、<tt>vec2</tt>、<tt>vec3</tt>或<tt>vec4</tt>类型的<tt>vertex_usage_textcoord</tt>，一切都应该可以正常工作。</li>
    <li>GLSL ES<i>不</i>支持整数属性，所以传入<tt>ivec4</tt>是不行的（这种类型通常在传入<tt>vertex_usage_blendindices</tt>时使用<tt>）。</tt>你需要做的是传入纹理坐标，然后在
     <span class="notranslate">着色器</span>中，将它们转换为<tt>ivec4</tt>，像这样。</li>
  </ul>
  <p> </p>
  <p class="code">属性 vec3 in_Position;<br> 属性 vec4 in_BlendIndices;<br> 属性 vec4 in_BlendWeights;<br>
    <br> 变化 vec4 v_vColour;<br> 变化 mat4 v_mat;<br>
    <br> void main()<br> {
    <br> gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * vec4( in_Position.xyz, 1.0);<br> v_vColour = in_BlendWeights;<br> ivec4 t = ivec4( in_BlendIndices) ;<br> v_mat = gm_Matrices[ t.x ];<br> }
  </p>
  <ul class="colour">
    <li>混合权重通常存储在一个数组中，然后使用混合指数进行访问，但你可以看到这里没有将<tt>in_BlendIndices</tt>定义为一个<tt>ivec4</tt>属性，而是一个vec4<tt>，</tt>然后<tt>在代码中</tt>铸成一个<tt>ivec4</tt>。
      然后在代码中转换为ivec4。然后它被用来为使用<tt>gm_Matrix</tt>创建的数组建立索引（你只能使用<tt>INT</tt>值访问一个数组--而不是浮点）。</li>
    <br />
  </ul>
  <h4>语法。</h4>
  <p class="code">vertex_format_add_custom(type, usage)。</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>类型</td>
        <td>这个自定义顶点数据将持有的数据类型（见下面的 <b><i>类型常量</i></b>下面列出的）。)</td>
      </tr>
      <tr>
        <td>使用方法</td>
        <td>数据将得到的用途（见下面的 <b><i>使用常数</i></b>下面列出的）。)</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code">不适用</p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">vertex_format_begin（）;<br> vertex_format_add_textcoord（）。
    <br> vertex_format_add_custom(vertex_type_float3, vertex_usage_position);<br> my_format = vertex_format_end() 。</p>
  <p>上面的代码将创建一个新的顶点格式，只有纹理和3个自定义浮点值的位置。然后，它将格式ID存储在变量 &quot;my_format &quot;中。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Primitives_And_Vertex_Formats.htm">基元和顶点格式</a></div>
        <div style="float:right">下一页: 顶点格式化_<a href="vertex_format_end.htm">结束</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
vertex_format_add_custom
vertex_type_float1
vertex_type_float2
vertex_type_float3
vertex_type_float4
vertex_type_colour
vertex_type_ubyte4
vertex_usage_position
vertex_usage_colour
vertex_usage_normal
vertex_usage_textcoord
vertex_usage_blendweight
vertex_usage_blendindices
vertex_usage_depth
vertex_usage_tangent
vertex_usage_binormal
vertex_usage_fog
vertex_usage_sample
-->
  <!-- TAGS
vertex_format_add_custom
-->

</body></html>