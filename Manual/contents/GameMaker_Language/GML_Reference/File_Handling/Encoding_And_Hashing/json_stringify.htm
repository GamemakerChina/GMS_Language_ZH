<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_stringify</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_stringify" />
  <meta name="rh-index-keywords" content="json_stringify" />
  <meta name="search-keywords" content="json_stringify" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>json_stringify</h1>
  <p>通过这个函数，你可以将单个或嵌套的结构和数组转换成有效的JSON字符串。你提供要使用的初始值（一个数组索引或一个结构引用），然后该函数将 &quot;串化 &quot;它，将其转换为JSON字符串。
    将<span class="notranslate">GameMaker</span>数组转换为JSON数组，并将<span class="notranslate">GameMaker</span>结构转换为JSON对象。</p>
  <p>在使用这个功能时，有一些重要的事情需要注意。</p>
  <ul class="colour">
    <li>该函数<em>不会 </em>将DS地图、列表或任何其他数据结构转换为JSON，而只是存储该结构的内部索引值（由于该索引在游戏运行中会发生变化，所以用处不大），因此
      你不应该尝试对任何可能包含对数据结构的引用的值进行字符串化（为此你有 <a href="json_encode.htm"><span class="inline">json_encode()</span></a>).</li>
    <li>该函数可以将几乎所有的值转换成 &quot;有效的 &quot;JSON字符串，但是由于JSON标准的操作方式，字符串中包含的实际值可能并不完全是你所期望的：<br>
      <br> &quot;JSON对数字是不可知的。在任何编程语言中，可以有各种容量和补充的数字类型，固定或浮动，二进制或十进制。这可能使不同编程语言之间的互换
      语言之间的互换很困难。相反，JSON只提供人类使用的数字表示法：一串数字。所有的编程语言都知道如何理解数字序列，即使它们在内部表示上有分歧。&quot;<br>
      <br> 更多信息请参见ECMA<a href="http://www.ecma-international.org/publications/standards/Ecma-404.htm">JSON标准。</a></li>
    <li>如果你在要转换为JSON的值中包含一个int64，如果它在int32的有效范围内，它将把它写成<i>int</i>，如果它可以这样做而不损失精度，则写成<i>双倍数</i>，或者（如果这两种情况都不适用）写成一个<i>字符串</i>，在它前面有一个标识符&quot;@i64@<tt>&quot;</tt>，在它后面有&quot;$i64$&quot;<tt>。</tt>当你再次解析JSON时，<span class="notranslate">GameMaker Studio 2</span>将拾起这些标识符，并将值重新转换为int64。这确实意味着
      如果JSON是为服务器或其他非<span class="notranslate">GameMaker</span>目标准备的，这些值将不合适，所以应该避免。</li>
    <li>如果你在转换为JSON的值中包含 <span class="inline">infinity</span>, <span class="inline">-infinity</span> 或 <span class="inline">NaN</span> ，它们将被编码为字符串，因为这些值不是JSON标准的一部分，并且
      在解析产生的JSON时，它们将<strong>不会 </strong>被转换回它们的<span class="notranslate">运行时值</span>，而会保持为字符串。请注意， <span class="inline">NaN</span> ，在字符串化时将被转换为 &quot;nan&quot;（小写）。</li>
    <li>在将任何返回的JSON字符串写入 <span class="inline">ini</span> 文件时应注意，因为 <span class="inline">ini</span> 规范在使用引号和转义字符时可能导致问题。参见函数 <a href="../Ini_Files/ini_write_string.htm"><tt>ini_write_string()</tt></a>      获取更多信息。</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code"><code>json_stringify</code>(val)</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>价值</td>
        <td>结构体或数组的参考值，转换为JSON字符串</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code">绳子</p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var _contents = {<br> version : &quot;1&quot;,<br> data:{<br> webSocket : 1,<br> ipv4Address : &quot;95.39.220.218&quot;,<br> ipv6Address : &quot;0000:0000:0000:0000:0000:ffff:5f27:dcda&quot;,<br> header
    : &quot;你正在接收一个数据包&quot;,<br> body : &quot;这个数据包是空的，只用于测试&quot;,<br> },<br> }。
    <br> packet = json_stringify(map);</p>
  <p>上述代码将把&quot;_contents &quot;结构转换为JSON字符串，并将该字符串存储在一个变量中。实际的字符串会是这样的。</p>
  <p class="code">{ &quot;版本&quot;: &quot;1&quot;, &quot;myObj&quot;:{ &quot;header&quot;: &quot;You are receiving a packet&quot;, &quot;webSocket&quot;:1, &quot;body&quot;: &quot;A packet of cheese and onion crisps&quot;, &quot;ipv4Address&quot;: &quot;95.39.220.218&quot;,
    &quot;ipv6Address&quot;: &quot;0000:0000:0000:0000:0000:fff:5f27:dcda&quot; }}</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Encoding_And_Hashing.htm">文件编码</a></div>
        <div style="float:right">下一页:<a href="json_parse.htm">json_parse</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
json_stringify
-->
  <!-- TAGS
json_stringify
-->
</body>
</html>