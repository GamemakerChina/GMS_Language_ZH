<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>碰撞_椭圆</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that gives an overview of the funtion collision_ellipse" />
  <meta name="rh-index-keywords" content="collision_ellipse" />
  <meta name="search-keywords" content="collision_ellipse" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>碰撞_椭圆</h1>
  <p><span class="inline">Collision_ellipse</span> 使用前四个参数（x1,y1,x2,y2）来定义当前房间内一个椭圆的宽度和高度，然后检查由 &quot;obj &quot;参数定义的<b>任何</b>物体是否与该区域发生碰撞。
    定义的任何物体是否与该区域发生碰撞。这种碰撞可以被检查为精确或不精确，你也可以选择检查运行代码的实例本身或不检查。考虑一下这个图片。</p>
  <p><img alt="Collision ellipse example" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Movement_Collisions/collision_ellipse_illustration.png">这里，中间的实例正在使用一个碰撞椭圆来检查
    球物体。现在，蓝色的<i>没有</i>一个精确的边界框，正如你所看到的，即使精灵实际上没有接触到椭圆，碰撞仍然会发生（即使你把函数中的精确选项设置为真），因为
    该精灵的包围盒超过了collision_circle所定义的椭圆区域。另一方面，只有当实际的精灵超过了定义的椭圆时，绿球才会被认为是碰撞的。请记住，为了精确碰撞
    要被考虑，对象精灵和碰撞函数<i>都</i>必须将精确标记为开启。还应该注意的是，该函数的返回值可以是<i>任何</i>一个被认为是碰撞的实例的ID。</p>
  <p>请注意，你可以提供一个实例，而不是一个对象索引 <a href="../../Asset_Management/Instances/Instance_Variables/id.htm"><tt>id</tt></a>来检查一个特定的实例，或者<a href="../../../GML_Overview/Instance_Keywords.htm">实例关键字</a> <span class="inline">all</span> ，或者 <span class="inline">other</span> （取决于事件和当前的代码范围）。</p>
  <p> </p>
  <h4>语法。</h4>
  <p> </p>
  <p>collision_ellipse(x1, y1, x2, y2, obj, prec, notme)。</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>x1</td>
        <td>要检查的椭圆左侧的X坐标。</td>
      </tr>
      <tr>
        <td>y1</td>
        <td>要检查的椭圆顶面的y坐标。</td>
      </tr>
      <tr>
        <td>x2</td>
        <td>要检查的椭圆右侧的X坐标。</td>
      </tr>
      <tr>
        <td>y2</td>
        <td>要检查的椭圆底边的y坐标。</td>
      </tr>
      <tr>
        <td>obj</td>
        <td>检查实例碰撞的对象。</td>
      </tr>
      <tr>
        <td>沉淀</td>
        <td>检查是基于精确的碰撞<tt>（真</tt>，比较慢）还是基于其一般的边界盒<tt>（假</tt>，比较快）。</td>
      </tr>
      <tr>
        <td>不是我</td>
        <td>如果相关的话，调用实例是否应该被排除<tt>（true</tt>）或不排除<tt>（false</tt>）。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p> </p>
  <p>实例ID或没有人</p>
  <p> </p>
  <h4>例子。</h4>
  <p> </p>
  <p>if collision_ellipse(50, 50, 200, 100, obj_Player, false, true)<br> {
    <br> instance_create_layer(obj_Player.x, obj_Player.y, &quot;Effects&quot;, obj_Splash);<br> }
  </p>
  <p>这将在50x, 50y和200x, 100y的范围内检查对象 &quot;obj_Player &quot;的椭圆区域。如果与该物体发生碰撞，那么它将在obj_Player的x/y坐标处创建一个 &quot;obj_Splash &quot;实例。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Collisions.htm">碰撞</a></div>
        <div style="float:right">下一页:<a href="collision_ellipse_list.htm">碰撞_椭圆_列表</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
collision_ellipse
-->
  <!-- TAGS
collision_ellipse
-->
</body>
</html>