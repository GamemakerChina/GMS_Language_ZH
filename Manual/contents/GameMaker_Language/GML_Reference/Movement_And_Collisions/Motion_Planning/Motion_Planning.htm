<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>运动规划</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference section for Motion Planning functions and variables" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Motion Planning,mp,mp funtions" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>运动规划</h1>
  <p>在许多游戏中，你希望对手、NPC、敌人等与玩家互动，并在移动时表现出一定的智慧，即：你希望他们避开障碍物，规划路线，一般来说，不要撞到他们路径上的所有东西。为了帮助
   <span class="notranslate">GameMaker Studio 2</span>有一系列处理运动规划的功能。请注意，虽然这些功能是为游戏中的敌人设计的，但它们可以用于所有的事情，如创建一个平滑的方式
    引入文本，或创建过渡等等。然而，无论你选择在你的游戏中使用下面的列表，应该注意的是，在许多情况下，单一的功能集不会给你一个完美的解决方案，你将不得不
    你将不得不 &quot;混合和匹配 &quot;这些功能，根据你游戏中的情况使用其中一个或另一个。</p>
  <p> <span class="notranslate">GameMaker Studio 2</span>中的运动规划是由<b>mp_</b>函数处理的，这些函数本身分为以下三组。</p>
  <p> </p>
  <h2><label for="one">线性函数</label></h2>
  <p>这类函数试图为实例计算出一条无碰撞的路径。一旦这个路径被计算出来，你就可以把它分配给实例，让它向目标移动。路径的计算会花费一些时间，但之后路径的执行会很快。
    路径的执行将是快速的。当然，这只适用于在此期间情况没有变化的情况。例如，如果障碍物发生变化，你可能需要重新计算路径。再一次注意到，这些函数可能会失败，而且可能没有找到路径
    找到任何路径的实例。</p>
  <p> </p>
  <ul class="colour">
    <li><a href="mp_linear_step.htm">mp_linear_step</a></li>
    <li><a href="mp_linear_step_object.htm">阶梯对象(mp_linear_step_object)</a></li>
    <li><a href="mp_linear_path.htm">mp_linear_path</a></li>
    <li><a href="mp_linear_path_object.htm">mp_linear_path_object</a></li>
  </ul>
  <p> </p>
  <h2><label for="three">潜在的功能</label></h2>
  <p> </p>
  <p>这些是基本的规避功能，适合于简单的人工智能。它们的作用是使一个实例向一个特定的目标位置迈出一步，同时如果可能的话尽量走直线，但如果需要的话则采取不同的方向。这些函数应该
    应在实例的<b>步骤事件</b>中使用。</p>
  <p> </p>
  <ul class="colour">
    <li><a href="mp_potential_settings.htm">潜在设置</a></li>
    <li><a href="mp_potential_step.htm">mp_potential_step</a></li>
    <li><a href="mp_potential_step_object.htm">潜在的阶梯对象(mp_potential_step_object)</a></li>
    <li><a href="mp_potential_path.htm">mp_potential_path</a></li>
    <li><a href="mp_potential_path_object.htm">潜在的路径对象</a></li>
  </ul>
  <p> </p>
  <h2><label for="two">网格功能</label></h2>
  <p> </p>
  <p>最后一种类型的函数使用一个基于网格的更复杂的机制（有时称为A*算法）。它在寻找路径方面要成功得多（尽管它仍然可能失败），并会找到可能的最短路径
    但它需要你做更多的工作来设置它。</p>
  <p>全局思路如下--首先，我们创建一个覆盖房间（或房间的相关部分）的网格。你可以选择使用精细的网格，这样会比较慢，也可以选择粗略的网格，但是这两种网格都应该以房间的分辨率为基础
    以便使路径搜索尽可能准确。例如，如果你有一个400x200像素的房间，你的网格分辨率可以是40，或者20，或者10......这一切都取决于你需要的路径有多精确，以及你想要多少处理
    这取决于你需要多精确的路径，以及你希望<span class="notranslate">GameMaker</span>做多少处理来生成它。</p>
  <p>接下来，对于所有我们想要避免的相关对象，我们需要确定它们重叠的网格单元（基于它们的边界框或它们的精确精灵），并将这些单元标记为禁区。所以一个单元格将被标记为完全禁止。
    即使一个障碍物只是部分重叠。</p>
  <p>最后我们指定一个起始位置和一个目标位置，这两个位置<i>必须</i>位于自由单元中，然后函数会计算这两个位置之间可能的最短路径。该路径将在所有自由单元的中心之间运行，因此
    如果单元格足够大，以至于放置在其中心的实例将完全位于其内部，这将是成功的。然后，这个路径被分配给实例，让其使用 <a href="../../Asset_Management/Paths/Paths.htm"><tt>path_*</tt></a>函数分配给实例。
    你应该意识到单元格的大小对这一点有多重要，因为单元格必须足够大，这样放置在单元格中心的移动物体才会<i>完全</i>位于单元格内。请注意物体原点的位置
    的位置。还要意识到，如果物体的原点不在中心，你可以移动路径！)另一方面，单元格越小，可能存在的路径越多。如果你把单元格做得太大，障碍物之间的开口可能会被关闭
    因为所有的单元格都与一个障碍物相交。</p>
  <p> </p>
  <ul class="colour">
    <li><a href="mp_grid_create.htm">mp_grid_create</a></li>
    <li><a href="mp_grid_destroy.htm">mp_grid_destroy</a></li>
    <li><a href="mp_grid_path.htm">mp_grid_path</a></li>
    <li><a href="mp_grid_add_cell.htm">mp_grid_add_cell</a></li>
    <li><a href="mp_grid_add_instances.htm">mp_grid_add_instances</a></li>
    <li><a href="mp_grid_add_rectangle.htm">mp_grid_add_rectangle</a></li>
    <li><a href="mp_grid_get_cell.htm">mp_grid_get_cell</a></li>
    <li><a href="mp_grid_clear_all.htm">mp_grid_clear_all</a></li>
    <li><a href="mp_grid_clear_cell.htm">mp_grid_clear_cell</a></li>
    <li><a href="mp_grid_clear_rectangle.htm">mp_grid_clear_rectangle</a></li>
    <li><a href="mp_grid_to_ds_grid.htm">mp_grid_to_ds_grid</a></li>
    <li><a href="mp_grid_draw.htm">mp_grid_draw</a></li>
  </ul>
  <p> </p>
  <p>基于网格的方法非常强大（在许多专业游戏中使用），但它要求你做一些仔细的思考，因为你必须确定哪些区域和单元格的大小对解决游戏来说足够好。此外，你还必须确定哪些物体
    必须避免的对象，以及精确检查是否重要。所有这些参数都强烈地影响着该方法的效率。你还必须决定是否真的需要这样做，因为也许一个成本较低的 <span class="inline">mp_*</span> 函数
    就可以很好地完成这项工作。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">背面。<a href="../Movement_And_Collisions.htm">运动和碰撞</a></div>
        <div style="float:right">下一步。<a href="../Collisions/Collisions.htm">碰撞</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Motion Planning
MP Functions
Motion Planning Functions
-->
  <!-- TAGS
mp_functions
-->
</body>
</html>