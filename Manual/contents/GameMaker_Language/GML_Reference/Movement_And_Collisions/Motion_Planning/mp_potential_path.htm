<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>mp_potential_path</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="This page outlines the function mp_potential_path" />
  <meta name="rh-index-keywords" content="mp_potential_path" />
  <meta name="search-keywords" content="mp_potential_path" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>mp_potential_path</h1>
  <p>这个函数为实例计算一条从其当前位置<i>和方向</i>到由xgoal,ygoal参数指定的位置的路径。它使用指定的步长，同时试图避免与所有实例或只与标记为实体的实例发生碰撞。
    那些被标记为实体的实例。就像在函数 <a href="mp_potential_step.htm"><tt>mp_potential_step()</tt></a>中一样，它使用势场步长来实现这一目标，它的方式可以通过函数来修改 <a href="mp_potential_settings.htm"><tt>mp_potential_settings()</tt></a>.
    指示的路径必须已经存在，它将被新的路径所覆盖。该函数将返回是否找到了路径（真）或没有（假）。</p>
  <p>为了避免函数一直计算下去，你需要提供一个大于1的系数--如果函数找不到比这个系数乘以起点和目标之间的距离更短的路径，它将停止并报告失败。一个系数为4
    通常就足够了，但如果你预计会有很长的弯路，你可以把它加长。如果它失败了，仍然会创建一条与目标相近方向的路径，但它不会到达目标。</p>
  <p class="note"><b>注意</b>：这个函数不会移动实例。它只设置一个路径，你必须使用<a href="../../Asset_Management/Paths/Paths.htm">路径</a>函数来移动。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">mp_potential_path(path, xgoal, ygoal, stepsize, factor, checkall)</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>路</td>
        <td>函数要使用的路径的索引</td>
      </tr>
      <tr>
        <td>xgoal</td>
        <td>目标X位置。</td>
      </tr>
      <tr>
        <td>宗旨</td>
        <td>目标Y位置。</td>
      </tr>
      <tr>
        <td>步长</td>
        <td>实例每步移动的速度，单位是像素。</td>
      </tr>
      <tr>
        <td>因素</td>
        <td>这个数字是用来防止无限循环的。它应该大于1。更多信息见函数描述。</td>
      </tr>
      <tr>
        <td>检查所有</td>
        <td>是检查所有实例（true）还是只检查可靠的实例（false）。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code">布尔型</p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">path = path_add();<br> mp_potential_path（path, obj_Player.x, obj_Player.y, 3, 4, 0）;<br> path_start（path, 3, 0, 0）。</p>
  <p>上面的代码创建了一个新的路径资源，并将其索引存储在变量 &quot;path &quot;中。然后，它使用<tt>mp_potential_path</tt>在带有此代码的对象和对象 &quot;obj_Player &quot;之间生成一条路径，检查是否与房间里的所有实例发生碰撞。
    与房间里的所有实例的碰撞。最后，它沿着该路径启动对象，即使该函数未能返回到 &quot;obj_Player &quot;的完整路线。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">回来了。<a href="Motion_Planning.htm">运动规划</a></div>
        <div style="float:right">下一页:<a href="mp_potential_path_object.htm">mp_potential_path_object</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
mp_potential_path
-->
  <!-- TAGS
mp_potential_path
-->
</body>
</html>