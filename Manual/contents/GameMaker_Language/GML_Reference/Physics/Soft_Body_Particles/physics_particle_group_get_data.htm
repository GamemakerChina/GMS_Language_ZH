<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>物理学_粒子组_get_data</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for physics_particle_group_get_data" />
  <meta name="rh-index-keywords" content="physics_particle_group_get_data,phy_particle_data_flag_typeflags,phy_particle_data_flag_position,phy_particle_data_flag_velocity,phy_particle_data_flag_colour,phy_particle_data_flag_category,phy_particle_data_flag_color" />
  <meta name="search-keywords" content="physics_particle_group_get_data,phy_particle_data_flag_typeflags,phy_particle_data_flag_position,phy_particle_data_flag_velocity,phy_particle_data_flag_colour,phy_particle_data_flag_category,phy_particle_data_flag_color" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>物理学_粒子组_get_data</h1>
  <p>这个函数使用给定的标志检查返回物理模拟中的一组粒子的各种信息。组的索引（其ID）是由函数返回的 <a href="physics_particle_group_end.htm"><tt>physics_particle_group_end()</tt></a>,
    所使用的缓冲区必须是在之前用函数 <a href="../../Buffers/buffer_create.htm"><tt>buffer_create()</tt></a>.它应该是 &quot;增长 &quot;类型的，其大小大约是预期返回的
    数据。标志本身是用下面给出的常数来设置的，你可以<a href="../../../../Additional_Information/Bitwise_Operators.htm">用位法<i>或</i></a>&quot;|&quot;来创建一个单一的标志值来获得所需的信息。</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>恒定</th>
        <th>描述</th>
        <th>数据类型</th>
      </tr>
      <tr>
        <td>phy_particle_data_flag_typeflags</td>
        <td>粒子的标志值。</td>
        <td>buffer_u32</td>
      </tr>
      <tr>
        <td>phy_particle_data_flag_position</td>
        <td>粒子的X和Y位置。</td>
        <td>2 x buffer_f32</td>
      </tr>
      <tr>
        <td>phy_particle_data_flag_velocity</td>
        <td>水平和垂直速度。</td>
        <td>2 x buffer_f32</td>
      </tr>
      <tr>
        <td>phy_particle_data_flag_colour</td>
        <td>颜色和阿尔法值（十六进制）。</td>
        <td>buffer_f32</td>
      </tr>
      <tr>
        <td>phy_particle_data_flag_category</td>
        <td>粒子类别（在你创建它所属的组时定义）。</td>
        <td>buffer_u32</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">physics_particle_group_get_data(group, buffer, flags)</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>组</td>
        <td>要获取数据的粒子组的组索引（ID）。</td>
      </tr>
      <tr>
        <td>缓冲区</td>
        <td>用来存储数据的（先前创建的）缓冲区。</td>
      </tr>
      <tr>
        <td>旗帜</td>
        <td>用来提取特定粒子类型数据的标志。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code">缓冲数据</p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var count = physics_particle_group_count(gp);<br> var flags = phy_particle_data_flag_position | phy_particle_data_flag_colour;<br> if (count &gt; 0)<br> {
    <br> var buffer = buffer_create(count * 12, buffer_grow, 4);<br> physics_particle_group_get_data(gp, buffer, flags);<br> for (var n = 0; n &lt; count; n++;)<br> {
    <br> var xx = buffer_read(buffer, buffer_f32);<br> var yy = buffer_read(buffer, buffer_f32);<br> var argb = buffer_read(buffer, buffer_u32);<br> var alpha = (argb &gt;&gt; 24) &amp; 255;<br> draw_sprite_ext(springBlob,
    0, xx, yy, 1, 1, 0, c_green, alpha）;<br> }
    <br> buffer_delete(buffer)。
    <br> }
  </p>
  <p>上面的代码获取由变量 &quot;gp &quot;索引的组中每个粒子的位置和速度，将缓冲区数据存储在一些变量中，然后使用这些数据在组中每个粒子的位置上绘制一个精灵。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">背面。<a href="Soft_Body_Particles.htm">软体颗粒</a></div>
        <div style="float:right">下一篇：<a href="physics_particle_create.htm">物理学_粒子_创建</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
physics_particle_group_get_data
phy_particle_data_flag_typeflags
phy_particle_data_flag_position
phy_particle_data_flag_velocity
phy_particle_data_flag_colour
phy_particle_data_flag_category
-->
  <!-- TAGS
physics_particle_group_get_data
-->
</body>
</html>