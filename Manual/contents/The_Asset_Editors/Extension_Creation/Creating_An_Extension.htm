<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>创建一个扩展</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how to create a generic extension" />
  <meta name="rh-index-keywords" content="Extensions - Creating An Extension" />
  <meta name="search-keywords" content="creating extensions" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>创建一个扩展</h1>
  <p>要创建一个扩展，你首先需要在资产浏览器上右击<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png"> ，并选择<strong>创建扩展</strong>。这将打开主要的扩展属性窗口。</p>
  <p><img alt="Extension Properties" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions.png">现在已经准备好让你添加所需的文件和功能，你也可以在这里给扩展名（按照通常的惯例
    只有字母/数字，除了下划线&quot;_&quot;之外没有特殊符号）。)如果你愿意，你还可以为扩展设置版本号。</p>
  <p>要添加一个文件到新的扩展名中，你需要点击菜单图标<img alt="Estension Options Icon" class="icon" src="../../assets/Images/Icons/Icon_ExtensionMenu.png"> ，然后选择一个占位符文件或实际的文件，该文件是在以下情况下需要的
    目标平台所需的实际文件。</p>
  <p class="dropspot"><img alt="Add Files To An Extension" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_Files.png" /></p>
  <p>一个 &quot;通用 &quot;占位符是一个可以是任何类型的文件，除了那些特定平台所要求的（所以没有 <span class="inline">DLL</span> 或 <span class="inline">SO </span>文件，例如），它将不会被使用，除了作为一个 &quot;链接器&quot;
    文件来连接一组函数或常量与给定的扩展（一般来说，它只用于<span class="notranslate">iOS</span>和<span class="notranslate">Android</span>扩展，这将在下面的章节中为这些目标解释）。你还可以添加 &quot;GML<span class="notranslate">&quot;和</span>&quot;JS&quot;
    占位符文件，以便更具体地使用。</p>
  <p>通常情况下，你不需要使用占位符，除非是为iOS<span class="notranslate">和</span> <span class="notranslate">Android</span>构建<span class="notranslate">，所以</span>你会选择添加<em>文件</em>选项，根据他们的目标平台，添加以下任何一个文件。</p>
  <ul class="colour">
    <li class="dropspot"><span class="inline">.gml</span>: 这是一个只用<span class="notranslate">GameMaker语言</span>制作的文件，与所有平台兼容。</li>
    <li class="dropspot"><span class="inline">.js</span>: 这是一种JavaScript扩展格式，只与JS目标模块（HTML5）兼容。</li>
    <li class="dropspot"><span class="inline">.dll</span> ：这是一种动态链接库扩展格式，只与<span class="notranslate">Windows</span>、UWP和Xbox One目标兼容（每个目标将需要一个与其规格兼容的不同的 <span class="inline">*.dll</span> 文件）。</li>
    <li class="dropspot"><span class="inline">.dylib</span> ：这相当于Mac的DLL，只与Mac目标兼容（不与<span class="notranslate">iOS</span>兼容）。</li>
    <li class="dropspot"><span class="inline">.so</span>: 这相当于<span class="notranslate">Linux</span>的DLL，只与<span class="notranslate">Ubuntu</span><span class="notranslate">（Linux</span>）目标兼容。</li>
    <li class="dropspot"><span class="inline">.prx</span>: 这是一种用于添加功能的PS4目标的文件格式（每个目标将需要一个与其规格兼容的不同的 <span class="inline">*.prx</span> 文件）。</li>
  </ul>
  <p>你会注意到，没有一个文件类型为 <strong><span class="notranslate">安卓</span> </strong>也没有 <strong><span class="notranslate">iOS</span></strong>的文件类型，这是因为它们的设置略有不同。在下文中，你可以找到关于如何设置它们的解释，但首先让我们看看如何为任何一个目标平台创建
    为任何一个目标平台创建一个普通的<span class="notranslate">GML</span>扩展，因为这个过程对所有这些平台都是一样的。</p>
  <p>首先，你需要创建将被使用的文件。对于<span class="notranslate">GML</span>扩展，这将是一个文本文件（以 <span class="inline">.gml</span> 为扩展名保存），其格式将是这样的。</p>
  <p class="code">#define c_alice_blue<br> return make_color_rgb(240,248,255);<br>
    <br>
    <br> #define instance_create_colour<br> var i = instance_create_layer(argument0, argument1, argument2);<br> with (i)<br> {<br> image_blend = argument3;<br> }<br> return i;</p>
  <p>正如你所看到的，我们在每一节的开头都有一个 <span class="inline">#define</span> ，在上面的例子中，它被用来定义两个函数。你不需要为这些函数提供参数字段，因为这将在后面添加，只需使用
    定义，然后是函数的名称，继续添加<span class="notranslate">GML</span>来匹配。如果你要写一个DLL或JS扩展，那么这个过程将是类似的，但要用正确的语言来写扩展文件格式。</p>
  <p>一旦你完成了这些工作，你需要将文件添加到扩展名中（上面有解释），这将为文件属性的扩展名连锁一个新窗口。</p>
  <p class="dropspot"><img alt="File Property Window" class="center" height="553" src="../../assets/Images/Asset_Editors/Editor_Extensions_FileProperties.png" width="1050" /></p>
  <p>在这里，你将选择扩展的目标平台（对于GM来说，你将选择它们全部），以及重命名扩展文件和设置其他一些细节，我们将在稍后介绍。编辑器应该自动填入
    功能，但如果没有，你可以通过点击功能菜单按钮<img alt="Estension Options Icon" class="icon" src="../../assets/Images/Icons/Icon_ExtensionMenu.png"> ，选择你需要的功能来添加它们。</p>
  <p class="dropspot"><img alt="Add functions/Constants To An Extension" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_AddFunctions.png" /></p>
  <p>选择 "<em>添加函数</em>"将允许你添加一个函数到扩展中，然后可以在<span class="notranslate">GameMaker Studio 2</span>中调用，就像你调用任何内置的函数。<span>一旦函数被添加，下面的窗口将打开，让你定义函数的属性（或者你可以双击函数来打开它）。</span></p>
  <p class="dropspot"><img alt="Function Editor" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_FunctionEditor.png" /></p>
  <p>在上面的图片中，我们已经用我们在<span class="notranslate">GML</span>扩展脚本中定义的函数 <span class="inline">instance_create_colour()</span> 的细节填充了函数编辑器（函数编辑器不只是用来定义GML函数的
    而且对任何其他扩展类型都是一样的）。)你可以看到我们给了这个函数一个名字，也就是你在你的项目中使用这个函数时要调用的名字，这个名字不一定要与扩展中使用的名字一致--你可以
    你可以把它设置为任何你想要的东西，然后使用<em>外部名称</em>选项把它与扩展中定义的实际名称联系起来。下面有一个部分用于定义<em>帮助 </em>文本，这是将在代码中使用的文本。
    弹出的文本和代码编辑器底部的帮助文本。</p>
  <p>接下来你可以定义<em>返回类型</em>，它可以是一个<strong>双数 </strong>（实数<a class="glossterm" data-glossterm="浮动点" href="#">浮点</a>值）或一个字符串 - 如果外部函数没有返回任何东西
    那么这并不重要--在这之下，你可以定义函数将接受的参数。</p>
  <p>参数可以是<strong>双数 </strong>，也可以是<strong>字符串</strong>，你可以通过点击添加按钮添加它们，<img alt="Add Argument Icon" class="icon" height="18" src="../../assets/Images/Icons/Icon_AddArgument.png" width="18"> ，也可以通过点击删除按钮删除它们。
    通过点击删除按钮来删除它们<img alt="Remove Argument Icon" class="icon" src="../../assets/Images/Icons/Icon_RemoveArgument.png"> 。如果你的函数可以接受可变参数，你还应该确保选中底部的<em>可变长度参数</em>复选框。</p>
  <p class="note"><strong>注意</strong>：如果你正在创建一个<span class="notranslate">Windows</span> <span class="inline">dll </span>文件，并且它有四个以上的参数，<strong>所有的参数必须是同一类型</strong>。</p>
  <p>一旦你完成了这一切，那么这个函数就可以在项目中使用了，它将在自动完成中显示出来，并以颜色编码。定义的函数也可以被设置为<strong>初始函数</strong>或<strong>最终函数</strong>，这意味着
    这意味着当游戏开始时（Init）和游戏结束时（Final），它们将被自动调用。</p>
  <p class="note"><strong>重要的是!</strong>所有平台都支持Init函数调用，<strong>但不是所有平台都会执行Final函数调用。</strong>这是因为某些平台会简单地关闭应用程序而不给任何通知或时间让
    调用该函数的时间。受此影响的平台有。 <strong><span class="notranslate">iOS</span></strong>, <strong><span class="notranslate">安卓</span></strong>、<strong>HTML5</strong>、<strong>PlayStation </strong>和<strong>XboxOne</strong>。</p>
  <p>你有的另一个选择是创建一个<strong>宏</strong>。一个宏可以是一个<a class="glossterm" data-glossterm="常数" href="#">常量</a>值或一个单一的代码片段（关于宏的更多信息，请看这里）。例如，我们
    可以从我们上面的<span class="notranslate">GML</span>扩展示例中删除对颜色c_alice_blue的定义函数，并使其成为一个宏。要制作一个宏，只需点击扩展属性窗口中的宏按钮。</p>
  <p class="dropspot"><img alt="Macro Editor" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_MacroEditor.png" /></p>
  <p>这里的编辑器几乎是不言自明的--你给出宏/常量的名称和值，或者是一行简短的代码。注意，如果该宏是一行代码，那么<strong>每次调用该宏时都会被评估</strong>。</p>
  <p>当使用多个目标平台时，值得注意的是，你可以创建一个只有一套函数/宏的单一扩展，它将在<em>所有 </em>平台上工作。要做到这一点，只需将其中一个链接库添加到你的
    游戏中添加一个链接库作为扩展，并将其他链接库放入<strong>扩展属性</strong>窗口的<strong>代理文件</strong>列表中。例如，假设你有一个<span class="notranslate">Windows</span>的扩展，其地址为： <span class="inline"> <strong>dll </strong></span>&quot;
    <span class="inline">Haggis.dll</span> &quot;。你可以简单地将这个 <span class="inline"> <strong>dll</strong></span> 复制为Mac的 <span class="inline"> <strong>DyLib</strong></span> ，命名为&quot; <span class="inline"> <strong>libHaggis.dylib</strong></span>&quot;
    并确保内部功能名称与原来的<span class="notranslate">Windows</span> <span class="inline"> <strong>dll</strong></span> 相符。这 <strong> <span class="inline">DyLib</span> </strong>然后将其添加到代理文件中，并设置为在Mac上运行游戏时输出。
    当游戏在Mac目标上运行时，<span class="notranslate">GameMaker Studio 2</span>会在调用扩展函数时自动使用它。</p>
  <p>要添加一个代理文件，只需点击扩展属性窗口中的<img alt="Add Argument Icon" class="icon" height="18" src="../../assets/Images/Icons/Icon_AddArgument.png" width="18"> 按钮，浏览文件位置。
    一旦它被添加，你可能需要将扩展目标改为适当的模块，当你下次运行你的游戏时，它将作为该平台的代理文件被包含。你也可以通过点击<img alt="Remove Argument Icon" class="icon" src="../../assets/Images/Icons/Icon_RemoveArgument.png"> 按钮来删除代理文件，每次按下都会删除列表中的最后一个。</p>
  <p>一旦你添加了你的代理文件，它们将被保存在你的游戏的项目文件中，在Extensions文件夹中（你可以通过右键点击<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png"> ，选择在资源管理器中打开，很容易找到它们。
    扩展名，并选择<em>在资源管理器中打开</em>），所以如果你需要编辑它们，你应该编辑与游戏捆绑的复制文件，而不是原文件，因为<span class="notranslate">GameMaker Studio 2</span>将使用项目中的文件进行编译。</p>
  <p>非常重要的是，你的代理文件要遵循下面列出的命名规则，因为<span class="notranslate">GameMaker Studio 2</span>将解析这些名称，并根据文件的扩展名和名称为其分配目标模块，并自动为你链接文件。
    命名，并自动为你链接文件。如果你不遵循这些约定，你的游戏在<span class="notranslate">运行时</span>可能无法工作，因为<span class="notranslate">GameMaker Studio 2</span>将无法找出要使用的文件，或者它将无法正确加载文件。</p>
  <p>下面给出了每个目标平台的命名惯例。</p>
  <p class="dropspot">  </p>
  <table>
    <tbody>
      <tr>
        <th style="">平台</th>
        <th style="">名称</th>
      </tr>
      <tr>
        <td style=""><span class="notranslate">Windows</span>32位<span class="notranslate">运行时间</span></td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;.dll, lib&lt;<em>Name</em>&gt;.dll</span></td>
      </tr>
      <tr>
        <td style=""><span class="notranslate">Windows</span>64位<span class="notranslate">运行时间</span></td>
        <td style=""><span class="inline">&lt;N<em>ame</em>&gt;_x64.dll, lib&lt;<em>Name</em>&gt;_x64.dll</span></td>
      </tr>
      <tr>
        <td style=""><span class="notranslate">Ubuntu</span><span class="notranslate">(Linux</span>)</td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;.so, lib&lt;<em>Name</em>&gt;.so, &lt;<em>Name</em>&gt;_linux.so, lib&lt;<em>Name</em>&gt;_linux.so</span></td>
      </tr>
      <tr>
        <td style=""><span class="notranslate">macOS</span></td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;.dylib, lib&lt;Name&gt;.dylib</span></td>
      </tr>
      <tr>
        <td style="">HTML5</td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;.js</span></td>
      </tr>
      <tr>
        <td style="">淘宝网</td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt; <em>Name</em>&gt;.prx, &lt; <em>Name</em>&gt;_ps4.prx, lib&lt; <em>Name</em>&gt;_ps4.prx</span></td>
      </tr>
      <tr>
        <td style=""><span class="notranslate">XBox One</span></td>
        <td style=""><span class="inline">&lt;<em>Name</em>&gt;_xboxone.dll</span></td>
      </tr>
    </tbody>
  </table>
  <p class="dropspot"> </p>
  <p>使用上述惯例，你将把 <span class="inline">&lt;<em>Name</em>&gt;</span> 部分换成你要添加代理文件的基础文件的名称。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">回来了。<a href="../Extensions.htm">扩展编辑器</a></div>
        <div style="float:right">下一步。<a href="Android_Extensions.htm"><span class="notranslate">安卓</span>扩展</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Creating Extensions
-->
  <!-- TAGS
extensions_create
-->
</body>
</html>