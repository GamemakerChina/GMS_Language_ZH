<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>对象事件</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing the events system and the different events in an object" />
  <meta name="rh-index-keywords" content="Objects - Events" />
  <meta name="search-keywords" content="events,object events,events list" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>对象事件</h1>
  <p>那么，什么是对象<strong>事件</strong>？基本上，这些是游戏循环中的独立时刻，根据你为它们编程的内容，事情就会发生。<span class="notranslate">GameMaker Studio 2</span>在这些事件的循环中工作--从一个房间开始到结束的那一刻，有一个游戏循环在运行。
    从一个房间开始到结束，有一个游戏循环在运行，每<strong>一步 </strong>都有一系列的事件被运行或检查，你可以选择在你的对象中放置代码或<span class="notranslate">DnD</span>™动作来响应这些事件（一步
    是游戏时间中的一个时刻，受房间速度设置的制约，也可以称为<strong>一帧</strong>）。</p>
  <p>让我们看看一个有事件和代码的典型对象设置。</p>
  <p><img alt="Object Editor Events View" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Events.png">正如你所看到的，在我们的示例对象中列出了一些它应该响应的事件，但最初当你创建
    对象时，这个列表是空的，你必须决定你需要哪些事件，以及该对象的实例在这些事件被触发时应该做什么。要向对象添加事件，你可以按事件列表底部的<em>添加事件</em>按钮
    列表底部的添加事件按钮，将出现以下窗口。</p>
  <p><img alt="Object Editor Events List" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_EventList.png">这是一个对象可以响应的所有基本事件和事件类别的列表，在每个类别中都有子
    事件来进一步细化行为。例如，如果你点击<strong>按键</strong> <img alt="Key Press Icon" height="16" src="../../assets/Images/Icons/Icon_KeyboardPress.png" width="16"> 事件类别，你将会得到一个进一步的窗口，其中包括允许你选择的事件。
    就会弹出另一个窗口，让你选择对象应该对<em>哪个 </em>键作出反应的事件。一旦你选择了你的事件，代码窗口（或<span class="notranslate">DnD</span>™工作区窗口）就会被链接到它，并在右边打开。
    你现在可以编辑代码，给你的对象一个特定的行为或对该事件的反应。</p>
  <p>你可以在任何已添加到对象的事件上点击鼠标右键<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" style=""> ，以获得以下菜单选项。</p>
  <p><img alt="Object Editor Events Menu" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_RMBMenu.png">这些选项是。</p>
  <ul class="colour">
    <li><strong>添加事件</strong>- 从事件列表中添加一个新的事件。</li>
    <li><strong>剪切 </strong>/<strong>复制 </strong>/<strong>粘贴事件</strong>- 剪切、复制或粘贴选定的事件。你也可以使用标准的键盘快捷键：<img alt="CTRL Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Ctrl.png" width="55"> /<img alt="CMD Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Cmd.png" width="55"> + <span class="inline">X</span>,<img alt="CTRL Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Ctrl.png" width="55"> /<img alt="CMD Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Cmd.png" width="55"> + <span class="inline">C</span>, 和<img alt="CTRL Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Ctrl.png" width="55"> /<img alt="CMD Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Cmd.png" width="55"> + <span class="inline">V</span> 。</li>
    <li>复制<strong>事件</strong>- 复制选择的事件。这将采取所选事件的内容，并将它们复制到你指定的另一个事件中。</li>
    <li><strong>改变事件</strong>- 改变事件。这将提示您选择另一个事件类别，一旦选定，当前事件的内容将被改变为新的事件（在此过程中删除原事件）。</li>
    <li><strong>转换为<span class="notranslate">拖放</span></strong>/代码 - 对象事件将使用你创建项目时选择的方法创建，可以使用代码或使用<span class="notranslate">拖放</span>™动作。有了这个选项，你可以从一个转换到另一个，无论
      项目的类型。</li>
    <li><strong>删除事件</strong>- 删除该事件（或事件）。</li>
  </ul>
  <p>当删除事件时，你可以使用<img alt="Shift Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Shift.png" width="55"> +<img alt="LMB Icon" class="icon" src="../../assets/Images/Icons/Icon_LMB.png"> 来选择多个事件，然后将它们全部删除。
    你创建的每个对象都有它自己的事件列表，这些事件是通过<strong>对象编辑器</strong>添加到它里面的。这些事件分为两类。</p>
  <ul class="colour">
    <li>那些运行每一个游戏步骤的人</li>
    <li>那些由游戏事件 &quot;触发 &quot;的事件，如实例到达房间边缘或按下键盘或鼠标。</li>
  </ul>
  <p>活动的完整清单如下。</p>
  <p> </p>
  <p><img alt="Create Event Icon" src="../../assets/Images/Icons/Icon_Create.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">创建</a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot">这个事件发生在对象的一个实例第一次被创建时，也是通过房间编辑器放置在房间里的实例在进入房间时发生的第一件事。这意味着该事件是初始化变量、启动时间线、设置路径等的理想场所。
     <span class="glossextra">变量</span>、启动<a href="../Timelines.htm">时间线</a>、设置<a href="../Paths.htm">路径</a>等......以及其他任何通常只需要做一次或只在实例进入房间时做的事情。
      以及其他任何通常只需要做一次或者只在房间里首次创建实例时做的事情。如果你的对象在对象编辑器或房间编辑器中添加了任何<strong>对象</strong>变量或<strong>实例变量</strong>，那么这些变量将被首先初始化，然后创建事件。
      首先进行初始化，然后运行<strong>创建事件</strong>。</p>
    <p class="dropspot">请记住，你可以从房间编辑器中的<a href="../Room_Properties/Layer_Properties.htm">实例创建代码</a>中修改你在创建事件中设置的任何内容，因为这是在实例的创建事件之后直接运行的，并且可以
      可以用来创建<strong>实例变量</strong>或覆盖任何作为对象变量或在实际创建事件中添加的变量。</p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Destroy Event Icon" src="../../assets/Images/Icons/Icon_Destroy.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">销毁</a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot">这个事件是一个实例被销毁时要执行的事件。在给对象添加行为时，它经常被忽视，但它可以非常有用，例如，当敌人被杀死时，可以创建爆炸或粒子效果，或者在房间的另一个地方重新生成
      一个新的对象实例在房间的另一个地方，或者甚至在分数上加分。</p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Clean Up Event Icon" src="../../assets/Images/Icons/Icon_Destroy.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#">清理</a></p>
  <div class="droptext" data-targetname="drop-down10">
    <p class="dropspot"><span>这个事件将在任何从房间中移除对象的实例的事件之后被调用。因此，它将被触发，如果。</span></p>
    <ul class="dropspotlist">
      <li class="dropspot"><span>该实例被销毁</span></li>
      <li class="dropspot"><span>房间的尽头</span></li>
      <li class="dropspot"><span>游戏结束</span></li>
    </ul>
    <p class="dropspot"><span>它被设计用来 &quot;清理 &quot;你在游戏中可能拥有的任何动态资源（如表面、数据结构等.....<em>. </em>），或者执行任何你需要在实例以任何方式从游戏中移除时执行一次的任务。</span></p>
    <p class="dropspot"><span>请注意，这个事件将在触发它的事件之后<em>立即 </em>被调用，但这个实例实际上不会被从游戏中删除<strong>，直到当前事件结束</strong>。例如，如果你在步骤事件中调用 <span class="inline">instance_destroy()</span> ，那么销毁事件将被调用，然后是清理事件，然后<em>步骤事件的其余部分将完成运行</em>。这意味着你在调用 <span class="inline">instance_destroy()</span> 之后的任何代码仍然会被运行，如果你清理了一个数据结构或其他一些代码所需的资源，就会成为出错的潜在原因，所以使用这个事件时必须小心。</span>
    </p>
    <p> </p>
  </div>
  <p><img alt="Alarm Event Icon" src="../../assets/Images/Icons/Icon_Alarm.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">警报</a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p class="dropspot">报警类别被分成12个事件，每个事件对应一个实例中可能设置的报警。因此，当你点击<em>添加报警 </em>类别时，你会看到这个窗口。</p>
    <p class="dropspot"><img alt="Object Editor Alarm Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_AlarmEvents.png">这里你选择你想创建的警报，一旦完成，你会看到它已经被添加到事件的
      窗口，允许你像往常一样向它添加代码。但什么是报警？嗯，它是一个特殊的事件，除非先前已经设置了警报，否则它不会做任何事情，然后它将等待警报倒数到0，然后再运行你添加到它的动作或代码
      或你添加到它的代码。</p>
    <p class="dropspot">一旦警报达到0并运行代码，它就会倒数到-1，在那里它将保持到再次设置为止（意味着你可以检查警报的值是否大于-1，这将告诉你它是否在运行）。因此，比如说
      你在对象的创建事件中设置 <span class="inline">alarm[0]</span> ，这意味着<span class="notranslate">GameMaker Studio 2</span>将在运行放在 <span class="inline">alarm[0]</span> 事件中的动作或代码之前倒数30个游戏步骤。注意，将警报设置为0<em>不会 </em>运行警报代码，因为事件被触发了，但警报被立即设置为-1，所以代码被跳过。如果你需要一个警报来运行下一步，那么你应该把它设置为1。</p>
    <p class="dropspot">这可能非常有用，因为它允许你在精确的时刻设置事物的运动，你甚至可以让它们重复，因为没有什么可以阻止你在其自身的事件中设置一个警报。想象一下，你有一个怪物，你想让它每隔三秒钟向右转一次......那么，你就可以设置一个警报器。
      好吧，你可以在它的创建事件中设置一个警报，以房间速度*3（如果房间速度是30，那就是每秒30步，所以乘以3，你就得到了3秒！），然后在警报事件中，你可以用代码或
      动作来设置其方向，以及将其警报设置为室速*3的动作（或代码）。通过这种方式，你可以设置简单的游戏循环，事情只在特定的时间间隔发生。</p>
    <p class="dropspot">值得注意的是，一个没有任何动作或代码的报警器将<em>不会 </em>倒计时。然而，即使只有一个注释，没有代码或动作，那么警报将继续倒计时，并可以像正常情况下那样进行设置和检查。</p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Step Event Icon" src="../../assets/Images/Icons/Icon_Step.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#">步骤</a></p>
  <div class="droptext" data-targetname="drop-down12">
    <p class="dropspot"><span class="notranslate">GameMaker Studio 2</span>将时间分成<strong>几步 </strong>，房间速度定义了每秒钟应该有多少步（一步也可以称为<strong>一帧</strong>）。单个步骤，基本上是一个循环，不断地运行
      在游戏运行过程中，所有的事件都被检查并在必要时被触发，所以你可以想象，<strong>步骤事件 </strong>是一个在游戏的每一步都被检查的事件，同时实例存在。</p>
    <p class="dropspot">步骤事件实际上由三个子事件组成，概述如下。</p>
    <p class="dropspot"><img alt="Object Editor Step Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Step.png">对于大多数事情来说，使用标准的步骤事件就可以了，但有时你想对什么代码在什么时间运行有更多的控制。
      什么时候运行，所以我们为你提供了<strong>开始 </strong>和<strong>结束 </strong>步骤事件。这三个事件每一步都被检查，但它们的顺序永远不会改变，即使<span class="notranslate">GameMaker Studio 2</span>引擎的未来更新改变了其他的
      事件，这意味着这是唯一可靠的方法，可以确保某些事情总是在其他事情之前发生。</p>
    <p class="dropspot">步骤事件可以用来做什么？嗯，它可以用于需要连续执行的动作或代码。例如，如果一个物体应该跟在另一个物体后面，在这里你可以调整运动方向，朝向我们正在跟随的物体
      以保持它在后面平稳地移动。不过要小心使用这个事件，不要在对象的步骤事件中放入许多复杂的动作，特别是如果你打算在游戏室里有许多对象的实例，因为这可能会
      因为这可能会减慢游戏的速度。许多事情都可以放入警报器，或者设置为使用一些<strong>其他 </strong>事件来触发，而不是一直发生。</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Collision Event Icon" src="../../assets/Images/Icons/Icon_Collision.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down13" href="#">碰撞</a></p>
  <div class="droptext" data-targetname="drop-down13">
    <p class="dropspot">显然，在制作游戏时，你必须知道一个物体的两个（或多个）实例发生了碰撞，为此我们有<strong>碰撞事件</strong>。这是一个事件，你把它放在一个对象中，然后指定
      你应该检查哪个其他对象的碰撞。</p>
    <p class="dropspot">当你没有打开物理学时，这些碰撞将根据两个物体的掩码来计算（掩码在精灵属性中定义，也可以在物体属性中独立分配），以及它们是否重合
      或不重叠。请注意，如果碰撞中的一个或另一个实例没有分配掩码（或者精灵掩码被设置为无），<em>即使它正在绘制东西</em>，也不会被检测到碰撞。</p>
    <p class="dropspot">如果你打开了<strong>物理学 </strong>，那么碰撞将基于你在物理学属性中为物体定义的<strong>碰撞形状</strong><em>（Fixture</em>）的类型，以及它对碰撞的反应。这
      这意味着你可能不需要任何代码来处理碰撞，但是这个事件仍然<em>需要至少有一个注释 </em>来检测碰撞。</p>
    <p class="dropspot">最后，应该注意的是，在碰撞事件被触发之前，所有的碰撞将在每个游戏步骤中被计算一次，这样，当碰撞事件运行时，所有的碰撞将已经被计算并预先分配。这意味着
      如果你在这个事件中创建了一个实例，然后试图检查与它的碰撞，碰撞将被检测或解决，直到游戏循环的下一个<a class="glossterm" data-glossterm="迭代" href="#">迭代</a>。</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Keyboard Icon" src="../../assets/Images/Icons/Icon_Keyboard.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#">键盘。</a>  <img alt="Keyboard Press Icon" src="../../assets/Images/Icons/Icon_KeyboardPress.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#">敲击键盘。</a>  <img alt="Keyboard Release Icon" height="16" src="../../assets/Images/Icons/Icon_KeyboardRelease.png" style="cursor: nwse-resize;" width="15">    <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#">键盘释放</a></p>
  <div class="droptext" data-targetname="drop-down14">
    <p class="dropspot">让玩家控制你的游戏的不同方面是非常重要的，为此<span class="notranslate">GameMaker Studio 2</span>为你提供了一个非常全面的键盘事件列表，可以在三个主要的键盘类别中使用。对于
      一般键盘类别，只要选定的键被按下，每一步都会被连续触发，而按压和释放类别的事件只会在最初按压或释放键时被触发一次。</p>
    <p class="dropspot">应该注意的是，每当使用一个键时，键盘事件实际上会在一个房间的所有活动实例中被触发，但只有那些为该特定键定义了事件的实例才会响应。
      你可以在任何对象中创建多个键盘事件，当游戏运行时，该对象的实例将对所有这些事件作出反应。</p>
    <p class="dropspot">当你向一个对象添加任何键盘事件时，你会看到键盘子事件菜单，你可以指定你要检查的键。</p>
    <p class="dropspot"><img alt="Object Editor Keyboard Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Keyboard.png">其中大部分是相当明显的，但让我们简单地浏览一下这些部分--在顶部我们有方向键。
      接着是最常用的修改键，然后是键盘的其他部分（分成更多的子部分，这样你就可以得到所需的确切键，如<img alt="Escape Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Escape.png" width="55"> 或<img alt="Insert Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Insert.png" width="55"> ），最后是两个非常特殊的子事件，<strong>无键</strong>和<strong>任意键</strong>。正如它们的名字所暗示的，这些是子
      事件，用于检查<em>没有 </em>键被按下或<em>任何 </em>键被按下时的情况。请注意，数字键盘上的按键只有在启用<strong>数字锁时 </strong>才会产生相应的事件。</p>
    <p class="dropspot">键盘的 "<strong>按下 </strong>"和 "<strong>松开 </strong>"事件与常规键盘事件几乎完全相同，只是它们不是连续触发，而是只触发一次。当键盘第一次记录到
      它将产生一个<strong>键盘按下</strong>事件（以及一个常规的键盘事件），此后第一次不再检测到一个键被按下时，将触发一个<strong>键盘释放</strong>事件。</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt=" Mouse Icon" height="16" src="../../assets/Images/Icons/Icon_MouseEvent.png" width="16"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down16" href="#">鼠标</a></p>
  <div class="droptext" data-targetname="drop-down16">
    <p class="dropspot">鼠标类别被分成一系列的事件，可以选择这些事件来给你一个更精确的控制你的游戏中发生的事情。在这里你可以看到这些事件到底是什么。</p>
    <p class="dropspot"><img alt="Object Editor Mouse Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Mouse.png">左<img alt="LMB Icon" class="icon" src="../../assets/Images/Icons/Icon_LMB.png"> 、右<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png"> 和中<img alt="MMB Icon" class="icon" src="../../assets/Images/Icons/Icon_MMB.png"> 按钮事件（无论是<strong>正常的</strong>、<strong>按下的 </strong>还是<strong>释放的</strong>）都是
      都在拥有该事件的实例的掩码上工作。这意味着<span class="notranslate">GameMaker Studio 2</span>在使用这些按钮时，会对照有鼠标事件的实例的碰撞掩码，检查鼠标在房间里的位置。如果
      与实例的边界框发生 &quot;碰撞&quot;，<a class="glossterm" data-glossterm="界限盒" href="#">那么</a>事件就会被触发，所以要确保任何有这些事件的实例都有一个有效的碰撞精灵
      掩码，或者该对象在对象属性中选择了一个掩码精灵。正如它们的名字所暗示的那样，这些事件将在所选的鼠标按钮第一次按下或释放时被触发一次，或者在按钮保持的每一步都被连续触发。
      保持。
    </p>
    <p class="dropspot">鼠标进入和离开事件也与按钮事件类似，它们也依赖于实例的掩码来工作，但这次它们是在鼠标第一次 &quot;进入&quot;（触摸）实例或鼠标 &quot;离开 &quot;时触发的
      (停止触摸)该实例时触发。然而，这些事件不是连续的，每当鼠标进入或离开对象时才会被触发一次--所以它们是一种理想的方法，例如，创建需要随着鼠标的变化而改变的按钮
      鼠标悬停在它们上面时需要改变，当鼠标移开时又恢复正常。</p>
    <p class="dropspot">最后，我们有另一个部分的鼠标事件，被称为<strong>全局鼠标</strong>。在这个子菜单中，你会发现有一些事件是用来记录鼠标事件的，即使鼠标不在它们上面，甚至不在它们附近的情况下。
      靠近它们。这些事件是为<em>所有 </em>实例生成的，如果有动作或代码为指定的事件定义，那么它将被运行，不管鼠标在游戏室中的位置如何。</p>
    <p class="dropspot">请注意，在移动或触摸屏设备上，鼠标左键<img alt="LMB Icon" class="icon" src="../../assets/Images/Icons/Icon_LMB.png"> ，也可以用来检查触摸屏上的手指标签，而鼠标右键<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png"> ，是由双击屏幕触发的（这个行为可以用代码改变）。</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Gestures Icon" src="../../assets/Images/Icons/Icon_Gesture.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down18" href="#">手势</a></p>
  <div class="droptext" data-targetname="drop-down18">
    <p class="dropspot">这个事件是由用户触摸屏幕（在手机上）或点击并移动鼠标（在所有其他平台上）而触发的。这些事件类似于鼠标事件，你有常规版本和<em>全局</em>版本。
      这些事件的常规版本只有在触摸发生在具有精灵（或掩码）的实例上，并且触摸发生在其<a class="glossterm" data-glossterm="界限盒" href="#">边界</a>框内时才会被触发。而全局的
      的全局版本，将由用户在屏幕上的<em>任何地方 </em>触摸触发。</p>
    <p class="dropspot">手势事件检测的内容如下。</p>
    <ul class="dropspotlist">
      <li class="dropspot"><img alt="Tap Icon" class="icon" src="../../assets/Images/Icons/Icon_Tap.png"> <strong>taps </strong>- 当用户点击/触摸并迅速释放时</li>
      <li class="dropspot"><img alt="Drag Icon" class="icon" src="../../assets/Images/Icons/Icon_Drag.png"> <strong>拖动 </strong>- 当用户触摸/点击并保持它然后移动他们的手指/光标时</li>
      <li class="dropspot"><img alt="Flick Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Flick.png" width="20"> <strong>flicks </strong>- 当用户在一个动作中移动并释放一个触摸/点击时</li>
      <li class="dropspot"><img alt="Pinch Icon" class="icon" src="../../assets/Images/Icons/Icon_Pinch.png"> <strong>捏 </strong>- 当用户将两个手指放在屏幕上，然后一起/分开移动它们时</li>
      <li class="dropspot"><img alt="Rotate Icon" class="icon" src="../../assets/Images/Icons/Icon_Rotate.png"> <strong>旋转 </strong>- 当用户在屏幕上有两个手指，然后围绕一个点进行旋转时</li>
    </ul>
    <p class="dropspot"><img alt="Object Editor Gesture Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Gesture.png">不同的事件总是包含一个叫做 &quot;<span class="inline">event_data</span>&quot;的DS地图，其中包含一些键/值对，包含触摸/点击位置和移动的数据。
      它将包含一些键/值对，其中有关于触摸/点击位置和移动的数据。关于所有可用的子事件以及它们如何工作的全部细节，请参见以下章节。</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="Gesture_Events.htm">手势事件</a></li>
    </ul>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Other Icon" height="16" src="../../assets/Images/Icons/Icon_Other.png" width="16"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down19" href="#">其他</a></p>
  <div class="droptext" data-targetname="drop-down19">
    <p class="dropspot">在用<span class="notranslate">GameMaker Studio 2</span>制作游戏时，有许多特殊的事件，它们大多被集中在 "其他 "事件下，当你选择这个时，可以从弹出的子事件菜单中选择。下面是一个
      所有这些其他事件的图片。</p>
    <p class="dropspot"><img alt="Object Editor Other Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_OtherEvents.png">有关上述图片中所列的每项活动的更多信息，请参见以下部分。</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="Other_Events.htm">其他事件</a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Draw Event" src="../../assets/Images/Icons/Icon_Draw.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down20" href="#">抽签</a></p>
  <div class="droptext" data-targetname="drop-down20">
    <p class="dropspot">这个事件类别是支配你在运行游戏时在屏幕上看到的东西，它被分成各种不相关的事件。</p>
    <p class="dropspot"><img alt="Draw Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Draw.png">正如你所看到的，绘图事件类别有多种不同的事件类型。<strong>绘制开始</strong>、<strong>绘制 </strong>和<strong>绘制结束</strong>是 &quot;标准 &quot;的绘制事件，你可能会最常使用它们。默认情况下，每一个实例都会被调用主Draw事件，不管它是否有精灵，不过如果你把实例标记为不可见，该事件
      将不会被触发（所以如果你在一个不可见对象的绘制事件中有任何游戏逻辑，请记住这一点，因为它将不会运行）。主绘制事件也是<span class="notranslate">GameMaker Studio 2</span>默认绘制实例精灵的地方，当事件中没有代码或
      事件中没有代码或动作（即：你没有把它添加到对象的事件列表中）。默认绘制使用与实例相关的精灵，并将在代码中设置的任何变换或应用的动作中绘制。</p>
    <p class="dropspot">标准绘制事件<em>在 </em> <strong>绘制GUI </strong>事件<em>之前 </em>绘制，并<em>在 </em> <strong>预绘制 </strong>和<strong>后绘制 </strong>事件<em>之间 </em>绘制，这意味着在该事件中绘制的所有东西都在绘制GUI事件的下面，而不考虑层数。
      绘制<strong>GUI </strong>事件中的任何东西，而不考虑图层（即：在绘制GUI事件中绘制的任何东西将总是在正常绘制事件中绘制的任何东西之上，而不考虑图层顺序）。</p>
    <p class="dropspot">请注意，以上只是对抽奖活动工作方式的概述，但关于所有可用的子活动的完整细节，请参见以下章节。</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="Draw_Events.htm">抽奖活动</a></li>
    </ul>
    <p> </p>
    <p> </p>
    <p class="dropspot"> </p>
  </div>
  <p><img alt="Async Event" src="../../assets/Images/Icons/Icon_Async.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down21" href="#">异步</a></p>
  <div class="droptext" data-targetname="drop-down21">
    <p class="dropspot">这个事件类别很特别，因为它所包含的事件不是由<span class="notranslate">GameMaker Studio 2</span>默认触发的，而是由其他一些动作结束后触发的，比如加载一个文件，或者来自网络服务器的回复。该类别被分成了
      以下事件。</p>
    <p class="dropspot"><img alt="Object Editor Asynchronous Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Async.png" /></p>
    <p class="dropspot">所以，说你想在<span class="notranslate">GameMaker Studio 2</span>中添加一个图像文件。那么，你会在一个对象的另一个事件（也许是创建事件）中编写这个代码，然后让这个对象在等待时画一个加载条（例如），轮询适当的异步的
      事件，直到告诉<span class="notranslate">GameMaker Studio 2</span>文件已经加载的<a class="glossterm" data-glossterm="回调" href="#">回调</a>。然后，你可以使用这个事件中返回的数据来做其他事情，比如改变房间，或者购买一个物品。</p>
    <p class="dropspot">请注意，以上只是对异步事件如何工作的概述，但关于所有可用的子事件的完整细节，请参见下面的章节。</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="Async_Events.htm">异步事件列表</a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p>你还应该注意，你可以给事件命名，或者至少给它们一个简短的描述性文本，在事件编辑器中显示在它们旁边。要做到这一点，只需在事件的代码编辑器的第一行添加以下内容。</p>
  <p class="code">/// @description 你的文本在这里</p>
  <p>因此，你可以在--例如--一个<strong>报警 </strong>事件中拥有这样的东西</p>
  <p class="code">// @description 这是人工智能战斗警报。</p>
  <p>现在在你的事件编辑器中你会看到这个。</p>
  <p><img alt="Object Editor Named Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_NamedEvents.png" /></p>
  <p>对于<span class="notranslate">DnD</span>™用户来说，添加注释需要使用 "<strong>执行代码</strong>"动作，这个动作应该放在事件动作的最上面，在所有其他动作之前。当你添加这个动作时，你给它同样的一行代码
    来命名该事件，例如。</p>
  <p><img alt="Naming An Event In DnD" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_DnD_NamedEvents.png">有关上述一些活动的其他信息和一般活动运行顺序，请参见以下章节。</p>
  <ul class="colour">
    <li><a href="Event_Order.htm">活动顺序</a></li>
    <li><a href="Other_Events.htm">其他事件</a></li>
    <li><a href="Draw_Events.htm">抽奖活动</a></li>
    <li><a href="Async_Events.htm">异步事件</a></li>
    <li><a href="Gesture_Events.htm">手势事件</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="../Objects.htm">对象编辑器</a></div>
        <div style="float:right">下一步。父对象</div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Object Events
Named Events
-->
  <!-- TAGS
object_events
-->
</body>
</html>