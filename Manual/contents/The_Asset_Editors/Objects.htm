<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>物品</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how the object editor works" />
  <meta name="rh-index-keywords" content="Object Editor" />
  <meta name="search-keywords" content="objects,object editor" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>对象编辑器</h1>
  <p><img alt="The Object Editor" class="center" src="../assets/Images/Asset_Editors/Editor_Objects.png">对象是我们用来控制游戏的各个方面和做特定事情的资源。大多数时候，它们都有一个与之相关的精灵，以便你在游戏室中看到它们。
    以便你在游戏室中看到它们，但有时它们被用作 &quot;幕后 &quot;控制器，以做与用户有关的事情或用于计时等。它们可以被赋予行为，它们可以对某些事件作出反应，也可以相互反应。
    你在游戏中看到的大多数东西都是基于物体和它们的相互作用。现在，我们说 &quot;基于 &quot;是因为你实际上并没有直接将物体放入游戏房间，而是放置<strong>这些</strong>物体<strong>的</strong>实例，这些实例基本上是物体资源的副本（或克隆，如果你愿意）。这是一个非常重要的事情，因为实例和对象<em>不是一</em>回事，它们都有自己的一套功能，可以影响它们。
    它们。</p>
  <p>为了澄清这一点，想想用<span class="notranslate">GameMaker Studio 2</span>制作的游戏。所有的角色、怪物、球、墙等等......都是你在<a href="../Introduction/The_Asset_Browser.htm">资产浏览器</a>中创建的对象。然后你把<em>对象 </em>拖到
   <a href="Rooms.htm">房间编辑器</a>中的一个房间，创建一个从基本对象模板复制的<em>实例 </em>。然后，房间里的实例可以在编辑器本身或通过代码进行修改，这样它就可以被缩放，或着色，或有
    从 &quot;基本 &quot;对象中修改其他细节。因此，当我们谈论一些东西影响或改变一个<strong>实例</strong>时，我们的意思是它会影响<em>房间里</em>的那个<em>特定的对象副本</em>。只有那个单一的实例被
    被影响，而其他所有的都没有被影响。但是，当我们谈论影响或改变一个<strong>对象</strong>时，我们的意思是我们正在修改资产浏览器中的对象，我们对它做的任何事情都会反映在所有创建的实例中
    也会反映在所有创建的实例上。所以，对象是实例的模板，而实例是我们放在房间里做游戏的东西。</p>
  <p>要在你的游戏中创建一个对象，你可以在资产浏览器上右击<img alt="RMB Icon" class="icon" src="../assets/Images/Icons/Icon_RMB.png" style=""> ，然后点击<em>创建对象</em>选项。这将打开如图所示的窗口
    这将打开本页顶部的窗口，包括以下部分。</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">详细内容</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">在这里你可以给你的对象一个名字。这个名字不应包含空格或未经授权的字符（只允许使用字母数字字符和下划线&quot;_&quot;），而且应该简短但易于记忆，以便以后当你可能有很多资源时，你可以很容易地识别它们。
      当你可能有许多资源时，你可以很容易地识别它们。例如，许多人使用前缀或后缀来识别资源之间的差异，如 &quot;<span class="inline">obj_Ship</span>&quot; 或 &quot;<span class="inline">Ship_obj</span>&quot; 。</p>
    <p class="dropspot">接下来你可以选择对象的精灵，如果你希望它有一个。用鼠标左键点击精灵框<img alt="LMB Icon" class="icon" src="../assets/Images/Icons/Icon_LMB.png"> ，<strong>资产浏览器</strong>将出现资产浏览器中所有可用精灵的列表。</p>
    <p class="dropspot"><img alt="The Asset Explorer" class="center" src="../assets/Images/Asset_Editors/Editor_Objects_AssetExplorer.png">然后你可以选择你想用于该对象的精灵。在为对象分配了一个精灵后，你可以点击<em>编辑</em>精灵按钮<img alt="Edit Sprite Icon" class="icon" src="../assets/Images/Icons/Icon_EditSprite.png"> 来改变<a href="Sprites.htm">精灵的属性</a>，或者--如果你没有对象的精灵而希望创建一个--你可以点击
     <em>添加</em>精灵按钮<img alt="Add Sprite Icon" class="icon" height="24" src="../assets/Images/Icons/Icon_NewSprite.png" width="24"> 来创建一个新的精灵资产并进行分配。你也可以通过点击 "编辑图像 "按钮来编辑已经分配的精灵资产图像。
      点击 "<em>编辑图像</em>"按钮<img alt="Edit Image Icon" class="icon" src="../assets/Images/Icons/Icon_EditImage.png"> ，打开<a href="Image_Editor.htm">图像编辑器</a>。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">碰撞面具</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">在精灵分配区的下面有一个按钮，用于选择一个特定的<strong>碰撞掩码</strong>。默认情况下，一个物体将根据分配给它的精灵产生碰撞属性，但在某些情况下，你可能希望
      碰撞是基于不同精灵的不同形状。例如，你可能有一个自上而下的游戏，主精灵有一个长方形的碰撞掩码，但为了使碰撞更平滑，圆形掩码可能更好。在这种情况下
      你可以点击碰撞遮罩按钮并选择另一个精灵资源，所以现在该对象的实例将<em>绘制 </em>指定的精灵，但基于遮罩精灵的<em>碰撞 </em>。你可以从 "精灵 "页面上找到更多关于碰撞屏蔽的信息。
      你可以在 "<a href="Sprites.htm">精灵编辑器</a>"的页面上找到更多关于碰撞遮罩的信息。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">财产</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">这里你会看到你的对象有以下选项。<strong></strong></p>
    <ul class="dropspotlist">
      <li class="dropspot"><strong>可见的</strong>。Visible表示当房间启动时，这个对象的实例是否可见。通常情况下，大多数实例都是可见的，但有时不可见的实例也很有用--例如，你可以用它们作为控制移动的怪物的路标。
        控制一个移动的怪物，或者保持跟踪值并执行某些定时的动作。不可见的物体仍然会对事件作出反应，如果它们有一个精灵或面具分配给它们，如果其他实例与它们发生碰撞，它们也会作出反应......
        它们只是不能被看到，并且<em>不 </em>执行它们的<strong>绘制事件</strong>。默认情况下，可见标志被选中。<strong></strong></li>
      <li class="dropspot"><strong>固体</strong>：当你把一个实例标记为固体时，你就是在告诉<span class="notranslate">GameMaker Studio 2</span>，它应该在触发<strong>碰撞事件</strong>之前尝试解决任何碰撞。这是一个非常基本的功能，在现实中
        它所做的只是在执行碰撞事件本身中的任何代码或<span class="notranslate">DnD</span>™之前，将实例移回它在检测到碰撞之前的位置，因此用途有限。</li>
      <li class="dropspot"><strong>持久性</strong>。持久性对象是指当房间被改变时，它不会消失，而是 &quot;持续存在 &quot;并被带入新的房间。它只有在你明确地销毁它时才会消失，无论是用
        destroy动作或在代码中明确地销毁它。这意味着，如果你在一个房间里放置一个持久化的对象，它仍然可以在所有后续的房间里使用，并将继续执行分配给其对象属性中的事件的任何动作，<em>除了 </em>
       <strong>创建事件</strong>，它只在最初创建时被触发<em>一次 </em>，而不是在你改变到一个新房间时。当你有一个主角从一个房间移动到另一个房间时，这很方便，你想保持
        但你应该非常注意正确地创建和销毁持久化对象，因为你很容易误入你的项目中出现错误。</li>
    </ul>
    <p class="dropspot"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#" style="margin-left:88px">持久性和房间层数</a>  </p>
    <div class="droptext" data-targetname="drop-down7">
      <p class="dropspot" style="margin-left: 132px">当你在一个房间里创建一个启用了持久性的实例时，它将被分配一个层或一个深度（取决于你用哪个函数来创建对象的实例）。当这个房间被改变时，如果下面的房间没有
        一个与所分配的层具有相同名称或深度的层，那么<strong> 将为该实例创建一个新的层，并在各个房间中持续存在</strong>。如果你在创建实例时给了一个命名的图层，那么新的图层也将
        如果你在创建实例时给了一个命名的图层，那么新的图层也将被命名为与原图层相同，而如果你给实例分配了一个深度，那么新的图层将被命名为 &quot;<span class="inline">_layer_XXX</span>&quot;，其中 &quot;<span class="inline">XXX</span>&quot;是一个十六进制值，用于给图层一个唯一的名称。
        图层的唯一名称。这些图层将在<strong>房间结束</strong>时从房间中删除。<br>
        <br> 关于图层和持久化实例需要注意的另一件事是，如果你在创建时给实例分配了一个命名的图层，而在接下来的房间里有另一个同名的图层，那么持久化的实例将被分配到
        <br>
        <br> 最后，如果一个持久化的实例移动到一个房间，该房间的层与实例创建时的深度<em>相同</em>，它将<em>不会 </em>被分配到这个层，而是在相同的深度创建一个新的层（按照
        按照上面解释的命名惯例）。)</p>
    </div>
    <p class="dropspot"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#" style="margin-left: 88px">持久性和事件</a></p>
    <div class="droptext" data-targetname="drop-down6">
      <p class="dropspot" style="margin-left: 132px">如前所述，一个持久性对象只会运行<em>一次</em>其<strong>创建事件</strong>，但它也会在适当的时候触发其<strong>游戏开始</strong>、<strong>游戏结束</strong>、<strong>房间开始</strong>和<strong>房间结束</strong>事件。然而，如果你重新启动游戏（例如，用 <span class="inline">game_restart()</span> 功能），<em>所有的持久性对象将被删除，只有在游戏再次创建时才会存在</em>。<br>
        <br> 还要注意，如果你<strong>停用 </strong>一个持久性对象，它将不再从一个房间传到另一个房间，除非在<strong>房间结束</strong>事件被触发之前重新激活。重新激活<em>需要一个完整的游戏步骤才能发生</em>。
        所以使用实际的 "<strong>房间结束</strong>"事件并不奏效，因为它没有给游戏一个完整的步骤来重新激活该对象，所以当使用停用持久性对象时，你需要记住这一点，并相应地计划你的
        代码。</p>
    </div>
    <ul class="dropspotlist">
      <li class="dropspot"><strong>使用物理学</strong>。当你选中Uses Physics（使用物理学）复选框时，你就告诉<span class="notranslate">GameMaker Studio 2</span>，这个对象应该是物理学世界的一部分（如在<strong></strong><a href="Rooms.htm">Room Editor</a>中设置的。勾选这个选项也将
        打开另一个链式窗口，在那里你可以定义这个对象的所有实例的物理属性。关于这一点的更多信息可以在<a href="Object_Properties/Physics_Objects.htm">物理对象</a>一节中找到。</li>
    </ul>
  </div>
  <p> </p>
  <p>对象编辑器的最后一部分是不同的对象<strong>选项</strong>，每个选项都在其页面上讨论，链接如下。</p>
  <ul class="colour">
    <li><a href="Object_Properties/Object_Events.htm">对象事件</a></li>
    <li><a href="Object_Properties/Parent_Objects.htm">父对象</a></li>
    <li><a href="Object_Properties/Physics_Objects.htm">物理学对象</a></li>
    <li><a href="Object_Properties/Object_Variables.htm">对象变量</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="The_Asset_Editors.htm">资产编辑部</a></div>
        <div style="float:right">下一步。<a href="Paths.htm">路径</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span>版权所有。2021年 保留所有权利</span></h5>
  </div>
  <!-- KEYWORDS
Object Editor
Objects
-->
  <!-- TAGS
object_editor
-->
</body>
</html>